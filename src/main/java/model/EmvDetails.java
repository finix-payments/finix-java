/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import model.EmvDetailsTags;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invoker.JSON;

/**
 * EmvDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-27T11:05:36.428255-05:00[America/Chicago]")
public class EmvDetails {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<EmvDetailsTags> tags = null;

  public static final String SERIALIZED_NAME_APPLICATION_IDENTIFIER = "application_identifier";
  @SerializedName(SERIALIZED_NAME_APPLICATION_IDENTIFIER)
  private String applicationIdentifier;

  public static final String SERIALIZED_NAME_APPLICATION_LABEL = "application_label";
  @SerializedName(SERIALIZED_NAME_APPLICATION_LABEL)
  private String applicationLabel;

  public static final String SERIALIZED_NAME_APPLICATION_PREFERRED_NAME = "application_preferred_name";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PREFERRED_NAME)
  private String applicationPreferredName;

  public static final String SERIALIZED_NAME_APPLICATION_TRANSACTION_COUNTER = "application_transaction_counter";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TRANSACTION_COUNTER)
  private String applicationTransactionCounter;

  public static final String SERIALIZED_NAME_CRYPTOGRAM = "cryptogram";
  @SerializedName(SERIALIZED_NAME_CRYPTOGRAM)
  private String cryptogram;

  public static final String SERIALIZED_NAME_ISSUER_CODE_TABLE_INDEX = "issuer_code_table_index";
  @SerializedName(SERIALIZED_NAME_ISSUER_CODE_TABLE_INDEX)
  private String issuerCodeTableIndex;

  public static final String SERIALIZED_NAME_PIN_VERIFIED = "pin_verified";
  @SerializedName(SERIALIZED_NAME_PIN_VERIFIED)
  private Boolean pinVerified;

  public EmvDetails() { 
  }

  public EmvDetails tags(List<EmvDetailsTags> tags) {
    
    this.tags = tags;
    return this;
  }

  public EmvDetails addTagsItem(EmvDetailsTags tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmvDetailsTags> getTags() {
    return tags;
  }


  public void setTags(List<EmvDetailsTags> tags) {
    this.tags = tags;
  }


  public EmvDetails applicationIdentifier(String applicationIdentifier) {
    
    this.applicationIdentifier = applicationIdentifier;
    return this;
  }

   /**
   * Get applicationIdentifier
   * @return applicationIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicationIdentifier() {
    return applicationIdentifier;
  }


  public void setApplicationIdentifier(String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
  }


  public EmvDetails applicationLabel(String applicationLabel) {
    
    this.applicationLabel = applicationLabel;
    return this;
  }

   /**
   * Get applicationLabel
   * @return applicationLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicationLabel() {
    return applicationLabel;
  }


  public void setApplicationLabel(String applicationLabel) {
    this.applicationLabel = applicationLabel;
  }


  public EmvDetails applicationPreferredName(String applicationPreferredName) {
    
    this.applicationPreferredName = applicationPreferredName;
    return this;
  }

   /**
   * Get applicationPreferredName
   * @return applicationPreferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicationPreferredName() {
    return applicationPreferredName;
  }


  public void setApplicationPreferredName(String applicationPreferredName) {
    this.applicationPreferredName = applicationPreferredName;
  }


  public EmvDetails applicationTransactionCounter(String applicationTransactionCounter) {
    
    this.applicationTransactionCounter = applicationTransactionCounter;
    return this;
  }

   /**
   * Get applicationTransactionCounter
   * @return applicationTransactionCounter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicationTransactionCounter() {
    return applicationTransactionCounter;
  }


  public void setApplicationTransactionCounter(String applicationTransactionCounter) {
    this.applicationTransactionCounter = applicationTransactionCounter;
  }


  public EmvDetails cryptogram(String cryptogram) {
    
    this.cryptogram = cryptogram;
    return this;
  }

   /**
   * Get cryptogram
   * @return cryptogram
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCryptogram() {
    return cryptogram;
  }


  public void setCryptogram(String cryptogram) {
    this.cryptogram = cryptogram;
  }


  public EmvDetails issuerCodeTableIndex(String issuerCodeTableIndex) {
    
    this.issuerCodeTableIndex = issuerCodeTableIndex;
    return this;
  }

   /**
   * Get issuerCodeTableIndex
   * @return issuerCodeTableIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIssuerCodeTableIndex() {
    return issuerCodeTableIndex;
  }


  public void setIssuerCodeTableIndex(String issuerCodeTableIndex) {
    this.issuerCodeTableIndex = issuerCodeTableIndex;
  }


  public EmvDetails pinVerified(Boolean pinVerified) {
    
    this.pinVerified = pinVerified;
    return this;
  }

   /**
   * Get pinVerified
   * @return pinVerified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPinVerified() {
    return pinVerified;
  }


  public void setPinVerified(Boolean pinVerified) {
    this.pinVerified = pinVerified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmvDetails emvDetails = (EmvDetails) o;
    return Objects.equals(this.tags, emvDetails.tags) &&
        Objects.equals(this.applicationIdentifier, emvDetails.applicationIdentifier) &&
        Objects.equals(this.applicationLabel, emvDetails.applicationLabel) &&
        Objects.equals(this.applicationPreferredName, emvDetails.applicationPreferredName) &&
        Objects.equals(this.applicationTransactionCounter, emvDetails.applicationTransactionCounter) &&
        Objects.equals(this.cryptogram, emvDetails.cryptogram) &&
        Objects.equals(this.issuerCodeTableIndex, emvDetails.issuerCodeTableIndex) &&
        Objects.equals(this.pinVerified, emvDetails.pinVerified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, applicationIdentifier, applicationLabel, applicationPreferredName, applicationTransactionCounter, cryptogram, issuerCodeTableIndex, pinVerified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmvDetails {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    applicationIdentifier: ").append(toIndentedString(applicationIdentifier)).append("\n");
    sb.append("    applicationLabel: ").append(toIndentedString(applicationLabel)).append("\n");
    sb.append("    applicationPreferredName: ").append(toIndentedString(applicationPreferredName)).append("\n");
    sb.append("    applicationTransactionCounter: ").append(toIndentedString(applicationTransactionCounter)).append("\n");
    sb.append("    cryptogram: ").append(toIndentedString(cryptogram)).append("\n");
    sb.append("    issuerCodeTableIndex: ").append(toIndentedString(issuerCodeTableIndex)).append("\n");
    sb.append("    pinVerified: ").append(toIndentedString(pinVerified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("application_identifier");
    openapiFields.add("application_label");
    openapiFields.add("application_preferred_name");
    openapiFields.add("application_transaction_counter");
    openapiFields.add("cryptogram");
    openapiFields.add("issuer_code_table_index");
    openapiFields.add("pin_verified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmvDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmvDetails.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmvDetails is not found in the empty JSON string", EmvDetails.openapiRequiredFields.toString()));
        }
      }
     /* 

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmvDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmvDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      */
      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      if (jsonArraytags != null) {
        // ensure the json data is an array
        if (!jsonObj.get("tags").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
        }

        // validate the optional field `tags` (array)
        for (int i = 0; i < jsonArraytags.size(); i++) {
          EmvDetailsTags.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
        }
          ;
      }
      if (jsonObj.get("application_identifier") != null && !jsonObj.get("application_identifier").isJsonNull()  && !jsonObj.get("application_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_identifier").toString()));
      }
      if (jsonObj.get("application_label") != null && !jsonObj.get("application_label").isJsonNull()  && !jsonObj.get("application_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_label").toString()));
      }
      if (jsonObj.get("application_preferred_name") != null && !jsonObj.get("application_preferred_name").isJsonNull()  && !jsonObj.get("application_preferred_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_preferred_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_preferred_name").toString()));
      }
      if (jsonObj.get("application_transaction_counter") != null && !jsonObj.get("application_transaction_counter").isJsonNull()  && !jsonObj.get("application_transaction_counter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_transaction_counter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_transaction_counter").toString()));
      }
      if (jsonObj.get("cryptogram") != null && !jsonObj.get("cryptogram").isJsonNull()  && !jsonObj.get("cryptogram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cryptogram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cryptogram").toString()));
      }
      if (jsonObj.get("issuer_code_table_index") != null && !jsonObj.get("issuer_code_table_index").isJsonNull()  && !jsonObj.get("issuer_code_table_index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_code_table_index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_code_table_index").toString()));
      }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmvDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmvDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmvDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmvDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EmvDetails>() {
           @Override
           public void write(JsonWriter out, EmvDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmvDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmvDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmvDetails
  * @throws IOException if the JSON string is invalid with respect to EmvDetails
  */
  public static EmvDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmvDetails.class);
  }

 /**
  * Convert an instance of EmvDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

