/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateSubscriptionAmountRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.SubscriptionAmount;
import model.SubscriptionAmountList;

import model.ListSubscriptionAmountQueryParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionAmountsApi {
private FinixClient localVarFinixClient;
private int localHostIndex;
private String localCustomBaseUrl;

public SubscriptionAmountsApi() {
this(Configuration.getDefaultFinixClient());
}

public SubscriptionAmountsApi(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public FinixClient getFinixClient() {
return localVarFinixClient;
}

public void setFinixClient(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public int getHostIndex() {
return localHostIndex;
}

public void setHostIndex(int hostIndex) {
this.localHostIndex = hostIndex;
}

public String getCustomBaseUrl() {
return localCustomBaseUrl;
}

public void setCustomBaseUrl(String customBaseUrl) {
this.localCustomBaseUrl = customBaseUrl;
}

    /**
    * Build call for createSubscriptionAmounts
        * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @param createSubscriptionAmountRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call createSubscriptionAmountsCall(String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = createSubscriptionAmountRequest;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_amounts"
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json"
        };

        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call createSubscriptionAmountsValidateBeforeCall(String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling createSubscriptionAmounts(Async)");
                }
        

            okhttp3.Call localVarCall = createSubscriptionAmountsCall(subscriptionScheduleId, createSubscriptionAmountRequest, _callback);
            return localVarCall;

        }

            /**
            * Create a Subscription Amount
            * Create a &#x60;subscription_amount&#x60;.  The &#x60;Subscription Amount&#x60; is the amount to be charged to a &#x60;Merchant&#x60;. The &#x60;Subscription Amount&#x60; must be associated to a &#x60;Subscription Schedule&#x60;.
                * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
                * @param createSubscriptionAmountRequest  (optional)
                * @return SubscriptionAmount
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
        /**
        * EDITED
        * Test Function Name Generations from OPENAPI Spec with x-java-method-name
        */
                public SubscriptionAmount lcreate(String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest) throws ApiException {
            ApiResponse<SubscriptionAmount> localVarResp = createSubscriptionAmountsWithHttpInfo(subscriptionScheduleId, createSubscriptionAmountRequest);
                    return localVarResp.getData();
                }

    /**
        * Create a Subscription Amount
        * Create a &#x60;subscription_amount&#x60;.  The &#x60;Subscription Amount&#x60; is the amount to be charged to a &#x60;Merchant&#x60;. The &#x60;Subscription Amount&#x60; must be associated to a &#x60;Subscription Schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param createSubscriptionAmountRequest  (optional)
        * @return ApiResponse&lt;SubscriptionAmount&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionAmount> createSubscriptionAmountsWithHttpInfo(String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionAmountsValidateBeforeCall(subscriptionScheduleId, createSubscriptionAmountRequest, null);
                Type localVarReturnType = new TypeToken<SubscriptionAmount>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Create a Subscription Amount (asynchronously)
        * Create a &#x60;subscription_amount&#x60;.  The &#x60;Subscription Amount&#x60; is the amount to be charged to a &#x60;Merchant&#x60;. The &#x60;Subscription Amount&#x60; must be associated to a &#x60;Subscription Schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param createSubscriptionAmountRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createSubscriptionAmountsAsync(String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest, final ApiCallback<SubscriptionAmount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionAmountsValidateBeforeCall(subscriptionScheduleId, createSubscriptionAmountRequest, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionAmount>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for deleteSubscriptionAmount
        * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
        * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call deleteSubscriptionAmountCall(String subscriptionAmountId, String subscriptionScheduleId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_amounts/{subscription_amount_id}"
            .replaceAll("\\{" + "subscription_amount_id" + "\\}", localVarFinixClient.escapeString(subscriptionAmountId.toString()))
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json"
        };

        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call deleteSubscriptionAmountValidateBeforeCall(String subscriptionAmountId, String subscriptionScheduleId, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionAmountId' is set
                if (subscriptionAmountId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionAmountId' when calling deleteSubscriptionAmount(Async)");
                }
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling deleteSubscriptionAmount(Async)");
                }
        

            okhttp3.Call localVarCall = deleteSubscriptionAmountCall(subscriptionAmountId, subscriptionScheduleId, _callback);
            return localVarCall;

        }

            /**
            * Delete a Subscription Amount
            * Delete a previously created &#x60;Subscription Amount&#x60;.
                * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
                * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
        /**
        * EDITED
        * Test Function Name Generations from OPENAPI Spec with x-java-method-name
        */
                public void deleteSubscriptionAmount(String subscriptionAmountId, String subscriptionScheduleId) throws ApiException {
            deleteSubscriptionAmountWithHttpInfo(subscriptionAmountId, subscriptionScheduleId);
                }

    /**
        * Delete a Subscription Amount
        * Delete a previously created &#x60;Subscription Amount&#x60;.
            * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @return ApiResponse&lt;Void&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Void> deleteSubscriptionAmountWithHttpInfo(String subscriptionAmountId, String subscriptionScheduleId) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionAmountValidateBeforeCall(subscriptionAmountId, subscriptionScheduleId, null);
            return localVarFinixClient.execute(localVarCall);
        }

    /**
        * Delete a Subscription Amount (asynchronously)
        * Delete a previously created &#x60;Subscription Amount&#x60;.
            * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call deleteSubscriptionAmountAsync(String subscriptionAmountId, String subscriptionScheduleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionAmountValidateBeforeCall(subscriptionAmountId, subscriptionScheduleId, _callback);
    localVarFinixClient.executeAsync(localVarCall, _callback);
        return localVarCall;
        }
    /**
    * Build call for getSubscriptionAmount
        * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
        * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call getSubscriptionAmountCall(String subscriptionAmountId, String subscriptionScheduleId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_amounts/{subscription_amount_id}"
            .replaceAll("\\{" + "subscription_amount_id" + "\\}", localVarFinixClient.escapeString(subscriptionAmountId.toString()))
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json"
        };

        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call getSubscriptionAmountValidateBeforeCall(String subscriptionAmountId, String subscriptionScheduleId, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionAmountId' is set
                if (subscriptionAmountId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionAmountId' when calling getSubscriptionAmount(Async)");
                }
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling getSubscriptionAmount(Async)");
                }
        

            okhttp3.Call localVarCall = getSubscriptionAmountCall(subscriptionAmountId, subscriptionScheduleId, _callback);
            return localVarCall;

        }

            /**
            * Get a Subscription Amount
            * Retrieve the details of a &#x60;subscription_amount&#x60;.
                * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
                * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
                * @return SubscriptionAmount
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
        /**
        * EDITED
        * Test Function Name Generations from OPENAPI Spec with x-java-method-name
        */
                public SubscriptionAmount get(String subscriptionAmountId, String subscriptionScheduleId) throws ApiException {
            ApiResponse<SubscriptionAmount> localVarResp = getSubscriptionAmountWithHttpInfo(subscriptionAmountId, subscriptionScheduleId);
                    return localVarResp.getData();
                }

    /**
        * Get a Subscription Amount
        * Retrieve the details of a &#x60;subscription_amount&#x60;.
            * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @return ApiResponse&lt;SubscriptionAmount&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionAmount> getSubscriptionAmountWithHttpInfo(String subscriptionAmountId, String subscriptionScheduleId) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionAmountValidateBeforeCall(subscriptionAmountId, subscriptionScheduleId, null);
                Type localVarReturnType = new TypeToken<SubscriptionAmount>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Get a Subscription Amount (asynchronously)
        * Retrieve the details of a &#x60;subscription_amount&#x60;.
            * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getSubscriptionAmountAsync(String subscriptionAmountId, String subscriptionScheduleId, final ApiCallback<SubscriptionAmount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionAmountValidateBeforeCall(subscriptionAmountId, subscriptionScheduleId, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionAmount>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    private okhttp3.Call listSubscriptionAmountCall(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_amounts"
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (afterCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("after_cursor", afterCursor));
                }

                if (beforeCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("before_cursor", beforeCursor));
                }

        final String[] localVarAccepts = {
            "application/hal+json"
        };

        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listSubscriptionAmountValidateBeforeCall(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling listSubscriptionAmount(Async)");
                }
        

            okhttp3.Call localVarCall = listSubscriptionAmountCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
            return localVarCall;

        }


    private ApiResponse<SubscriptionAmountList> listSubscriptionAmountWithHttpInfo(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionAmountValidateBeforeCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, null);
                Type localVarReturnType = new TypeToken<SubscriptionAmountList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call listSubscriptionAmountAsync(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor, final ApiCallback<SubscriptionAmountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionAmountValidateBeforeCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionAmountList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIlistSubscriptionAmountRequest {
            private final String subscriptionScheduleId;
            private Long limit;
            private String afterCursor;
            private String beforeCursor;

        private APIlistSubscriptionAmountRequest(String subscriptionScheduleId) {
            this.subscriptionScheduleId = subscriptionScheduleId;
        }

            /**
            * Set limit
            * @param limit The numbers of items to return (optional)
            * @return APIlistSubscriptionAmountRequest
            */
            public APIlistSubscriptionAmountRequest limit(Long limit) {
            this.limit = limit;
            return this;
            }

            /**
            * Set afterCursor
            * @param afterCursor Return every resource created after the cursor value. (optional)
            * @return APIlistSubscriptionAmountRequest
            */
            public APIlistSubscriptionAmountRequest afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
            }

            /**
            * Set beforeCursor
            * @param beforeCursor Return every resource created before the cursor value. (optional)
            * @return APIlistSubscriptionAmountRequest
            */
            public APIlistSubscriptionAmountRequest beforeCursor(String beforeCursor) {
            this.beforeCursor = beforeCursor;
            return this;
            }

        /**
        * Build call for listSubscriptionAmount
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_amount objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return listSubscriptionAmountCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
        }

        /**
        * Execute listSubscriptionAmount request
            * @return SubscriptionAmountList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_amount objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public SubscriptionAmountList execute() throws ApiException {
    ApiResponse<SubscriptionAmountList> localVarResp = listSubscriptionAmountWithHttpInfo(subscriptionScheduleId, limit, afterCursor, beforeCursor);
            return localVarResp.getData();
        }

        /**
        * Execute listSubscriptionAmount request with HTTP info returned
        * @return ApiResponse&lt;SubscriptionAmountList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_amount objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionAmountList> executeWithHttpInfo() throws ApiException {
        return listSubscriptionAmountWithHttpInfo(subscriptionScheduleId, limit, afterCursor, beforeCursor);
        }

        /**
        * Execute listSubscriptionAmount request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_amount objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionAmountList> _callback) throws ApiException {
        return listSubscriptionAmountAsync(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
        }
        }

        /**
        * List Subscription Amounts
        * Retrive a list of &#x60;Subscription Amounts&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @return APIlistSubscriptionAmountRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_amount objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
    /**
    * EDITED
    * Test Function Name Generations from OPENAPI Spec with x-java-method-name
    */
    public SubscriptionAmountList listBySubscriptionSchedule(String subscriptionScheduleId,  ListSubscriptionAmountQueryParams listSubscriptionAmountQueryParams) throws ApiException {

        APIlistSubscriptionAmountRequest request = new APIlistSubscriptionAmountRequest(subscriptionScheduleId);
        request.limit(listSubscriptionAmountQueryParams.getLimit());
        request.afterCursor(listSubscriptionAmountQueryParams.getAfterCursor());
        request.beforeCursor(listSubscriptionAmountQueryParams.getBeforeCursor());
        return request.execute();

    }
    /**
    * Build call for patchSubscriptionAmount
        * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
        * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @param createSubscriptionAmountRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call patchSubscriptionAmountCall(String subscriptionAmountId, String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = createSubscriptionAmountRequest;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_amounts/{subscription_amount_id}"
            .replaceAll("\\{" + "subscription_amount_id" + "\\}", localVarFinixClient.escapeString(subscriptionAmountId.toString()))
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json"
        };

        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call patchSubscriptionAmountValidateBeforeCall(String subscriptionAmountId, String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionAmountId' is set
                if (subscriptionAmountId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionAmountId' when calling patchSubscriptionAmount(Async)");
                }
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling patchSubscriptionAmount(Async)");
                }
        

            okhttp3.Call localVarCall = patchSubscriptionAmountCall(subscriptionAmountId, subscriptionScheduleId, createSubscriptionAmountRequest, _callback);
            return localVarCall;

        }

            /**
            * Update a Subscription Amount
            * Update the details of a &#x60;subscription_amount&#x60;.
                * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
                * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
                * @param createSubscriptionAmountRequest  (optional)
                * @return SubscriptionAmount
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
        /**
        * EDITED
        * Test Function Name Generations from OPENAPI Spec with x-java-method-name
        */
                public SubscriptionAmount patchSubscriptionAmount(String subscriptionAmountId, String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest) throws ApiException {
            ApiResponse<SubscriptionAmount> localVarResp = patchSubscriptionAmountWithHttpInfo(subscriptionAmountId, subscriptionScheduleId, createSubscriptionAmountRequest);
                    return localVarResp.getData();
                }

    /**
        * Update a Subscription Amount
        * Update the details of a &#x60;subscription_amount&#x60;.
            * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param createSubscriptionAmountRequest  (optional)
        * @return ApiResponse&lt;SubscriptionAmount&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionAmount> patchSubscriptionAmountWithHttpInfo(String subscriptionAmountId, String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest) throws ApiException {
        okhttp3.Call localVarCall = patchSubscriptionAmountValidateBeforeCall(subscriptionAmountId, subscriptionScheduleId, createSubscriptionAmountRequest, null);
                Type localVarReturnType = new TypeToken<SubscriptionAmount>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Update a Subscription Amount (asynchronously)
        * Update the details of a &#x60;subscription_amount&#x60;.
            * @param subscriptionAmountId The ID of the &#x60;Subscription Amount&#x60;. (required)
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param createSubscriptionAmountRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_amount object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call patchSubscriptionAmountAsync(String subscriptionAmountId, String subscriptionScheduleId, CreateSubscriptionAmountRequest createSubscriptionAmountRequest, final ApiCallback<SubscriptionAmount> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchSubscriptionAmountValidateBeforeCall(subscriptionAmountId, subscriptionScheduleId, createSubscriptionAmountRequest, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionAmount>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    }
