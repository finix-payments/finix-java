/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateSettlementRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.Error422InvalidFieldList;
import model.ErrorGeneric;
import model.RemoveSettlementTransfer;
import model.Settlement;
import model.SettlementsList;
import model.TransfersList;
import model.UpdateSettlementRequest;

import model.GetSettlementFundingTransfersQueryParams;
import model.ListSettlementTransfersQueryParams;
import model.ListSettlementsQueryParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SettlementsApi {
private FinixClient localVarFinixClient;
private int localHostIndex;
private String localCustomBaseUrl;

public SettlementsApi() {
this(Configuration.getDefaultFinixClient());
}

public SettlementsApi(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public FinixClient getFinixClient() {
return localVarFinixClient;
}

public void setFinixClient(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public int getHostIndex() {
return localHostIndex;
}

public void setHostIndex(int hostIndex) {
this.localHostIndex = hostIndex;
}

public String getCustomBaseUrl() {
return localCustomBaseUrl;
}

public void setCustomBaseUrl(String customBaseUrl) {
this.localCustomBaseUrl = customBaseUrl;
}

    /**
    * Build call for createIdentitySettlement
        * @param identityId ID of identity to fetch (required)
        * @param body  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 422 </td><td> Merchant identity disabled error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call createIdentitySettlementCall(String identityId, Object body, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = body;

    // create path and map variables
        String localVarPath = "/identities/{identity_id}/settlements"
            .replaceAll("\\{" + "identity_id" + "\\}", localVarFinixClient.escapeString(identityId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call createIdentitySettlementValidateBeforeCall(String identityId, Object body, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'identityId' is set
                if (identityId == null) {
                throw new ApiException("Missing the required parameter 'identityId' when calling createIdentitySettlement(Async)");
                }
        

            okhttp3.Call localVarCall = createIdentitySettlementCall(identityId, body, _callback);
            return localVarCall;

        }

            /**
            * Create Settlement on Identity
            * Create a settlement
                * @param identityId ID of identity to fetch (required)
                * @param body  (optional)
                * @return Settlement
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> Merchant identity disabled error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public Settlement create(String identityId, Object body) throws ApiException {
            ApiResponse<Settlement> localVarResp = createIdentitySettlementWithHttpInfo(identityId, body);
                    return localVarResp.getData();
                }

    /**
        * Create Settlement on Identity
        * Create a settlement
            * @param identityId ID of identity to fetch (required)
            * @param body  (optional)
        * @return ApiResponse&lt;Settlement&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> Merchant identity disabled error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Settlement> createIdentitySettlementWithHttpInfo(String identityId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createIdentitySettlementValidateBeforeCall(identityId, body, null);
                Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Create Settlement on Identity (asynchronously)
        * Create a settlement
            * @param identityId ID of identity to fetch (required)
            * @param body  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> Merchant identity disabled error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createIdentitySettlementAsync(String identityId, Object body, final ApiCallback<Settlement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIdentitySettlementValidateBeforeCall(identityId, body, _callback);
    Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for createSettlement
        * @param createSettlementRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call createSettlementCall(CreateSettlementRequest createSettlementRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = createSettlementRequest;

    // create path and map variables
        String localVarPath = "/settlements";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call createSettlementValidateBeforeCall(CreateSettlementRequest createSettlementRequest, final ApiCallback _callback) throws ApiException {
        

            okhttp3.Call localVarCall = createSettlementCall(createSettlementRequest, _callback);
            return localVarCall;

        }

            /**
            * Create a Batch Settlement
            * Create a batch &#x60;Settlement&#x60;. A &#x60;Settlement&#x60; is a collection of **SUCCEEDED** &#x60;Transfers&#x60; that are ready to get paid out to a &#x60;Merchant&#x60;.
                * @param createSettlementRequest  (optional)
                * @return Settlement
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public Settlement create(CreateSettlementRequest createSettlementRequest) throws ApiException {
            ApiResponse<Settlement> localVarResp = createSettlementWithHttpInfo(createSettlementRequest);
                    return localVarResp.getData();
                }

    /**
        * Create a Batch Settlement
        * Create a batch &#x60;Settlement&#x60;. A &#x60;Settlement&#x60; is a collection of **SUCCEEDED** &#x60;Transfers&#x60; that are ready to get paid out to a &#x60;Merchant&#x60;.
            * @param createSettlementRequest  (optional)
        * @return ApiResponse&lt;Settlement&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Settlement> createSettlementWithHttpInfo(CreateSettlementRequest createSettlementRequest) throws ApiException {
        okhttp3.Call localVarCall = createSettlementValidateBeforeCall(createSettlementRequest, null);
                Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Create a Batch Settlement (asynchronously)
        * Create a batch &#x60;Settlement&#x60;. A &#x60;Settlement&#x60; is a collection of **SUCCEEDED** &#x60;Transfers&#x60; that are ready to get paid out to a &#x60;Merchant&#x60;.
            * @param createSettlementRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createSettlementAsync(CreateSettlementRequest createSettlementRequest, final ApiCallback<Settlement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSettlementValidateBeforeCall(createSettlementRequest, _callback);
    Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for getSettlement
        * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call getSettlementCall(String settlementId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/settlements/{settlement_id}"
            .replaceAll("\\{" + "settlement_id" + "\\}", localVarFinixClient.escapeString(settlementId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call getSettlementValidateBeforeCall(String settlementId, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'settlementId' is set
                if (settlementId == null) {
                throw new ApiException("Missing the required parameter 'settlementId' when calling getSettlement(Async)");
                }
        

            okhttp3.Call localVarCall = getSettlementCall(settlementId, _callback);
            return localVarCall;

        }

            /**
            * Get a Settlement
            * Retreive the details of a &#x60;Settlement&#x60;.
                * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
                * @return Settlement
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public Settlement get(String settlementId) throws ApiException {
            ApiResponse<Settlement> localVarResp = getSettlementWithHttpInfo(settlementId);
                    return localVarResp.getData();
                }

    /**
        * Get a Settlement
        * Retreive the details of a &#x60;Settlement&#x60;.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
        * @return ApiResponse&lt;Settlement&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Settlement> getSettlementWithHttpInfo(String settlementId) throws ApiException {
        okhttp3.Call localVarCall = getSettlementValidateBeforeCall(settlementId, null);
                Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Get a Settlement (asynchronously)
        * Retreive the details of a &#x60;Settlement&#x60;.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getSettlementAsync(String settlementId, final ApiCallback<Settlement> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettlementValidateBeforeCall(settlementId, _callback);
    Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    private okhttp3.Call getSettlementFundingTransfersCall(String settlementId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/settlements/{settlement_id}/funding_transfers"
            .replaceAll("\\{" + "settlement_id" + "\\}", localVarFinixClient.escapeString(settlementId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (afterCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("after_cursor", afterCursor));
                }

                if (beforeCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("before_cursor", beforeCursor));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call getSettlementFundingTransfersValidateBeforeCall(String settlementId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'settlementId' is set
                if (settlementId == null) {
                throw new ApiException("Missing the required parameter 'settlementId' when calling getSettlementFundingTransfers(Async)");
                }
        

            okhttp3.Call localVarCall = getSettlementFundingTransfersCall(settlementId, limit, afterCursor, beforeCursor, _callback);
            return localVarCall;

        }


    private ApiResponse<TransfersList> getSettlementFundingTransfersWithHttpInfo(String settlementId, Long limit, String afterCursor, String beforeCursor) throws ApiException {
        okhttp3.Call localVarCall = getSettlementFundingTransfersValidateBeforeCall(settlementId, limit, afterCursor, beforeCursor, null);
                Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call getSettlementFundingTransfersAsync(String settlementId, Long limit, String afterCursor, String beforeCursor, final ApiCallback<TransfersList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettlementFundingTransfersValidateBeforeCall(settlementId, limit, afterCursor, beforeCursor, _callback);
    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIgetSettlementFundingTransfersRequest {
            private final String settlementId;
            private Long limit;
            private String afterCursor;
            private String beforeCursor;

        private APIgetSettlementFundingTransfersRequest(String settlementId) {
            this.settlementId = settlementId;
        }

            /**
            * Set limit
            * @param limit The numbers of items to return (optional)
            * @return APIgetSettlementFundingTransfersRequest
            */
            public APIgetSettlementFundingTransfersRequest limit(Long limit) {
            this.limit = limit;
            return this;
            }

            /**
            * Set afterCursor
            * @param afterCursor Return every resource created after the cursor value. (optional)
            * @return APIgetSettlementFundingTransfersRequest
            */
            public APIgetSettlementFundingTransfersRequest afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
            }

            /**
            * Set beforeCursor
            * @param beforeCursor Return every resource created before the cursor value. (optional)
            * @return APIgetSettlementFundingTransfersRequest
            */
            public APIgetSettlementFundingTransfersRequest beforeCursor(String beforeCursor) {
            this.beforeCursor = beforeCursor;
            return this;
            }

        /**
        * Build call for getSettlementFundingTransfers
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return getSettlementFundingTransfersCall(settlementId, limit, afterCursor, beforeCursor, _callback);
        }

        /**
        * Execute getSettlementFundingTransfers request
            * @return TransfersList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public TransfersList execute() throws ApiException {
    ApiResponse<TransfersList> localVarResp = getSettlementFundingTransfersWithHttpInfo(settlementId, limit, afterCursor, beforeCursor);
            return localVarResp.getData();
        }

        /**
        * Execute getSettlementFundingTransfers request with HTTP info returned
        * @return ApiResponse&lt;TransfersList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<TransfersList> executeWithHttpInfo() throws ApiException {
        return getSettlementFundingTransfersWithHttpInfo(settlementId, limit, afterCursor, beforeCursor);
        }

        /**
        * Execute getSettlementFundingTransfers request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<TransfersList> _callback) throws ApiException {
        return getSettlementFundingTransfersAsync(settlementId, limit, afterCursor, beforeCursor, _callback);
        }
        }

        /**
        * List Settlement Funding Transfers
        * Retrieve the &#x60;Transfers&#x60; in a &#x60;Settlement&#x60; that have &#x60;type&#x60; **CREDIT**.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
        * @return APIgetSettlementFundingTransfersRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
    public TransfersList listFundingTransfers(String settlementId,  GetSettlementFundingTransfersQueryParams getSettlementFundingTransfersQueryParams) throws ApiException {

        APIgetSettlementFundingTransfersRequest request = new APIgetSettlementFundingTransfersRequest(settlementId);
        request.limit(getSettlementFundingTransfersQueryParams.getLimit());
        request.afterCursor(getSettlementFundingTransfersQueryParams.getAfterCursor());
        request.beforeCursor(getSettlementFundingTransfersQueryParams.getBeforeCursor());
        return request.execute();

    }
    /**
    * Build call for listApplicationSettlements
        * @param applicationId ID of application to use (required)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call listApplicationSettlementsCall(String applicationId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/applications/{application_id}/settlements"
            .replaceAll("\\{" + "application_id" + "\\}", localVarFinixClient.escapeString(applicationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listApplicationSettlementsValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'applicationId' is set
                if (applicationId == null) {
                throw new ApiException("Missing the required parameter 'applicationId' when calling listApplicationSettlements(Async)");
                }
        

            okhttp3.Call localVarCall = listApplicationSettlementsCall(applicationId, _callback);
            return localVarCall;

        }

            /**
            * List Settlements for an Application
            * Return a collection of settlements, if there are no settlements, an empty collection will be returned. 
                * @param applicationId ID of application to use (required)
                * @return SettlementsList
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SettlementsList listByApplicationId(String applicationId) throws ApiException {
            ApiResponse<SettlementsList> localVarResp = listApplicationSettlementsWithHttpInfo(applicationId);
                    return localVarResp.getData();
                }

    /**
        * List Settlements for an Application
        * Return a collection of settlements, if there are no settlements, an empty collection will be returned. 
            * @param applicationId ID of application to use (required)
        * @return ApiResponse&lt;SettlementsList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SettlementsList> listApplicationSettlementsWithHttpInfo(String applicationId) throws ApiException {
        okhttp3.Call localVarCall = listApplicationSettlementsValidateBeforeCall(applicationId, null);
                Type localVarReturnType = new TypeToken<SettlementsList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * List Settlements for an Application (asynchronously)
        * Return a collection of settlements, if there are no settlements, an empty collection will be returned. 
            * @param applicationId ID of application to use (required)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listApplicationSettlementsAsync(String applicationId, final ApiCallback<SettlementsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicationSettlementsValidateBeforeCall(applicationId, _callback);
    Type localVarReturnType = new TypeToken<SettlementsList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for listIdentitySettlements
        * @param identityId ID of identity to fetch (required)
        * @param limit The number of entries to return. (optional)
        * @param offset The number of items to skip before starting to collect the result set. (optional)
        * @param pageNumber The page number to list. (optional)
        * @param pageSize The size of the page. (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call listIdentitySettlementsCall(String identityId, Long limit, Long offset, Long pageNumber, Long pageSize, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/identities/{identity_id}/settlements"
            .replaceAll("\\{" + "identity_id" + "\\}", localVarFinixClient.escapeString(identityId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (offset != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                }

                if (pageNumber != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                }

                if (pageSize != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listIdentitySettlementsValidateBeforeCall(String identityId, Long limit, Long offset, Long pageNumber, Long pageSize, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'identityId' is set
                if (identityId == null) {
                throw new ApiException("Missing the required parameter 'identityId' when calling listIdentitySettlements(Async)");
                }
        

            okhttp3.Call localVarCall = listIdentitySettlementsCall(identityId, limit, offset, pageNumber, pageSize, _callback);
            return localVarCall;

        }

            /**
            * List Identity Settlements
            * Get all settlements associated to this identity
                * @param identityId ID of identity to fetch (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The number of items to skip before starting to collect the result set. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
                * @return SettlementsList
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SettlementsList listByIdentityId(String identityId, Long limit, Long offset, Long pageNumber, Long pageSize) throws ApiException {
            ApiResponse<SettlementsList> localVarResp = listIdentitySettlementsWithHttpInfo(identityId, limit, offset, pageNumber, pageSize);
                    return localVarResp.getData();
                }

    /**
        * List Identity Settlements
        * Get all settlements associated to this identity
            * @param identityId ID of identity to fetch (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The number of items to skip before starting to collect the result set. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @return ApiResponse&lt;SettlementsList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SettlementsList> listIdentitySettlementsWithHttpInfo(String identityId, Long limit, Long offset, Long pageNumber, Long pageSize) throws ApiException {
        okhttp3.Call localVarCall = listIdentitySettlementsValidateBeforeCall(identityId, limit, offset, pageNumber, pageSize, null);
                Type localVarReturnType = new TypeToken<SettlementsList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * List Identity Settlements (asynchronously)
        * Get all settlements associated to this identity
            * @param identityId ID of identity to fetch (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The number of items to skip before starting to collect the result set. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listIdentitySettlementsAsync(String identityId, Long limit, Long offset, Long pageNumber, Long pageSize, final ApiCallback<SettlementsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIdentitySettlementsValidateBeforeCall(identityId, limit, offset, pageNumber, pageSize, _callback);
    Type localVarReturnType = new TypeToken<SettlementsList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    private okhttp3.Call listSettlementTransfersCall(String settlementId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/settlements/{settlement_id}/transfers"
            .replaceAll("\\{" + "settlement_id" + "\\}", localVarFinixClient.escapeString(settlementId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (afterCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("after_cursor", afterCursor));
                }

                if (beforeCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("before_cursor", beforeCursor));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listSettlementTransfersValidateBeforeCall(String settlementId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'settlementId' is set
                if (settlementId == null) {
                throw new ApiException("Missing the required parameter 'settlementId' when calling listSettlementTransfers(Async)");
                }
        

            okhttp3.Call localVarCall = listSettlementTransfersCall(settlementId, limit, afterCursor, beforeCursor, _callback);
            return localVarCall;

        }


    private ApiResponse<TransfersList> listSettlementTransfersWithHttpInfo(String settlementId, Long limit, String afterCursor, String beforeCursor) throws ApiException {
        okhttp3.Call localVarCall = listSettlementTransfersValidateBeforeCall(settlementId, limit, afterCursor, beforeCursor, null);
                Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call listSettlementTransfersAsync(String settlementId, Long limit, String afterCursor, String beforeCursor, final ApiCallback<TransfersList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSettlementTransfersValidateBeforeCall(settlementId, limit, afterCursor, beforeCursor, _callback);
    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIlistSettlementTransfersRequest {
            private final String settlementId;
            private Long limit;
            private String afterCursor;
            private String beforeCursor;

        private APIlistSettlementTransfersRequest(String settlementId) {
            this.settlementId = settlementId;
        }

            /**
            * Set limit
            * @param limit The numbers of items to return (optional)
            * @return APIlistSettlementTransfersRequest
            */
            public APIlistSettlementTransfersRequest limit(Long limit) {
            this.limit = limit;
            return this;
            }

            /**
            * Set afterCursor
            * @param afterCursor Return every resource created after the cursor value. (optional)
            * @return APIlistSettlementTransfersRequest
            */
            public APIlistSettlementTransfersRequest afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
            }

            /**
            * Set beforeCursor
            * @param beforeCursor Return every resource created before the cursor value. (optional)
            * @return APIlistSettlementTransfersRequest
            */
            public APIlistSettlementTransfersRequest beforeCursor(String beforeCursor) {
            this.beforeCursor = beforeCursor;
            return this;
            }

        /**
        * Build call for listSettlementTransfers
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return listSettlementTransfersCall(settlementId, limit, afterCursor, beforeCursor, _callback);
        }

        /**
        * Execute listSettlementTransfers request
            * @return TransfersList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public TransfersList execute() throws ApiException {
    ApiResponse<TransfersList> localVarResp = listSettlementTransfersWithHttpInfo(settlementId, limit, afterCursor, beforeCursor);
            return localVarResp.getData();
        }

        /**
        * Execute listSettlementTransfers request with HTTP info returned
        * @return ApiResponse&lt;TransfersList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<TransfersList> executeWithHttpInfo() throws ApiException {
        return listSettlementTransfersWithHttpInfo(settlementId, limit, afterCursor, beforeCursor);
        }

        /**
        * Execute listSettlementTransfers request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<TransfersList> _callback) throws ApiException {
        return listSettlementTransfersAsync(settlementId, limit, afterCursor, beforeCursor, _callback);
        }
        }

        /**
        * List Settlement Transfers
        * Retrieve the &#x60;Transfers&#x60; in a &#x60;Settlement&#x60; that have &#x60;type&#x60; **DEBIT** or **REFUND**.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
        * @return APIlistSettlementTransfersRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of Transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
    public TransfersList listBySettlementId(String settlementId,  ListSettlementTransfersQueryParams listSettlementTransfersQueryParams) throws ApiException {

        APIlistSettlementTransfersRequest request = new APIlistSettlementTransfersRequest(settlementId);
        request.limit(listSettlementTransfersQueryParams.getLimit());
        request.afterCursor(listSettlementTransfersQueryParams.getAfterCursor());
        request.beforeCursor(listSettlementTransfersQueryParams.getBeforeCursor());
        return request.execute();

    }
    private okhttp3.Call listSettlementsCall(Long amount, Long amountLt, Long amountGt, Long amountLte, Long amountGte, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String id, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/settlements";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (amount != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount", amount));
                }

                if (amountLt != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.lt", amountLt));
                }

                if (amountGt != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.gt", amountGt));
                }

                if (amountLte != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.lte", amountLte));
                }

                if (amountGte != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.gte", amountGte));
                }

                if (createdAtGte != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.gte", createdAtGte));
                }

                if (createdAtLte != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.lte", createdAtLte));
                }

                if (updatedAtGte != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.gte", updatedAtGte));
                }

                if (updatedAtLte != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.lte", updatedAtLte));
                }

                if (id != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("id", id));
                }

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (afterCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("after_cursor", afterCursor));
                }

                if (beforeCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("before_cursor", beforeCursor));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listSettlementsValidateBeforeCall(Long amount, Long amountLt, Long amountGt, Long amountLte, Long amountGte, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String id, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
        

            okhttp3.Call localVarCall = listSettlementsCall(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor, _callback);
            return localVarCall;

        }


    private ApiResponse<SettlementsList> listSettlementsWithHttpInfo(Long amount, Long amountLt, Long amountGt, Long amountLte, Long amountGte, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String id, Long limit, String afterCursor, String beforeCursor) throws ApiException {
        okhttp3.Call localVarCall = listSettlementsValidateBeforeCall(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor, null);
                Type localVarReturnType = new TypeToken<SettlementsList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call listSettlementsAsync(Long amount, Long amountLt, Long amountGt, Long amountLte, Long amountGte, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String id, Long limit, String afterCursor, String beforeCursor, final ApiCallback<SettlementsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSettlementsValidateBeforeCall(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor, _callback);
    Type localVarReturnType = new TypeToken<SettlementsList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIlistSettlementsRequest {
            private Long amount;
            private Long amountLt;
            private Long amountGt;
            private Long amountLte;
            private Long amountGte;
            private String createdAtGte;
            private String createdAtLte;
            private String updatedAtGte;
            private String updatedAtLte;
            private String id;
            private Long limit;
            private String afterCursor;
            private String beforeCursor;

        private APIlistSettlementsRequest() {
        }

            /**
            * Set amount
            * @param amount Filter by a total amount equal to the given value (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest amount(Long amount) {
            this.amount = amount;
            return this;
            }

            /**
            * Set amountLt
            * @param amountLt Filter by a total amount less than (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest amountLt(Long amountLt) {
            this.amountLt = amountLt;
            return this;
            }

            /**
            * Set amountGt
            * @param amountGt Filter by a total amount greater than (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest amountGt(Long amountGt) {
            this.amountGt = amountGt;
            return this;
            }

            /**
            * Set amountLte
            * @param amountLte Filter by a total amount less than or equal (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest amountLte(Long amountLte) {
            this.amountLte = amountLte;
            return this;
            }

            /**
            * Set amountGte
            * @param amountGte Filter by a total amount greater than or equal (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest amountGte(Long amountGte) {
            this.amountGte = amountGte;
            return this;
            }

            /**
            * Set createdAtGte
            * @param createdAtGte Filter where created_at is after the given date. (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest createdAtGte(String createdAtGte) {
            this.createdAtGte = createdAtGte;
            return this;
            }

            /**
            * Set createdAtLte
            * @param createdAtLte Filter where created_at is before the given date. (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest createdAtLte(String createdAtLte) {
            this.createdAtLte = createdAtLte;
            return this;
            }

            /**
            * Set updatedAtGte
            * @param updatedAtGte Filter where updated_at is after the given date (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest updatedAtGte(String updatedAtGte) {
            this.updatedAtGte = updatedAtGte;
            return this;
            }

            /**
            * Set updatedAtLte
            * @param updatedAtLte Filter where updated_at is before the given date (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest updatedAtLte(String updatedAtLte) {
            this.updatedAtLte = updatedAtLte;
            return this;
            }

            /**
            * Set id
            * @param id Filter by id (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest id(String id) {
            this.id = id;
            return this;
            }

            /**
            * Set limit
            * @param limit The numbers of items to return (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest limit(Long limit) {
            this.limit = limit;
            return this;
            }

            /**
            * Set afterCursor
            * @param afterCursor Return every resource created after the cursor value. (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
            }

            /**
            * Set beforeCursor
            * @param beforeCursor Return every resource created before the cursor value. (optional)
            * @return APIlistSettlementsRequest
            */
            public APIlistSettlementsRequest beforeCursor(String beforeCursor) {
            this.beforeCursor = beforeCursor;
            return this;
            }

        /**
        * Build call for listSettlements
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return listSettlementsCall(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor, _callback);
        }

        /**
        * Execute listSettlements request
            * @return SettlementsList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public SettlementsList execute() throws ApiException {
    ApiResponse<SettlementsList> localVarResp = listSettlementsWithHttpInfo(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor);
            return localVarResp.getData();
        }

        /**
        * Execute listSettlements request with HTTP info returned
        * @return ApiResponse&lt;SettlementsList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SettlementsList> executeWithHttpInfo() throws ApiException {
        return listSettlementsWithHttpInfo(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor);
        }

        /**
        * Execute listSettlements request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<SettlementsList> _callback) throws ApiException {
        return listSettlementsAsync(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id, limit, afterCursor, beforeCursor, _callback);
        }
        }

        /**
        * List Settlements
        * Retrieve a list of &#x60;Settlements&#x60;.
        * @return APIlistSettlementsRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of &#x60;Settlement&#x60; objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
    public SettlementsList list( ListSettlementsQueryParams listSettlementsQueryParams) throws ApiException {

        APIlistSettlementsRequest request = new APIlistSettlementsRequest();
        request.amount(listSettlementsQueryParams.getAmount());
        request.amountLt(listSettlementsQueryParams.getAmountLt());
        request.amountGt(listSettlementsQueryParams.getAmountGt());
        request.amountLte(listSettlementsQueryParams.getAmountLte());
        request.amountGte(listSettlementsQueryParams.getAmountGte());
        request.createdAtGte(listSettlementsQueryParams.getCreatedAtGte());
        request.createdAtLte(listSettlementsQueryParams.getCreatedAtLte());
        request.updatedAtGte(listSettlementsQueryParams.getUpdatedAtGte());
        request.updatedAtLte(listSettlementsQueryParams.getUpdatedAtLte());
        request.id(listSettlementsQueryParams.getId());
        request.limit(listSettlementsQueryParams.getLimit());
        request.afterCursor(listSettlementsQueryParams.getAfterCursor());
        request.beforeCursor(listSettlementsQueryParams.getBeforeCursor());
        return request.execute();

    }
    /**
    * Build call for putSettlement
        * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
        * @param updateSettlementRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call putSettlementCall(String settlementId, UpdateSettlementRequest updateSettlementRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = updateSettlementRequest;

    // create path and map variables
        String localVarPath = "/settlements/{settlement_id}"
            .replaceAll("\\{" + "settlement_id" + "\\}", localVarFinixClient.escapeString(settlementId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call putSettlementValidateBeforeCall(String settlementId, UpdateSettlementRequest updateSettlementRequest, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'settlementId' is set
                if (settlementId == null) {
                throw new ApiException("Missing the required parameter 'settlementId' when calling putSettlement(Async)");
                }
        

            okhttp3.Call localVarCall = putSettlementCall(settlementId, updateSettlementRequest, _callback);
            return localVarCall;

        }

            /**
            * Update a Settlement
            * Update a &#x60;Settlement&#x60;.
                * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
                * @param updateSettlementRequest  (optional)
                * @return Settlement
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public Settlement update(String settlementId, UpdateSettlementRequest updateSettlementRequest) throws ApiException {
            ApiResponse<Settlement> localVarResp = putSettlementWithHttpInfo(settlementId, updateSettlementRequest);
                    return localVarResp.getData();
                }

    /**
        * Update a Settlement
        * Update a &#x60;Settlement&#x60;.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
            * @param updateSettlementRequest  (optional)
        * @return ApiResponse&lt;Settlement&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Settlement> putSettlementWithHttpInfo(String settlementId, UpdateSettlementRequest updateSettlementRequest) throws ApiException {
        okhttp3.Call localVarCall = putSettlementValidateBeforeCall(settlementId, updateSettlementRequest, null);
                Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Update a Settlement (asynchronously)
        * Update a &#x60;Settlement&#x60;.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
            * @param updateSettlementRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> &#x60;Settlement&#x60; object. </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call putSettlementAsync(String settlementId, UpdateSettlementRequest updateSettlementRequest, final ApiCallback<Settlement> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSettlementValidateBeforeCall(settlementId, updateSettlementRequest, _callback);
    Type localVarReturnType = new TypeToken<Settlement>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for removeSettlementTransfers
        * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
        * @param removeSettlementTransfer  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call removeSettlementTransfersCall(String settlementId, RemoveSettlementTransfer removeSettlementTransfer, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = removeSettlementTransfer;

    // create path and map variables
        String localVarPath = "/settlements/{settlement_id}/transfers"
            .replaceAll("\\{" + "settlement_id" + "\\}", localVarFinixClient.escapeString(settlementId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call removeSettlementTransfersValidateBeforeCall(String settlementId, RemoveSettlementTransfer removeSettlementTransfer, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'settlementId' is set
                if (settlementId == null) {
                throw new ApiException("Missing the required parameter 'settlementId' when calling removeSettlementTransfers(Async)");
                }
        

            okhttp3.Call localVarCall = removeSettlementTransfersCall(settlementId, removeSettlementTransfer, _callback);
            return localVarCall;

        }

            /**
            * Remove Settlement Transfers
            * Remove a &#x60;Transfer&#x60; from a &#x60;Settlement&#x60;.  As long as the &#x60;Settlement&#x60; hasn&#39;t been funded, you can remove the &#x60;Transfer&#x60; or an array of &#x60;Transfers&#x60;, along with its corresponding &#x60;fee&#x60; from a batch &#x60;Settlement&#x60;.   Note: Per the JSON API for deleting a resource, our API doesn&#39;t have a response body when removing a &#x60;Transfer&#x60; from a &#x60;Settlement&#x60;.
                * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
                * @param removeSettlementTransfer  (optional)
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public void removeTransfersFromSettlement(String settlementId, RemoveSettlementTransfer removeSettlementTransfer) throws ApiException {
            removeSettlementTransfersWithHttpInfo(settlementId, removeSettlementTransfer);
                }

    /**
        * Remove Settlement Transfers
        * Remove a &#x60;Transfer&#x60; from a &#x60;Settlement&#x60;.  As long as the &#x60;Settlement&#x60; hasn&#39;t been funded, you can remove the &#x60;Transfer&#x60; or an array of &#x60;Transfers&#x60;, along with its corresponding &#x60;fee&#x60; from a batch &#x60;Settlement&#x60;.   Note: Per the JSON API for deleting a resource, our API doesn&#39;t have a response body when removing a &#x60;Transfer&#x60; from a &#x60;Settlement&#x60;.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
            * @param removeSettlementTransfer  (optional)
        * @return ApiResponse&lt;Void&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Void> removeSettlementTransfersWithHttpInfo(String settlementId, RemoveSettlementTransfer removeSettlementTransfer) throws ApiException {
        okhttp3.Call localVarCall = removeSettlementTransfersValidateBeforeCall(settlementId, removeSettlementTransfer, null);
            return localVarFinixClient.execute(localVarCall);
        }

    /**
        * Remove Settlement Transfers (asynchronously)
        * Remove a &#x60;Transfer&#x60; from a &#x60;Settlement&#x60;.  As long as the &#x60;Settlement&#x60; hasn&#39;t been funded, you can remove the &#x60;Transfer&#x60; or an array of &#x60;Transfers&#x60;, along with its corresponding &#x60;fee&#x60; from a batch &#x60;Settlement&#x60;.   Note: Per the JSON API for deleting a resource, our API doesn&#39;t have a response body when removing a &#x60;Transfer&#x60; from a &#x60;Settlement&#x60;.
            * @param settlementId ID of &#x60;Settlement&#x60; object. (required)
            * @param removeSettlementTransfer  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call removeSettlementTransfersAsync(String settlementId, RemoveSettlementTransfer removeSettlementTransfer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSettlementTransfersValidateBeforeCall(settlementId, removeSettlementTransfer, _callback);
    localVarFinixClient.executeAsync(localVarCall, _callback);
        return localVarCall;
        }
    }
