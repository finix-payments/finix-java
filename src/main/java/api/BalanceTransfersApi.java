/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.BalanceTransfer;
import model.BalanceTransferList;
import model.CreateBalanceTransferRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.ErrorGeneric;

import java.lang.reflect.Type;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
import javax.ws.rs.core.GenericType;

    public class BalanceTransfersApi {
    private FinixClient localVarFinixClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BalanceTransfersApi() {
    this(Configuration.getDefaultFinixClient());
    }

    public BalanceTransfersApi(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public FinixClient getFinixClient() {
    return localVarFinixClient;
    }

    public void setFinixClient(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public int getHostIndex() {
    return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
    return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
    }

        /**
        * Build call for createBalanceTransfer
            * @param createBalanceTransferRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createBalanceTransferCall(CreateBalanceTransferRequest createBalanceTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createBalanceTransferRequest;

        // create path and map variables
            String localVarPath = "/balance_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createBalanceTransferValidateBeforeCall(CreateBalanceTransferRequest createBalanceTransferRequest, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = createBalanceTransferCall(createBalanceTransferRequest, _callback);
                return localVarCall;

            }

                /**
                * Create a Balance Transfer
                * Create a &#x60;balance_transfer&#x60;.
                    * @param createBalanceTransferRequest  (optional)
                    * @return BalanceTransfer
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 201 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public BalanceTransfer createBalanceTransfer(CreateBalanceTransferRequest createBalanceTransferRequest) throws ApiException {
                ApiResponse<BalanceTransfer> localVarResp = createBalanceTransferWithHttpInfo(createBalanceTransferRequest);
                        return localVarResp.getData();
                    }

        /**
            * Create a Balance Transfer
            * Create a &#x60;balance_transfer&#x60;.
                * @param createBalanceTransferRequest  (optional)
            * @return ApiResponse&lt;BalanceTransfer&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<BalanceTransfer> createBalanceTransferWithHttpInfo(CreateBalanceTransferRequest createBalanceTransferRequest) throws ApiException {
            okhttp3.Call localVarCall = createBalanceTransferValidateBeforeCall(createBalanceTransferRequest, null);
                    Type localVarReturnType = new TypeToken<BalanceTransfer>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Create a Balance Transfer (asynchronously)
            * Create a &#x60;balance_transfer&#x60;.
                * @param createBalanceTransferRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createBalanceTransferAsync(CreateBalanceTransferRequest createBalanceTransferRequest, final ApiCallback<BalanceTransfer> _callback) throws ApiException {

            okhttp3.Call localVarCall = createBalanceTransferValidateBeforeCall(createBalanceTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceTransfer>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for getBalanceTransfers
            * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource. (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getBalanceTransfersCall(String balanceTransfersId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/balance_transfers/{balance_transfers_id}"
                .replaceAll("\\{" + "balance_transfers_id" + "\\}", localVarFinixClient.escapeString(balanceTransfersId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call getBalanceTransfersValidateBeforeCall(String balanceTransfersId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'balanceTransfersId' is set
                    if (balanceTransfersId == null) {
                    throw new ApiException("Missing the required parameter 'balanceTransfersId' when calling getBalanceTransfers(Async)");
                    }
            

                okhttp3.Call localVarCall = getBalanceTransfersCall(balanceTransfersId, _callback);
                return localVarCall;

            }

                /**
                * Get a Balance Transfer
                * Retrieve the details of a &#x60;balance_transfer&#x60;.
                    * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource. (required)
                    * @return BalanceTransfer
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public BalanceTransfer getBalanceTransfers(String balanceTransfersId) throws ApiException {
                ApiResponse<BalanceTransfer> localVarResp = getBalanceTransfersWithHttpInfo(balanceTransfersId);
                        return localVarResp.getData();
                    }

        /**
            * Get a Balance Transfer
            * Retrieve the details of a &#x60;balance_transfer&#x60;.
                * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource. (required)
            * @return ApiResponse&lt;BalanceTransfer&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<BalanceTransfer> getBalanceTransfersWithHttpInfo(String balanceTransfersId) throws ApiException {
            okhttp3.Call localVarCall = getBalanceTransfersValidateBeforeCall(balanceTransfersId, null);
                    Type localVarReturnType = new TypeToken<BalanceTransfer>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Get a Balance Transfer (asynchronously)
            * Retrieve the details of a &#x60;balance_transfer&#x60;.
                * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource. (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single balance_transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call getBalanceTransfersAsync(String balanceTransfersId, final ApiCallback<BalanceTransfer> _callback) throws ApiException {

            okhttp3.Call localVarCall = getBalanceTransfersValidateBeforeCall(balanceTransfersId, _callback);
        Type localVarReturnType = new TypeToken<BalanceTransfer>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listBalanceTransfers
            * @param limit The numbers of items to return (optional)
            * @param offset The number of items to skip before starting to collect the result set (optional)
            * @param pageNumber The page number to list (optional)
            * @param pageSize The size of the page (optional)
            * @param createdAtGte Filter where created_at is after the given date. (optional)
            * @param createdAtLte Filter where created_at is before the given date. (optional)
            * @param updatedAtGte Filter where updated_at is after the given date (optional)
            * @param updatedAtLte Filter where updated_at is before the given date (optional)
            * @param idempotencyId Filter by idempotency_id (optional)
            * @param amount Filter by an amount equal to the given value (optional)
            * @param description Filter by the &#x60;description&#x60; value  (optional)
            * @param destination Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;destination&#x60; (optional)
            * @param externalReferenceId Filter by the value saved in &#x60;external_reference_id&#x60; (optional)
            * @param referenceId Filter by the value saved in &#x60;reference_id&#x60; (optional)
            * @param source Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;source&#x60; (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of balance_transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listBalanceTransfersCall(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String idempotencyId, Integer amount, String description, String destination, String externalReferenceId, String referenceId, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/balance_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

                    if (createdAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.gte", createdAtGte));
                    }

                    if (createdAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.lte", createdAtLte));
                    }

                    if (updatedAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.gte", updatedAtGte));
                    }

                    if (updatedAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.lte", updatedAtLte));
                    }

                    if (idempotencyId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("idempotency_id", idempotencyId));
                    }

                    if (amount != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount", amount));
                    }

                    if (description != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("description", description));
                    }

                    if (destination != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("destination", destination));
                    }

                    if (externalReferenceId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("external_reference_id", externalReferenceId));
                    }

                    if (referenceId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("reference_id", referenceId));
                    }

                    if (source != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("source", source));
                    }

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listBalanceTransfersValidateBeforeCall(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String idempotencyId, Integer amount, String description, String destination, String externalReferenceId, String referenceId, String source, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = listBalanceTransfersCall(limit, offset, pageNumber, pageSize, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, idempotencyId, amount, description, destination, externalReferenceId, referenceId, source, _callback);
                return localVarCall;

            }

                /**
                * List Balance Transfers
                * Retrieve a list of &#x60;balance_transfers&#x60;.
                    * @param limit The numbers of items to return (optional)
                    * @param offset The number of items to skip before starting to collect the result set (optional)
                    * @param pageNumber The page number to list (optional)
                    * @param pageSize The size of the page (optional)
                    * @param createdAtGte Filter where created_at is after the given date. (optional)
                    * @param createdAtLte Filter where created_at is before the given date. (optional)
                    * @param updatedAtGte Filter where updated_at is after the given date (optional)
                    * @param updatedAtLte Filter where updated_at is before the given date (optional)
                    * @param idempotencyId Filter by idempotency_id (optional)
                    * @param amount Filter by an amount equal to the given value (optional)
                    * @param description Filter by the &#x60;description&#x60; value  (optional)
                    * @param destination Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;destination&#x60; (optional)
                    * @param externalReferenceId Filter by the value saved in &#x60;external_reference_id&#x60; (optional)
                    * @param referenceId Filter by the value saved in &#x60;reference_id&#x60; (optional)
                    * @param source Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;source&#x60; (optional)
                    * @return BalanceTransferList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of balance_transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public BalanceTransferList listBalanceTransfers(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String idempotencyId, Integer amount, String description, String destination, String externalReferenceId, String referenceId, String source) throws ApiException {
                ApiResponse<BalanceTransferList> localVarResp = listBalanceTransfersWithHttpInfo(limit, offset, pageNumber, pageSize, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, idempotencyId, amount, description, destination, externalReferenceId, referenceId, source);
                        return localVarResp.getData();
                    }

        /**
            * List Balance Transfers
            * Retrieve a list of &#x60;balance_transfers&#x60;.
                * @param limit The numbers of items to return (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param pageNumber The page number to list (optional)
                * @param pageSize The size of the page (optional)
                * @param createdAtGte Filter where created_at is after the given date. (optional)
                * @param createdAtLte Filter where created_at is before the given date. (optional)
                * @param updatedAtGte Filter where updated_at is after the given date (optional)
                * @param updatedAtLte Filter where updated_at is before the given date (optional)
                * @param idempotencyId Filter by idempotency_id (optional)
                * @param amount Filter by an amount equal to the given value (optional)
                * @param description Filter by the &#x60;description&#x60; value  (optional)
                * @param destination Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;destination&#x60; (optional)
                * @param externalReferenceId Filter by the value saved in &#x60;external_reference_id&#x60; (optional)
                * @param referenceId Filter by the value saved in &#x60;reference_id&#x60; (optional)
                * @param source Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;source&#x60; (optional)
            * @return ApiResponse&lt;BalanceTransferList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of balance_transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<BalanceTransferList> listBalanceTransfersWithHttpInfo(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String idempotencyId, Integer amount, String description, String destination, String externalReferenceId, String referenceId, String source) throws ApiException {
            okhttp3.Call localVarCall = listBalanceTransfersValidateBeforeCall(limit, offset, pageNumber, pageSize, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, idempotencyId, amount, description, destination, externalReferenceId, referenceId, source, null);
                    Type localVarReturnType = new TypeToken<BalanceTransferList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Balance Transfers (asynchronously)
            * Retrieve a list of &#x60;balance_transfers&#x60;.
                * @param limit The numbers of items to return (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param pageNumber The page number to list (optional)
                * @param pageSize The size of the page (optional)
                * @param createdAtGte Filter where created_at is after the given date. (optional)
                * @param createdAtLte Filter where created_at is before the given date. (optional)
                * @param updatedAtGte Filter where updated_at is after the given date (optional)
                * @param updatedAtLte Filter where updated_at is before the given date (optional)
                * @param idempotencyId Filter by idempotency_id (optional)
                * @param amount Filter by an amount equal to the given value (optional)
                * @param description Filter by the &#x60;description&#x60; value  (optional)
                * @param destination Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;destination&#x60; (optional)
                * @param externalReferenceId Filter by the value saved in &#x60;external_reference_id&#x60; (optional)
                * @param referenceId Filter by the value saved in &#x60;reference_id&#x60; (optional)
                * @param source Filter by the &#x60;Payment Instrument&#x60; saved in &#x60;source&#x60; (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of balance_transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listBalanceTransfersAsync(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, String idempotencyId, Integer amount, String description, String destination, String externalReferenceId, String referenceId, String source, final ApiCallback<BalanceTransferList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listBalanceTransfersValidateBeforeCall(limit, offset, pageNumber, pageSize, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, idempotencyId, amount, description, destination, externalReferenceId, referenceId, source, _callback);
        Type localVarReturnType = new TypeToken<BalanceTransferList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        }
