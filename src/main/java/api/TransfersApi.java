/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateReversalRequest;
import model.CreateTransferRequest;
import model.Error401Unauthorized;
import model.Error402PaymentRequired;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.Error422InvalidFieldList;
import model.ErrorGeneric;
import model.Transfer;
import model.TransfersList;
import model.UpdateTransferRequest;

import java.lang.reflect.Type;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
import javax.ws.rs.core.GenericType;

    public class TransfersApi {
    private FinixClient localVarFinixClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransfersApi() {
    this(Configuration.getDefaultFinixClient());
    }

    public TransfersApi(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public FinixClient getFinixClient() {
    return localVarFinixClient;
    }

    public void setFinixClient(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public int getHostIndex() {
    return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
    return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
    }

        /**
        * Build call for createTransfer
            * @param createTransferRequest A form that needs to be implemented (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 402 </td><td> 402 - Payment required </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> 422 Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createTransferCall(CreateTransferRequest createTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createTransferRequest;

        // create path and map variables
            String localVarPath = "/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createTransferValidateBeforeCall(CreateTransferRequest createTransferRequest, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = createTransferCall(createTransferRequest, _callback);
                return localVarCall;

            }

                /**
                * Create a Transfer
                * Create a transfer.
                    * @param createTransferRequest A form that needs to be implemented (optional)
                    * @return Transfer
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 402 </td><td> 402 - Payment required </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 422 </td><td> 422 Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public Transfer create(CreateTransferRequest createTransferRequest) throws ApiException {
                ApiResponse<Transfer> localVarResp = createTransferWithHttpInfo(createTransferRequest);
                        return localVarResp.getData();
                    }

        /**
            * Create a Transfer
            * Create a transfer.
                * @param createTransferRequest A form that needs to be implemented (optional)
            * @return ApiResponse&lt;Transfer&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 402 </td><td> 402 - Payment required </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> 422 Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<Transfer> createTransferWithHttpInfo(CreateTransferRequest createTransferRequest) throws ApiException {
            okhttp3.Call localVarCall = createTransferValidateBeforeCall(createTransferRequest, null);
                    Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Create a Transfer (asynchronously)
            * Create a transfer.
                * @param createTransferRequest A form that needs to be implemented (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 402 </td><td> 402 - Payment required </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> 422 Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createTransferAsync(CreateTransferRequest createTransferRequest, final ApiCallback<Transfer> _callback) throws ApiException {

            okhttp3.Call localVarCall = createTransferValidateBeforeCall(createTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for createTransferReversal
            * @param transferId ID of object (required)
            * @param createReversalRequest Reversal Creation (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createTransferReversalCall(String transferId, CreateReversalRequest createReversalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createReversalRequest;

        // create path and map variables
            String localVarPath = "/transfers/{transfer_id}/reversals"
                .replaceAll("\\{" + "transfer_id" + "\\}", localVarFinixClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createTransferReversalValidateBeforeCall(String transferId, CreateReversalRequest createReversalRequest, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'transferId' is set
                    if (transferId == null) {
                    throw new ApiException("Missing the required parameter 'transferId' when calling createTransferReversal(Async)");
                    }
            

                okhttp3.Call localVarCall = createTransferReversalCall(transferId, createReversalRequest, _callback);
                return localVarCall;

            }

                /**
                * Refund or Reverse a Transfer
                * Reverse a transfer with a &#x60;type&#x60; of **DEBIT**. This creates a new &#x60;Transfer&#x60; resource with a &#x60;type&#x60; of **REVERSAL**
                    * @param transferId ID of object (required)
                    * @param createReversalRequest Reversal Creation (optional)
                    * @return Transfer
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 422 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public Transfer createTransferReversal(String transferId, CreateReversalRequest createReversalRequest) throws ApiException {
                ApiResponse<Transfer> localVarResp = createTransferReversalWithHttpInfo(transferId, createReversalRequest);
                        return localVarResp.getData();
                    }

        /**
            * Refund or Reverse a Transfer
            * Reverse a transfer with a &#x60;type&#x60; of **DEBIT**. This creates a new &#x60;Transfer&#x60; resource with a &#x60;type&#x60; of **REVERSAL**
                * @param transferId ID of object (required)
                * @param createReversalRequest Reversal Creation (optional)
            * @return ApiResponse&lt;Transfer&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<Transfer> createTransferReversalWithHttpInfo(String transferId, CreateReversalRequest createReversalRequest) throws ApiException {
            okhttp3.Call localVarCall = createTransferReversalValidateBeforeCall(transferId, createReversalRequest, null);
                    Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Refund or Reverse a Transfer (asynchronously)
            * Reverse a transfer with a &#x60;type&#x60; of **DEBIT**. This creates a new &#x60;Transfer&#x60; resource with a &#x60;type&#x60; of **REVERSAL**
                * @param transferId ID of object (required)
                * @param createReversalRequest Reversal Creation (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createTransferReversalAsync(String transferId, CreateReversalRequest createReversalRequest, final ApiCallback<Transfer> _callback) throws ApiException {

            okhttp3.Call localVarCall = createTransferReversalValidateBeforeCall(transferId, createReversalRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for get
            * @param transferId ID of object (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getCall(String transferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/transfers/{transfer_id}"
                .replaceAll("\\{" + "transfer_id" + "\\}", localVarFinixClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call getValidateBeforeCall(String transferId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'transferId' is set
                    if (transferId == null) {
                    throw new ApiException("Missing the required parameter 'transferId' when calling get(Async)");
                    }
            

                okhttp3.Call localVarCall = getCall(transferId, _callback);
                return localVarCall;

            }

                /**
                * Get a Transfer
                * Retrieve a transfer.
                    * @param transferId ID of object (required)
                    * @return Transfer
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public Transfer get(String transferId) throws ApiException {
                ApiResponse<Transfer> localVarResp = getWithHttpInfo(transferId);
                        return localVarResp.getData();
                    }

        /**
            * Get a Transfer
            * Retrieve a transfer.
                * @param transferId ID of object (required)
            * @return ApiResponse&lt;Transfer&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<Transfer> getWithHttpInfo(String transferId) throws ApiException {
            okhttp3.Call localVarCall = getValidateBeforeCall(transferId, null);
                    Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Get a Transfer (asynchronously)
            * Retrieve a transfer.
                * @param transferId ID of object (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call getAsync(String transferId, final ApiCallback<Transfer> _callback) throws ApiException {

            okhttp3.Call localVarCall = getValidateBeforeCall(transferId, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listApplicationTransfers
            * @param applicationId ID of application to use (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listApplicationTransfersCall(String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/applications/{application_id}/transfers"
                .replaceAll("\\{" + "application_id" + "\\}", localVarFinixClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listApplicationTransfersValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'applicationId' is set
                    if (applicationId == null) {
                    throw new ApiException("Missing the required parameter 'applicationId' when calling listApplicationTransfers(Async)");
                    }
            

                okhttp3.Call localVarCall = listApplicationTransfersCall(applicationId, _callback);
                return localVarCall;

            }

                /**
                * List Transfers for an Application
                * Get all transfers objects within application
                    * @param applicationId ID of application to use (required)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList listByApplicationId(String applicationId) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listApplicationTransfersWithHttpInfo(applicationId);
                        return localVarResp.getData();
                    }

        /**
            * List Transfers for an Application
            * Get all transfers objects within application
                * @param applicationId ID of application to use (required)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listApplicationTransfersWithHttpInfo(String applicationId) throws ApiException {
            okhttp3.Call localVarCall = listApplicationTransfersValidateBeforeCall(applicationId, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Transfers for an Application (asynchronously)
            * Get all transfers objects within application
                * @param applicationId ID of application to use (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listApplicationTransfersAsync(String applicationId, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listApplicationTransfersValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listIdentityTransfers
            * @param identityId ID of identity to fetch (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listIdentityTransfersCall(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/identities/{identity_id}/transfers"
                .replaceAll("\\{" + "identity_id" + "\\}", localVarFinixClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listIdentityTransfersValidateBeforeCall(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'identityId' is set
                    if (identityId == null) {
                    throw new ApiException("Missing the required parameter 'identityId' when calling listIdentityTransfers(Async)");
                    }
            

                okhttp3.Call localVarCall = listIdentityTransfersCall(identityId, limit, offset, pageNumber, pageSize, _callback);
                return localVarCall;

            }

                /**
                * List Identity Transfers
                * All transfers associated to this identity
                    * @param identityId ID of identity to fetch (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList listByIdentityId(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listIdentityTransfersWithHttpInfo(identityId, limit, offset, pageNumber, pageSize);
                        return localVarResp.getData();
                    }

        /**
            * List Identity Transfers
            * All transfers associated to this identity
                * @param identityId ID of identity to fetch (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listIdentityTransfersWithHttpInfo(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
            okhttp3.Call localVarCall = listIdentityTransfersValidateBeforeCall(identityId, limit, offset, pageNumber, pageSize, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Identity Transfers (asynchronously)
            * All transfers associated to this identity
                * @param identityId ID of identity to fetch (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listIdentityTransfersAsync(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listIdentityTransfersValidateBeforeCall(identityId, limit, offset, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listMerchantTransfers
            * @param merchantId ID of object (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
            * @param readyToSettle ready_to_settle (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listMerchantTransfersCall(String merchantId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, Boolean readyToSettle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/merchants/{merchant_id}/transfers"
                .replaceAll("\\{" + "merchant_id" + "\\}", localVarFinixClient.escapeString(merchantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

                    if (readyToSettle != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("ready_to_settle", readyToSettle));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listMerchantTransfersValidateBeforeCall(String merchantId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, Boolean readyToSettle, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'merchantId' is set
                    if (merchantId == null) {
                    throw new ApiException("Missing the required parameter 'merchantId' when calling listMerchantTransfers(Async)");
                    }
            

                okhttp3.Call localVarCall = listMerchantTransfersCall(merchantId, limit, offset, pageNumber, pageSize, readyToSettle, _callback);
                return localVarCall;

            }

                /**
                * List Merchant Transfers
                * Get list of all the tranfers in the merchant object
                    * @param merchantId ID of object (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @param readyToSettle ready_to_settle (optional)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList listByMerchantId(String merchantId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, Boolean readyToSettle) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listMerchantTransfersWithHttpInfo(merchantId, limit, offset, pageNumber, pageSize, readyToSettle);
                        return localVarResp.getData();
                    }

        /**
            * List Merchant Transfers
            * Get list of all the tranfers in the merchant object
                * @param merchantId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
                * @param readyToSettle ready_to_settle (optional)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listMerchantTransfersWithHttpInfo(String merchantId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, Boolean readyToSettle) throws ApiException {
            okhttp3.Call localVarCall = listMerchantTransfersValidateBeforeCall(merchantId, limit, offset, pageNumber, pageSize, readyToSettle, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Merchant Transfers (asynchronously)
            * Get list of all the tranfers in the merchant object
                * @param merchantId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
                * @param readyToSettle ready_to_settle (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listMerchantTransfersAsync(String merchantId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, Boolean readyToSettle, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listMerchantTransfersValidateBeforeCall(merchantId, limit, offset, pageNumber, pageSize, readyToSettle, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listPaymentInstrumentTransfers
            * @param paymentInstrumentId ID of object (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listPaymentInstrumentTransfersCall(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/payment_instruments/{payment_instrument_id}/transfers"
                .replaceAll("\\{" + "payment_instrument_id" + "\\}", localVarFinixClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listPaymentInstrumentTransfersValidateBeforeCall(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'paymentInstrumentId' is set
                    if (paymentInstrumentId == null) {
                    throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling listPaymentInstrumentTransfers(Async)");
                    }
            

                okhttp3.Call localVarCall = listPaymentInstrumentTransfersCall(paymentInstrumentId, limit, offset, pageNumber, pageSize, _callback);
                return localVarCall;

            }

                /**
                * List Payment Instrument Transfers
                * Get list of all the transfers in the payment instrument object
                    * @param paymentInstrumentId ID of object (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList listByPaymentInstrumentId(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listPaymentInstrumentTransfersWithHttpInfo(paymentInstrumentId, limit, offset, pageNumber, pageSize);
                        return localVarResp.getData();
                    }

        /**
            * List Payment Instrument Transfers
            * Get list of all the transfers in the payment instrument object
                * @param paymentInstrumentId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listPaymentInstrumentTransfersWithHttpInfo(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
            okhttp3.Call localVarCall = listPaymentInstrumentTransfersValidateBeforeCall(paymentInstrumentId, limit, offset, pageNumber, pageSize, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Payment Instrument Transfers (asynchronously)
            * Get list of all the transfers in the payment instrument object
                * @param paymentInstrumentId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listPaymentInstrumentTransfersAsync(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listPaymentInstrumentTransfersValidateBeforeCall(paymentInstrumentId, limit, offset, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listSettlementTransfers
            * @param settlementId ID of object (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listSettlementTransfersCall(String settlementId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/settlements/{settlement_id}/transfers"
                .replaceAll("\\{" + "settlement_id" + "\\}", localVarFinixClient.escapeString(settlementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listSettlementTransfersValidateBeforeCall(String settlementId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'settlementId' is set
                    if (settlementId == null) {
                    throw new ApiException("Missing the required parameter 'settlementId' when calling listSettlementTransfers(Async)");
                    }
            

                okhttp3.Call localVarCall = listSettlementTransfersCall(settlementId, _callback);
                return localVarCall;

            }

                /**
                * List Settlement Transfers
                * Find all transfers for a settlement
                    * @param settlementId ID of object (required)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList listBySettlementId(String settlementId) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listSettlementTransfersWithHttpInfo(settlementId);
                        return localVarResp.getData();
                    }

        /**
            * List Settlement Transfers
            * Find all transfers for a settlement
                * @param settlementId ID of object (required)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listSettlementTransfersWithHttpInfo(String settlementId) throws ApiException {
            okhttp3.Call localVarCall = listSettlementTransfersValidateBeforeCall(settlementId, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Settlement Transfers (asynchronously)
            * Find all transfers for a settlement
                * @param settlementId ID of object (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listSettlementTransfersAsync(String settlementId, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listSettlementTransfersValidateBeforeCall(settlementId, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listTransferReversals
            * @param transferId ID of object (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of reversals </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listTransferReversalsCall(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/transfers/{transfer_id}/reversals"
                .replaceAll("\\{" + "transfer_id" + "\\}", localVarFinixClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listTransferReversalsValidateBeforeCall(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'transferId' is set
                    if (transferId == null) {
                    throw new ApiException("Missing the required parameter 'transferId' when calling listTransferReversals(Async)");
                    }
            

                okhttp3.Call localVarCall = listTransferReversalsCall(transferId, limit, offset, pageNumber, pageSize, _callback);
                return localVarCall;

            }

                /**
                * List Reversals on a Transfer
                * Retrieve a list of reversals for a transfer.
                    * @param transferId ID of object (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of reversals </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList listTransfersReversals(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listTransferReversalsWithHttpInfo(transferId, limit, offset, pageNumber, pageSize);
                        return localVarResp.getData();
                    }

        /**
            * List Reversals on a Transfer
            * Retrieve a list of reversals for a transfer.
                * @param transferId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of reversals </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listTransferReversalsWithHttpInfo(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
            okhttp3.Call localVarCall = listTransferReversalsValidateBeforeCall(transferId, limit, offset, pageNumber, pageSize, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Reversals on a Transfer (asynchronously)
            * Retrieve a list of reversals for a transfer.
                * @param transferId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of reversals </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listTransferReversalsAsync(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listTransferReversalsValidateBeforeCall(transferId, limit, offset, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listTransfers
            * @param sort Specify key to be used for sorting the collection (optional)
            * @param offset The number of items to skip before starting to collect the result set (optional)
            * @param limit The numbers of items to return (optional)
            * @param amount Filter by an amount equal to the given value (optional)
            * @param amountGte Filter by an amount greater than or equal (optional)
            * @param amountGt Filter by an amount greater than (optional)
            * @param amountLte Filter by an amount less than or equal (optional)
            * @param amountLt Filter by an amount less than (optional)
            * @param createdAtGte Filter were created_at is after the given date (optional)
            * @param createdAtLte Filter were created_at before the given date (optional)
            * @param idempotencyId Filter by idempotency_id (optional)
            * @param id Filter by id (optional)
            * @param state Filter by Transaction state. (optional)
            * @param readyToSettleAtGte Filter by ready_to_settle_at (optional)
            * @param readyToSettleAtLte Filter by ready_to_settle_at (optional)
            * @param statementDescriptor Filter by statement_descriptor (optional)
            * @param traceId Filter by trace_id (optional)
            * @param updatedAtGte Filter were updated_at is after the given date (optional)
            * @param updatedAtLte Filter were updated_at is before the given date (optional)
            * @param instrumentBin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
            * @param instrumentAccountLast4 Filter Transactions by the last 4 digits of the bank account. The bank account last 4 are the last 4 digits of the masked number instrument_account_last4&#x3D;9444 BIN  (optional)
            * @param instrumentBrandType Filter by card brand. Available card brand types can be found in the drop-down (optional)
            * @param merchantIdentityId Filter by Identity ID (optional)
            * @param merchantIdentityName Filter Transactions by Identity name. The name is not case-sensitive (optional)
            * @param instrumentName Filter Transactions by payment instrument name (optional)
            * @param instrumentType Filter Transactions by payment instrument type. Available instrument types include: Bank Account or Payment Card (optional)
            * @param merchantId Filter by Merchant ID (optional)
            * @param merchantMid Filter by Merchant Identification Number (MID) (optional)
            * @param instrumentCardLast4 Filter by the payment card last 4 digits (optional)
            * @param merchantProcessorId Filter by Processor ID (optional)
            * @param type Filter by Transfer type. Available type filters include: All, Debits, Refunds, or Credits. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listTransfersCall(String sort, Integer offset, Integer limit, Integer amount, Integer amountGte, Integer amountGt, Integer amountLte, Integer amountLt, String createdAtGte, String createdAtLte, String idempotencyId, String id, String state, String readyToSettleAtGte, String readyToSettleAtLte, Integer statementDescriptor, String traceId, String updatedAtGte, String updatedAtLte, String instrumentBin, String instrumentAccountLast4, String instrumentBrandType, String merchantIdentityId, String merchantIdentityName, String instrumentName, String instrumentType, String merchantId, String merchantMid, String instrumentCardLast4, String merchantProcessorId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (sort != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("sort", sort));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (amount != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount", amount));
                    }

                    if (amountGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.gte", amountGte));
                    }

                    if (amountGt != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.gt", amountGt));
                    }

                    if (amountLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.lte", amountLte));
                    }

                    if (amountLt != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("amount.lt", amountLt));
                    }

                    if (createdAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.gte", createdAtGte));
                    }

                    if (createdAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.lte", createdAtLte));
                    }

                    if (idempotencyId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("idempotency_id", idempotencyId));
                    }

                    if (id != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("id", id));
                    }

                    if (state != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("state", state));
                    }

                    if (readyToSettleAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("ready_to_settle_at.gte", readyToSettleAtGte));
                    }

                    if (readyToSettleAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("ready_to_settle_at.lte", readyToSettleAtLte));
                    }

                    if (statementDescriptor != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("statement_descriptor", statementDescriptor));
                    }

                    if (traceId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("trace_id", traceId));
                    }

                    if (updatedAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.gte", updatedAtGte));
                    }

                    if (updatedAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.lte", updatedAtLte));
                    }

                    if (instrumentBin != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("instrument_bin", instrumentBin));
                    }

                    if (instrumentAccountLast4 != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("instrument_account_last4", instrumentAccountLast4));
                    }

                    if (instrumentBrandType != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("instrument_brand_type", instrumentBrandType));
                    }

                    if (merchantIdentityId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("merchant_identity_id", merchantIdentityId));
                    }

                    if (merchantIdentityName != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("merchant_identity_name", merchantIdentityName));
                    }

                    if (instrumentName != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("instrument_name", instrumentName));
                    }

                    if (instrumentType != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("instrument_type", instrumentType));
                    }

                    if (merchantId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("merchant_id", merchantId));
                    }

                    if (merchantMid != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("merchant_mid", merchantMid));
                    }

                    if (instrumentCardLast4 != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("instrument_card_last4", instrumentCardLast4));
                    }

                    if (merchantProcessorId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("merchant_processor_id", merchantProcessorId));
                    }

                    if (type != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("type", type));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listTransfersValidateBeforeCall(String sort, Integer offset, Integer limit, Integer amount, Integer amountGte, Integer amountGt, Integer amountLte, Integer amountLt, String createdAtGte, String createdAtLte, String idempotencyId, String id, String state, String readyToSettleAtGte, String readyToSettleAtLte, Integer statementDescriptor, String traceId, String updatedAtGte, String updatedAtLte, String instrumentBin, String instrumentAccountLast4, String instrumentBrandType, String merchantIdentityId, String merchantIdentityName, String instrumentName, String instrumentType, String merchantId, String merchantMid, String instrumentCardLast4, String merchantProcessorId, String type, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = listTransfersCall(sort, offset, limit, amount, amountGte, amountGt, amountLte, amountLt, createdAtGte, createdAtLte, idempotencyId, id, state, readyToSettleAtGte, readyToSettleAtLte, statementDescriptor, traceId, updatedAtGte, updatedAtLte, instrumentBin, instrumentAccountLast4, instrumentBrandType, merchantIdentityId, merchantIdentityName, instrumentName, instrumentType, merchantId, merchantMid, instrumentCardLast4, merchantProcessorId, type, _callback);
                return localVarCall;

            }

                /**
                * List Transfers
                * Retrieve a list of transfers.
                    * @param sort Specify key to be used for sorting the collection (optional)
                    * @param offset The number of items to skip before starting to collect the result set (optional)
                    * @param limit The numbers of items to return (optional)
                    * @param amount Filter by an amount equal to the given value (optional)
                    * @param amountGte Filter by an amount greater than or equal (optional)
                    * @param amountGt Filter by an amount greater than (optional)
                    * @param amountLte Filter by an amount less than or equal (optional)
                    * @param amountLt Filter by an amount less than (optional)
                    * @param createdAtGte Filter were created_at is after the given date (optional)
                    * @param createdAtLte Filter were created_at before the given date (optional)
                    * @param idempotencyId Filter by idempotency_id (optional)
                    * @param id Filter by id (optional)
                    * @param state Filter by Transaction state. (optional)
                    * @param readyToSettleAtGte Filter by ready_to_settle_at (optional)
                    * @param readyToSettleAtLte Filter by ready_to_settle_at (optional)
                    * @param statementDescriptor Filter by statement_descriptor (optional)
                    * @param traceId Filter by trace_id (optional)
                    * @param updatedAtGte Filter were updated_at is after the given date (optional)
                    * @param updatedAtLte Filter were updated_at is before the given date (optional)
                    * @param instrumentBin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
                    * @param instrumentAccountLast4 Filter Transactions by the last 4 digits of the bank account. The bank account last 4 are the last 4 digits of the masked number instrument_account_last4&#x3D;9444 BIN  (optional)
                    * @param instrumentBrandType Filter by card brand. Available card brand types can be found in the drop-down (optional)
                    * @param merchantIdentityId Filter by Identity ID (optional)
                    * @param merchantIdentityName Filter Transactions by Identity name. The name is not case-sensitive (optional)
                    * @param instrumentName Filter Transactions by payment instrument name (optional)
                    * @param instrumentType Filter Transactions by payment instrument type. Available instrument types include: Bank Account or Payment Card (optional)
                    * @param merchantId Filter by Merchant ID (optional)
                    * @param merchantMid Filter by Merchant Identification Number (MID) (optional)
                    * @param instrumentCardLast4 Filter by the payment card last 4 digits (optional)
                    * @param merchantProcessorId Filter by Processor ID (optional)
                    * @param type Filter by Transfer type. Available type filters include: All, Debits, Refunds, or Credits. (optional)
                    * @return TransfersList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public TransfersList list(String sort, Integer offset, Integer limit, Integer amount, Integer amountGte, Integer amountGt, Integer amountLte, Integer amountLt, String createdAtGte, String createdAtLte, String idempotencyId, String id, String state, String readyToSettleAtGte, String readyToSettleAtLte, Integer statementDescriptor, String traceId, String updatedAtGte, String updatedAtLte, String instrumentBin, String instrumentAccountLast4, String instrumentBrandType, String merchantIdentityId, String merchantIdentityName, String instrumentName, String instrumentType, String merchantId, String merchantMid, String instrumentCardLast4, String merchantProcessorId, String type) throws ApiException {
                ApiResponse<TransfersList> localVarResp = listTransfersWithHttpInfo(sort, offset, limit, amount, amountGte, amountGt, amountLte, amountLt, createdAtGte, createdAtLte, idempotencyId, id, state, readyToSettleAtGte, readyToSettleAtLte, statementDescriptor, traceId, updatedAtGte, updatedAtLte, instrumentBin, instrumentAccountLast4, instrumentBrandType, merchantIdentityId, merchantIdentityName, instrumentName, instrumentType, merchantId, merchantMid, instrumentCardLast4, merchantProcessorId, type);
                        return localVarResp.getData();
                    }

        /**
            * List Transfers
            * Retrieve a list of transfers.
                * @param sort Specify key to be used for sorting the collection (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param limit The numbers of items to return (optional)
                * @param amount Filter by an amount equal to the given value (optional)
                * @param amountGte Filter by an amount greater than or equal (optional)
                * @param amountGt Filter by an amount greater than (optional)
                * @param amountLte Filter by an amount less than or equal (optional)
                * @param amountLt Filter by an amount less than (optional)
                * @param createdAtGte Filter were created_at is after the given date (optional)
                * @param createdAtLte Filter were created_at before the given date (optional)
                * @param idempotencyId Filter by idempotency_id (optional)
                * @param id Filter by id (optional)
                * @param state Filter by Transaction state. (optional)
                * @param readyToSettleAtGte Filter by ready_to_settle_at (optional)
                * @param readyToSettleAtLte Filter by ready_to_settle_at (optional)
                * @param statementDescriptor Filter by statement_descriptor (optional)
                * @param traceId Filter by trace_id (optional)
                * @param updatedAtGte Filter were updated_at is after the given date (optional)
                * @param updatedAtLte Filter were updated_at is before the given date (optional)
                * @param instrumentBin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
                * @param instrumentAccountLast4 Filter Transactions by the last 4 digits of the bank account. The bank account last 4 are the last 4 digits of the masked number instrument_account_last4&#x3D;9444 BIN  (optional)
                * @param instrumentBrandType Filter by card brand. Available card brand types can be found in the drop-down (optional)
                * @param merchantIdentityId Filter by Identity ID (optional)
                * @param merchantIdentityName Filter Transactions by Identity name. The name is not case-sensitive (optional)
                * @param instrumentName Filter Transactions by payment instrument name (optional)
                * @param instrumentType Filter Transactions by payment instrument type. Available instrument types include: Bank Account or Payment Card (optional)
                * @param merchantId Filter by Merchant ID (optional)
                * @param merchantMid Filter by Merchant Identification Number (MID) (optional)
                * @param instrumentCardLast4 Filter by the payment card last 4 digits (optional)
                * @param merchantProcessorId Filter by Processor ID (optional)
                * @param type Filter by Transfer type. Available type filters include: All, Debits, Refunds, or Credits. (optional)
            * @return ApiResponse&lt;TransfersList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<TransfersList> listTransfersWithHttpInfo(String sort, Integer offset, Integer limit, Integer amount, Integer amountGte, Integer amountGt, Integer amountLte, Integer amountLt, String createdAtGte, String createdAtLte, String idempotencyId, String id, String state, String readyToSettleAtGte, String readyToSettleAtLte, Integer statementDescriptor, String traceId, String updatedAtGte, String updatedAtLte, String instrumentBin, String instrumentAccountLast4, String instrumentBrandType, String merchantIdentityId, String merchantIdentityName, String instrumentName, String instrumentType, String merchantId, String merchantMid, String instrumentCardLast4, String merchantProcessorId, String type) throws ApiException {
            okhttp3.Call localVarCall = listTransfersValidateBeforeCall(sort, offset, limit, amount, amountGte, amountGt, amountLte, amountLt, createdAtGte, createdAtLte, idempotencyId, id, state, readyToSettleAtGte, readyToSettleAtLte, statementDescriptor, traceId, updatedAtGte, updatedAtLte, instrumentBin, instrumentAccountLast4, instrumentBrandType, merchantIdentityId, merchantIdentityName, instrumentName, instrumentType, merchantId, merchantMid, instrumentCardLast4, merchantProcessorId, type, null);
                    Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Transfers (asynchronously)
            * Retrieve a list of transfers.
                * @param sort Specify key to be used for sorting the collection (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param limit The numbers of items to return (optional)
                * @param amount Filter by an amount equal to the given value (optional)
                * @param amountGte Filter by an amount greater than or equal (optional)
                * @param amountGt Filter by an amount greater than (optional)
                * @param amountLte Filter by an amount less than or equal (optional)
                * @param amountLt Filter by an amount less than (optional)
                * @param createdAtGte Filter were created_at is after the given date (optional)
                * @param createdAtLte Filter were created_at before the given date (optional)
                * @param idempotencyId Filter by idempotency_id (optional)
                * @param id Filter by id (optional)
                * @param state Filter by Transaction state. (optional)
                * @param readyToSettleAtGte Filter by ready_to_settle_at (optional)
                * @param readyToSettleAtLte Filter by ready_to_settle_at (optional)
                * @param statementDescriptor Filter by statement_descriptor (optional)
                * @param traceId Filter by trace_id (optional)
                * @param updatedAtGte Filter were updated_at is after the given date (optional)
                * @param updatedAtLte Filter were updated_at is before the given date (optional)
                * @param instrumentBin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
                * @param instrumentAccountLast4 Filter Transactions by the last 4 digits of the bank account. The bank account last 4 are the last 4 digits of the masked number instrument_account_last4&#x3D;9444 BIN  (optional)
                * @param instrumentBrandType Filter by card brand. Available card brand types can be found in the drop-down (optional)
                * @param merchantIdentityId Filter by Identity ID (optional)
                * @param merchantIdentityName Filter Transactions by Identity name. The name is not case-sensitive (optional)
                * @param instrumentName Filter Transactions by payment instrument name (optional)
                * @param instrumentType Filter Transactions by payment instrument type. Available instrument types include: Bank Account or Payment Card (optional)
                * @param merchantId Filter by Merchant ID (optional)
                * @param merchantMid Filter by Merchant Identification Number (MID) (optional)
                * @param instrumentCardLast4 Filter by the payment card last 4 digits (optional)
                * @param merchantProcessorId Filter by Processor ID (optional)
                * @param type Filter by Transfer type. Available type filters include: All, Debits, Refunds, or Credits. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of transfer objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listTransfersAsync(String sort, Integer offset, Integer limit, Integer amount, Integer amountGte, Integer amountGt, Integer amountLte, Integer amountLt, String createdAtGte, String createdAtLte, String idempotencyId, String id, String state, String readyToSettleAtGte, String readyToSettleAtLte, Integer statementDescriptor, String traceId, String updatedAtGte, String updatedAtLte, String instrumentBin, String instrumentAccountLast4, String instrumentBrandType, String merchantIdentityId, String merchantIdentityName, String instrumentName, String instrumentType, String merchantId, String merchantMid, String instrumentCardLast4, String merchantProcessorId, String type, final ApiCallback<TransfersList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listTransfersValidateBeforeCall(sort, offset, limit, amount, amountGte, amountGt, amountLte, amountLt, createdAtGte, createdAtLte, idempotencyId, id, state, readyToSettleAtGte, readyToSettleAtLte, statementDescriptor, traceId, updatedAtGte, updatedAtLte, instrumentBin, instrumentAccountLast4, instrumentBrandType, merchantIdentityId, merchantIdentityName, instrumentName, instrumentType, merchantId, merchantMid, instrumentCardLast4, merchantProcessorId, type, _callback);
        Type localVarReturnType = new TypeToken<TransfersList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for update
            * @param transferId ID of object (required)
            * @param updateTransferRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call updateCall(String transferId, UpdateTransferRequest updateTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = updateTransferRequest;

        // create path and map variables
            String localVarPath = "/transfers/{transfer_id}"
                .replaceAll("\\{" + "transfer_id" + "\\}", localVarFinixClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call updateValidateBeforeCall(String transferId, UpdateTransferRequest updateTransferRequest, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'transferId' is set
                    if (transferId == null) {
                    throw new ApiException("Missing the required parameter 'transferId' when calling update(Async)");
                    }
            

                okhttp3.Call localVarCall = updateCall(transferId, updateTransferRequest, _callback);
                return localVarCall;

            }

                /**
                * Update a Transfer
                * Update a transfer.
                    * @param transferId ID of object (required)
                    * @param updateTransferRequest  (optional)
                    * @return Transfer
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public Transfer update(String transferId, UpdateTransferRequest updateTransferRequest) throws ApiException {
                ApiResponse<Transfer> localVarResp = updateWithHttpInfo(transferId, updateTransferRequest);
                        return localVarResp.getData();
                    }

        /**
            * Update a Transfer
            * Update a transfer.
                * @param transferId ID of object (required)
                * @param updateTransferRequest  (optional)
            * @return ApiResponse&lt;Transfer&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<Transfer> updateWithHttpInfo(String transferId, UpdateTransferRequest updateTransferRequest) throws ApiException {
            okhttp3.Call localVarCall = updateValidateBeforeCall(transferId, updateTransferRequest, null);
                    Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Update a Transfer (asynchronously)
            * Update a transfer.
                * @param transferId ID of object (required)
                * @param updateTransferRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single transfer object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call updateAsync(String transferId, UpdateTransferRequest updateTransferRequest, final ApiCallback<Transfer> _callback) throws ApiException {

            okhttp3.Call localVarCall = updateValidateBeforeCall(transferId, updateTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        }
