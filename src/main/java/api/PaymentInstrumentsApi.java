/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreatePaymentInstrumentRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.ErrorGeneric;
import model.PaymentInstrument;
import model.PaymentInstrumentUpdatesList;
import model.PaymentInstrumentsList;

import java.lang.reflect.Type;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
import javax.ws.rs.core.GenericType;

    public class PaymentInstrumentsApi {
    private FinixClient localVarFinixClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentInstrumentsApi() {
    this(Configuration.getDefaultFinixClient());
    }

    public PaymentInstrumentsApi(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public FinixClient getFinixClient() {
    return localVarFinixClient;
    }

    public void setFinixClient(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public int getHostIndex() {
    return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
    return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
    }

        /**
        * Build call for createPaymentInstrument
            * @param createPaymentInstrumentRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createPaymentInstrumentCall(CreatePaymentInstrumentRequest createPaymentInstrumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createPaymentInstrumentRequest;

        // create path and map variables
            String localVarPath = "/payment_instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createPaymentInstrumentValidateBeforeCall(CreatePaymentInstrumentRequest createPaymentInstrumentRequest, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = createPaymentInstrumentCall(createPaymentInstrumentRequest, _callback);
                return localVarCall;

            }

                /**
                * Create a Payment Instrument
                * Create a payment instrument
                    * @param createPaymentInstrumentRequest  (optional)
                    * @return PaymentInstrument
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 201 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrument create(CreatePaymentInstrumentRequest createPaymentInstrumentRequest) throws ApiException {
                ApiResponse<PaymentInstrument> localVarResp = createPaymentInstrumentWithHttpInfo(createPaymentInstrumentRequest);
                        return localVarResp.getData();
                    }

        /**
            * Create a Payment Instrument
            * Create a payment instrument
                * @param createPaymentInstrumentRequest  (optional)
            * @return ApiResponse&lt;PaymentInstrument&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrument> createPaymentInstrumentWithHttpInfo(CreatePaymentInstrumentRequest createPaymentInstrumentRequest) throws ApiException {
            okhttp3.Call localVarCall = createPaymentInstrumentValidateBeforeCall(createPaymentInstrumentRequest, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrument>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Create a Payment Instrument (asynchronously)
            * Create a payment instrument
                * @param createPaymentInstrumentRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 400 </td><td> Error </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createPaymentInstrumentAsync(CreatePaymentInstrumentRequest createPaymentInstrumentRequest, final ApiCallback<PaymentInstrument> _callback) throws ApiException {

            okhttp3.Call localVarCall = createPaymentInstrumentValidateBeforeCall(createPaymentInstrumentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrument>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for getPaymentInstrument
            * @param paymentInstrumentId ID of object (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getPaymentInstrumentCall(String paymentInstrumentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/payment_instruments/{payment_instrument_id}"
                .replaceAll("\\{" + "payment_instrument_id" + "\\}", localVarFinixClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call getPaymentInstrumentValidateBeforeCall(String paymentInstrumentId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'paymentInstrumentId' is set
                    if (paymentInstrumentId == null) {
                    throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling getPaymentInstrument(Async)");
                    }
            

                okhttp3.Call localVarCall = getPaymentInstrumentCall(paymentInstrumentId, _callback);
                return localVarCall;

            }

                /**
                * Get a Payment Instrument
                * Retrieve the details of a payment instrument.
                    * @param paymentInstrumentId ID of object (required)
                    * @return PaymentInstrument
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrument get(String paymentInstrumentId) throws ApiException {
                ApiResponse<PaymentInstrument> localVarResp = getPaymentInstrumentWithHttpInfo(paymentInstrumentId);
                        return localVarResp.getData();
                    }

        /**
            * Get a Payment Instrument
            * Retrieve the details of a payment instrument.
                * @param paymentInstrumentId ID of object (required)
            * @return ApiResponse&lt;PaymentInstrument&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrument> getPaymentInstrumentWithHttpInfo(String paymentInstrumentId) throws ApiException {
            okhttp3.Call localVarCall = getPaymentInstrumentValidateBeforeCall(paymentInstrumentId, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrument>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Get a Payment Instrument (asynchronously)
            * Retrieve the details of a payment instrument.
                * @param paymentInstrumentId ID of object (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call getPaymentInstrumentAsync(String paymentInstrumentId, final ApiCallback<PaymentInstrument> _callback) throws ApiException {

            okhttp3.Call localVarCall = getPaymentInstrumentValidateBeforeCall(paymentInstrumentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrument>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listApplicationPaymentInstruments
            * @param applicationId ID of application to use (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listApplicationPaymentInstrumentsCall(String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/applications/{application_id}/payment_instruments"
                .replaceAll("\\{" + "application_id" + "\\}", localVarFinixClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listApplicationPaymentInstrumentsValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'applicationId' is set
                    if (applicationId == null) {
                    throw new ApiException("Missing the required parameter 'applicationId' when calling listApplicationPaymentInstruments(Async)");
                    }
            

                okhttp3.Call localVarCall = listApplicationPaymentInstrumentsCall(applicationId, _callback);
                return localVarCall;

            }

                /**
                * Payment Instruments
                * Get all paymentInstruments of an application.
                    * @param applicationId ID of application to use (required)
                    * @return PaymentInstrumentsList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrumentsList listByApplicationId(String applicationId) throws ApiException {
                ApiResponse<PaymentInstrumentsList> localVarResp = listApplicationPaymentInstrumentsWithHttpInfo(applicationId);
                        return localVarResp.getData();
                    }

        /**
            * Payment Instruments
            * Get all paymentInstruments of an application.
                * @param applicationId ID of application to use (required)
            * @return ApiResponse&lt;PaymentInstrumentsList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrumentsList> listApplicationPaymentInstrumentsWithHttpInfo(String applicationId) throws ApiException {
            okhttp3.Call localVarCall = listApplicationPaymentInstrumentsValidateBeforeCall(applicationId, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Payment Instruments (asynchronously)
            * Get all paymentInstruments of an application.
                * @param applicationId ID of application to use (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listApplicationPaymentInstrumentsAsync(String applicationId, final ApiCallback<PaymentInstrumentsList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listApplicationPaymentInstrumentsValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listIdentityPaymentInstruments
            * @param identityId ID of identity to fetch (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listIdentityPaymentInstrumentsCall(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/identities/{identity_id}/payment_instruments"
                .replaceAll("\\{" + "identity_id" + "\\}", localVarFinixClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listIdentityPaymentInstrumentsValidateBeforeCall(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'identityId' is set
                    if (identityId == null) {
                    throw new ApiException("Missing the required parameter 'identityId' when calling listIdentityPaymentInstruments(Async)");
                    }
            

                okhttp3.Call localVarCall = listIdentityPaymentInstrumentsCall(identityId, limit, offset, pageNumber, pageSize, _callback);
                return localVarCall;

            }

                /**
                * List Identity Payment Instruments
                * Get all payment instruments associated to this identity
                    * @param identityId ID of identity to fetch (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @return PaymentInstrumentsList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrumentsList listByIdentityId(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
                ApiResponse<PaymentInstrumentsList> localVarResp = listIdentityPaymentInstrumentsWithHttpInfo(identityId, limit, offset, pageNumber, pageSize);
                        return localVarResp.getData();
                    }

        /**
            * List Identity Payment Instruments
            * Get all payment instruments associated to this identity
                * @param identityId ID of identity to fetch (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @return ApiResponse&lt;PaymentInstrumentsList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrumentsList> listIdentityPaymentInstrumentsWithHttpInfo(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
            okhttp3.Call localVarCall = listIdentityPaymentInstrumentsValidateBeforeCall(identityId, limit, offset, pageNumber, pageSize, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Identity Payment Instruments (asynchronously)
            * Get all payment instruments associated to this identity
                * @param identityId ID of identity to fetch (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listIdentityPaymentInstrumentsAsync(String identityId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback<PaymentInstrumentsList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listIdentityPaymentInstrumentsValidateBeforeCall(identityId, limit, offset, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listPaymentInstrumentUpdates
            * @param paymentInstrumentId ID of object (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of payment instrument updates </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listPaymentInstrumentUpdatesCall(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/payment_instruments/{payment_instrument_id}/updates"
                .replaceAll("\\{" + "payment_instrument_id" + "\\}", localVarFinixClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listPaymentInstrumentUpdatesValidateBeforeCall(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'paymentInstrumentId' is set
                    if (paymentInstrumentId == null) {
                    throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling listPaymentInstrumentUpdates(Async)");
                    }
            

                okhttp3.Call localVarCall = listPaymentInstrumentUpdatesCall(paymentInstrumentId, limit, offset, pageNumber, pageSize, _callback);
                return localVarCall;

            }

                /**
                * List Payment Instrument Updates
                * List the updates on a &#x60;Payment Instrument&#x60;.  When using [account updater](/guides/account_updater), payment instrument details that are updated are represented by an &#x60;update&#x60;.
                    * @param paymentInstrumentId ID of object (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @return PaymentInstrumentUpdatesList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of payment instrument updates </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrumentUpdatesList listUpdatesByPaymentInstrumentId(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
                ApiResponse<PaymentInstrumentUpdatesList> localVarResp = listPaymentInstrumentUpdatesWithHttpInfo(paymentInstrumentId, limit, offset, pageNumber, pageSize);
                        return localVarResp.getData();
                    }

        /**
            * List Payment Instrument Updates
            * List the updates on a &#x60;Payment Instrument&#x60;.  When using [account updater](/guides/account_updater), payment instrument details that are updated are represented by an &#x60;update&#x60;.
                * @param paymentInstrumentId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @return ApiResponse&lt;PaymentInstrumentUpdatesList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument updates </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrumentUpdatesList> listPaymentInstrumentUpdatesWithHttpInfo(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
            okhttp3.Call localVarCall = listPaymentInstrumentUpdatesValidateBeforeCall(paymentInstrumentId, limit, offset, pageNumber, pageSize, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrumentUpdatesList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Payment Instrument Updates (asynchronously)
            * List the updates on a &#x60;Payment Instrument&#x60;.  When using [account updater](/guides/account_updater), payment instrument details that are updated are represented by an &#x60;update&#x60;.
                * @param paymentInstrumentId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument updates </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listPaymentInstrumentUpdatesAsync(String paymentInstrumentId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback<PaymentInstrumentUpdatesList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listPaymentInstrumentUpdatesValidateBeforeCall(paymentInstrumentId, limit, offset, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrumentUpdatesList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listPaymentInstruments
            * @param limit The numbers of items to return (optional)
            * @param offset The number of items to skip before starting to collect the result set (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
            * @param accountLast4 Filter by the last 4 digits of the account if available. (optional)
            * @param accountRoutingNumber Filter by the account routing number if available. (optional)
            * @param application Filter by application id (optional)
            * @param bin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
            * @param createdAtGte Filter were created_at is after the given date (optional)
            * @param createdAtLte Filter were created_at before the given date (optional)
            * @param expirationMonth Filter by the expiration month associated with the &#x60;Payment Instrument&#x60; if applicable. This filter only applies to payment cards. (optional)
            * @param expirationYear Filter by the 4 digit expiration year associated with the Payment Instrument if applicable. This filter only applies to payment cards (optional)
            * @param lastFour Filter by the last 4 digits of the Payment Instrument card. This filter only applies to payment cards. (optional)
            * @param name Filter by the name. (optional)
            * @param ownerIdentityId Filter by the owner id of the associated identity. (optional)
            * @param type Filter by the payment instrument type. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listPaymentInstrumentsCall(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String accountLast4, String accountRoutingNumber, String application, String bin, String createdAtGte, String createdAtLte, String expirationMonth, String expirationYear, String lastFour, String name, String ownerIdentityId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/payment_instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

                    if (accountLast4 != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("account_last4", accountLast4));
                    }

                    if (accountRoutingNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("account_routing_number", accountRoutingNumber));
                    }

                    if (application != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("application", application));
                    }

                    if (bin != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("bin", bin));
                    }

                    if (createdAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.gte", createdAtGte));
                    }

                    if (createdAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.lte", createdAtLte));
                    }

                    if (expirationMonth != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("expiration_month", expirationMonth));
                    }

                    if (expirationYear != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("expiration_year", expirationYear));
                    }

                    if (lastFour != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("last_four", lastFour));
                    }

                    if (name != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("name", name));
                    }

                    if (ownerIdentityId != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("owner_identity_id", ownerIdentityId));
                    }

                    if (type != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("type", type));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listPaymentInstrumentsValidateBeforeCall(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String accountLast4, String accountRoutingNumber, String application, String bin, String createdAtGte, String createdAtLte, String expirationMonth, String expirationYear, String lastFour, String name, String ownerIdentityId, String type, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = listPaymentInstrumentsCall(limit, offset, pageNumber, pageSize, accountLast4, accountRoutingNumber, application, bin, createdAtGte, createdAtLte, expirationMonth, expirationYear, lastFour, name, ownerIdentityId, type, _callback);
                return localVarCall;

            }

                /**
                * List Payment Instruments
                * Retrieve a list of payment instruments.
                    * @param limit The numbers of items to return (optional)
                    * @param offset The number of items to skip before starting to collect the result set (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @param accountLast4 Filter by the last 4 digits of the account if available. (optional)
                    * @param accountRoutingNumber Filter by the account routing number if available. (optional)
                    * @param application Filter by application id (optional)
                    * @param bin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
                    * @param createdAtGte Filter were created_at is after the given date (optional)
                    * @param createdAtLte Filter were created_at before the given date (optional)
                    * @param expirationMonth Filter by the expiration month associated with the &#x60;Payment Instrument&#x60; if applicable. This filter only applies to payment cards. (optional)
                    * @param expirationYear Filter by the 4 digit expiration year associated with the Payment Instrument if applicable. This filter only applies to payment cards (optional)
                    * @param lastFour Filter by the last 4 digits of the Payment Instrument card. This filter only applies to payment cards. (optional)
                    * @param name Filter by the name. (optional)
                    * @param ownerIdentityId Filter by the owner id of the associated identity. (optional)
                    * @param type Filter by the payment instrument type. (optional)
                    * @return PaymentInstrumentsList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrumentsList list(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String accountLast4, String accountRoutingNumber, String application, String bin, String createdAtGte, String createdAtLte, String expirationMonth, String expirationYear, String lastFour, String name, String ownerIdentityId, String type) throws ApiException {
                ApiResponse<PaymentInstrumentsList> localVarResp = listPaymentInstrumentsWithHttpInfo(limit, offset, pageNumber, pageSize, accountLast4, accountRoutingNumber, application, bin, createdAtGte, createdAtLte, expirationMonth, expirationYear, lastFour, name, ownerIdentityId, type);
                        return localVarResp.getData();
                    }

        /**
            * List Payment Instruments
            * Retrieve a list of payment instruments.
                * @param limit The numbers of items to return (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
                * @param accountLast4 Filter by the last 4 digits of the account if available. (optional)
                * @param accountRoutingNumber Filter by the account routing number if available. (optional)
                * @param application Filter by application id (optional)
                * @param bin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
                * @param createdAtGte Filter were created_at is after the given date (optional)
                * @param createdAtLte Filter were created_at before the given date (optional)
                * @param expirationMonth Filter by the expiration month associated with the &#x60;Payment Instrument&#x60; if applicable. This filter only applies to payment cards. (optional)
                * @param expirationYear Filter by the 4 digit expiration year associated with the Payment Instrument if applicable. This filter only applies to payment cards (optional)
                * @param lastFour Filter by the last 4 digits of the Payment Instrument card. This filter only applies to payment cards. (optional)
                * @param name Filter by the name. (optional)
                * @param ownerIdentityId Filter by the owner id of the associated identity. (optional)
                * @param type Filter by the payment instrument type. (optional)
            * @return ApiResponse&lt;PaymentInstrumentsList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrumentsList> listPaymentInstrumentsWithHttpInfo(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String accountLast4, String accountRoutingNumber, String application, String bin, String createdAtGte, String createdAtLte, String expirationMonth, String expirationYear, String lastFour, String name, String ownerIdentityId, String type) throws ApiException {
            okhttp3.Call localVarCall = listPaymentInstrumentsValidateBeforeCall(limit, offset, pageNumber, pageSize, accountLast4, accountRoutingNumber, application, bin, createdAtGte, createdAtLte, expirationMonth, expirationYear, lastFour, name, ownerIdentityId, type, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Payment Instruments (asynchronously)
            * Retrieve a list of payment instruments.
                * @param limit The numbers of items to return (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
                * @param accountLast4 Filter by the last 4 digits of the account if available. (optional)
                * @param accountRoutingNumber Filter by the account routing number if available. (optional)
                * @param application Filter by application id (optional)
                * @param bin Filter by Bank Identification Number (BIN). The BIN is the first 6 digits of the masked number (optional)
                * @param createdAtGte Filter were created_at is after the given date (optional)
                * @param createdAtLte Filter were created_at before the given date (optional)
                * @param expirationMonth Filter by the expiration month associated with the &#x60;Payment Instrument&#x60; if applicable. This filter only applies to payment cards. (optional)
                * @param expirationYear Filter by the 4 digit expiration year associated with the Payment Instrument if applicable. This filter only applies to payment cards (optional)
                * @param lastFour Filter by the last 4 digits of the Payment Instrument card. This filter only applies to payment cards. (optional)
                * @param name Filter by the name. (optional)
                * @param ownerIdentityId Filter by the owner id of the associated identity. (optional)
                * @param type Filter by the payment instrument type. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listPaymentInstrumentsAsync(Integer limit, Integer offset, Integer pageNumber, Integer pageSize, String accountLast4, String accountRoutingNumber, String application, String bin, String createdAtGte, String createdAtLte, String expirationMonth, String expirationYear, String lastFour, String name, String ownerIdentityId, String type, final ApiCallback<PaymentInstrumentsList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listPaymentInstrumentsValidateBeforeCall(limit, offset, pageNumber, pageSize, accountLast4, accountRoutingNumber, application, bin, createdAtGte, createdAtLte, expirationMonth, expirationYear, lastFour, name, ownerIdentityId, type, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listTransferPaymentInstruments
            * @param transferId ID of object (required)
            * @param limit The number of entries to return. (optional)
            * @param offset The offset of the page. (optional)
            * @param pageNumber The page number to list. (optional)
            * @param pageSize The size of the page. (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listTransferPaymentInstrumentsCall(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/transfers/{transfer_id}/payment_instruments"
                .replaceAll("\\{" + "transfer_id" + "\\}", localVarFinixClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (pageNumber != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageNumber", pageNumber));
                    }

                    if (pageSize != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("pageSize", pageSize));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listTransferPaymentInstrumentsValidateBeforeCall(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'transferId' is set
                    if (transferId == null) {
                    throw new ApiException("Missing the required parameter 'transferId' when calling listTransferPaymentInstruments(Async)");
                    }
            

                okhttp3.Call localVarCall = listTransferPaymentInstrumentsCall(transferId, limit, offset, pageNumber, pageSize, _callback);
                return localVarCall;

            }

                /**
                * List Transfer Payment Instruments
                * Get list of all the payment instruments in the transfers object
                    * @param transferId ID of object (required)
                    * @param limit The number of entries to return. (optional)
                    * @param offset The offset of the page. (optional)
                    * @param pageNumber The page number to list. (optional)
                    * @param pageSize The size of the page. (optional)
                    * @return PaymentInstrumentsList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrumentsList listByTransferId(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
                ApiResponse<PaymentInstrumentsList> localVarResp = listTransferPaymentInstrumentsWithHttpInfo(transferId, limit, offset, pageNumber, pageSize);
                        return localVarResp.getData();
                    }

        /**
            * List Transfer Payment Instruments
            * Get list of all the payment instruments in the transfers object
                * @param transferId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @return ApiResponse&lt;PaymentInstrumentsList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrumentsList> listTransferPaymentInstrumentsWithHttpInfo(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize) throws ApiException {
            okhttp3.Call localVarCall = listTransferPaymentInstrumentsValidateBeforeCall(transferId, limit, offset, pageNumber, pageSize, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Transfer Payment Instruments (asynchronously)
            * Get list of all the payment instruments in the transfers object
                * @param transferId ID of object (required)
                * @param limit The number of entries to return. (optional)
                * @param offset The offset of the page. (optional)
                * @param pageNumber The page number to list. (optional)
                * @param pageSize The size of the page. (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listTransferPaymentInstrumentsAsync(String transferId, Integer limit, Long offset, Integer pageNumber, Integer pageSize, final ApiCallback<PaymentInstrumentsList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listTransferPaymentInstrumentsValidateBeforeCall(transferId, limit, offset, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrumentsList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for putPaymentInstrument
            * @param paymentInstrumentId ID of object (required)
            * @param body  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call putPaymentInstrumentCall(String paymentInstrumentId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
            String localVarPath = "/payment_instruments/{payment_instrument_id}"
                .replaceAll("\\{" + "payment_instrument_id" + "\\}", localVarFinixClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call putPaymentInstrumentValidateBeforeCall(String paymentInstrumentId, Object body, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'paymentInstrumentId' is set
                    if (paymentInstrumentId == null) {
                    throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling putPaymentInstrument(Async)");
                    }
            

                okhttp3.Call localVarCall = putPaymentInstrumentCall(paymentInstrumentId, body, _callback);
                return localVarCall;

            }

                /**
                * Update a Payment Instrument
                * Update a payment instrument.
                    * @param paymentInstrumentId ID of object (required)
                    * @param body  (optional)
                    * @return PaymentInstrument
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public PaymentInstrument update(String paymentInstrumentId, Object body) throws ApiException {
                ApiResponse<PaymentInstrument> localVarResp = putPaymentInstrumentWithHttpInfo(paymentInstrumentId, body);
                        return localVarResp.getData();
                    }

        /**
            * Update a Payment Instrument
            * Update a payment instrument.
                * @param paymentInstrumentId ID of object (required)
                * @param body  (optional)
            * @return ApiResponse&lt;PaymentInstrument&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<PaymentInstrument> putPaymentInstrumentWithHttpInfo(String paymentInstrumentId, Object body) throws ApiException {
            okhttp3.Call localVarCall = putPaymentInstrumentValidateBeforeCall(paymentInstrumentId, body, null);
                    Type localVarReturnType = new TypeToken<PaymentInstrument>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Update a Payment Instrument (asynchronously)
            * Update a payment instrument.
                * @param paymentInstrumentId ID of object (required)
                * @param body  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Payment instrument </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call putPaymentInstrumentAsync(String paymentInstrumentId, Object body, final ApiCallback<PaymentInstrument> _callback) throws ApiException {

            okhttp3.Call localVarCall = putPaymentInstrumentValidateBeforeCall(paymentInstrumentId, body, _callback);
        Type localVarReturnType = new TypeToken<PaymentInstrument>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        }
