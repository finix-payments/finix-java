/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateSubscriptionScheduleRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.SubscriptionSchedule;
import model.SubscriptionSchedulesList;
import model.UpdateSubscriptionScheduleRequest;

import model.GetSubscriptionSchedulesQueryParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionSchedulesApi {
private FinixClient localVarFinixClient;
private int localHostIndex;
private String localCustomBaseUrl;

public SubscriptionSchedulesApi() {
this(Configuration.getDefaultFinixClient());
}

public SubscriptionSchedulesApi(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public FinixClient getFinixClient() {
return localVarFinixClient;
}

public void setFinixClient(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public int getHostIndex() {
return localHostIndex;
}

public void setHostIndex(int hostIndex) {
this.localHostIndex = hostIndex;
}

public String getCustomBaseUrl() {
return localCustomBaseUrl;
}

public void setCustomBaseUrl(String customBaseUrl) {
this.localCustomBaseUrl = customBaseUrl;
}

    /**
    * Build call for getSubscriptionSchedule
        * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @param nickname Filter by the object&#39;s &#x60;nickname&#x60;. (optional)
        * @param type Filter by the object&#39;s &#x60;subscription_type&#x60;. (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        </table>
    */
    public okhttp3.Call getSubscriptionScheduleCall(String subscriptionScheduleId, String nickname, String type, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}"
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (nickname != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("nickname", nickname));
                }

                if (type != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("type", type));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call getSubscriptionScheduleValidateBeforeCall(String subscriptionScheduleId, String nickname, String type, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling getSubscriptionSchedule(Async)");
                }
        

            okhttp3.Call localVarCall = getSubscriptionScheduleCall(subscriptionScheduleId, nickname, type, _callback);
            return localVarCall;

        }

            /**
            * Get a Subscription Schedule
            * Retrieve the details of a &#x60;subscription_schedule&#x60;
                * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
                * @param nickname Filter by the object&#39;s &#x60;nickname&#x60;. (optional)
                * @param type Filter by the object&#39;s &#x60;subscription_type&#x60;. (optional)
                * @return SubscriptionSchedule
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
                </table>
            */
                public SubscriptionSchedule get(String subscriptionScheduleId, String nickname, String type) throws ApiException {
            ApiResponse<SubscriptionSchedule> localVarResp = getSubscriptionScheduleWithHttpInfo(subscriptionScheduleId, nickname, type);
                    return localVarResp.getData();
                }

    /**
        * Get a Subscription Schedule
        * Retrieve the details of a &#x60;subscription_schedule&#x60;
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param nickname Filter by the object&#39;s &#x60;nickname&#x60;. (optional)
            * @param type Filter by the object&#39;s &#x60;subscription_type&#x60;. (optional)
        * @return ApiResponse&lt;SubscriptionSchedule&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionSchedule> getSubscriptionScheduleWithHttpInfo(String subscriptionScheduleId, String nickname, String type) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionScheduleValidateBeforeCall(subscriptionScheduleId, nickname, type, null);
                Type localVarReturnType = new TypeToken<SubscriptionSchedule>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Get a Subscription Schedule (asynchronously)
        * Retrieve the details of a &#x60;subscription_schedule&#x60;
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param nickname Filter by the object&#39;s &#x60;nickname&#x60;. (optional)
            * @param type Filter by the object&#39;s &#x60;subscription_type&#x60;. (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public okhttp3.Call getSubscriptionScheduleAsync(String subscriptionScheduleId, String nickname, String type, final ApiCallback<SubscriptionSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionScheduleValidateBeforeCall(subscriptionScheduleId, nickname, type, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionSchedule>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    private okhttp3.Call getSubscriptionSchedulesCall(String nickname, String type, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (nickname != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("nickname", nickname));
                }

                if (type != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("type", type));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call getSubscriptionSchedulesValidateBeforeCall(String nickname, String type, final ApiCallback _callback) throws ApiException {
        

            okhttp3.Call localVarCall = getSubscriptionSchedulesCall(nickname, type, _callback);
            return localVarCall;

        }


    private ApiResponse<SubscriptionSchedulesList> getSubscriptionSchedulesWithHttpInfo(String nickname, String type) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionSchedulesValidateBeforeCall(nickname, type, null);
                Type localVarReturnType = new TypeToken<SubscriptionSchedulesList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call getSubscriptionSchedulesAsync(String nickname, String type, final ApiCallback<SubscriptionSchedulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionSchedulesValidateBeforeCall(nickname, type, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionSchedulesList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIgetSubscriptionSchedulesRequest {
            private String nickname;
            private String type;

        private APIgetSubscriptionSchedulesRequest() {
        }

            /**
            * Set nickname
            * @param nickname Filter by the object&#39;s &#x60;nickname&#x60;. (optional)
            * @return APIgetSubscriptionSchedulesRequest
            */
            public APIgetSubscriptionSchedulesRequest nickname(String nickname) {
            this.nickname = nickname;
            return this;
            }

            /**
            * Set type
            * @param type Filter by the object&#39;s &#x60;type&#x60;. (optional)
            * @return APIgetSubscriptionSchedulesRequest
            */
            public APIgetSubscriptionSchedulesRequest type(String type) {
            this.type = type;
            return this;
            }

        /**
        * Build call for getSubscriptionSchedules
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_schedule objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return getSubscriptionSchedulesCall(nickname, type, _callback);
        }

        /**
        * Execute getSubscriptionSchedules request
            * @return SubscriptionSchedulesList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_schedule objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public SubscriptionSchedulesList execute() throws ApiException {
    ApiResponse<SubscriptionSchedulesList> localVarResp = getSubscriptionSchedulesWithHttpInfo(nickname, type);
            return localVarResp.getData();
        }

        /**
        * Execute getSubscriptionSchedules request with HTTP info returned
        * @return ApiResponse&lt;SubscriptionSchedulesList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_schedule objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionSchedulesList> executeWithHttpInfo() throws ApiException {
        return getSubscriptionSchedulesWithHttpInfo(nickname, type);
        }

        /**
        * Execute getSubscriptionSchedules request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_schedule objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionSchedulesList> _callback) throws ApiException {
        return getSubscriptionSchedulesAsync(nickname, type, _callback);
        }
        }

        /**
        * List Subscription Schedules
        * Retrieve a list of &#x60;Subscription Schedules&#x60;.
        * @return APIgetSubscriptionSchedulesRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_schedule objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
    public SubscriptionSchedulesList list( GetSubscriptionSchedulesQueryParams getSubscriptionSchedulesQueryParams) throws ApiException {

        APIgetSubscriptionSchedulesRequest request = new APIgetSubscriptionSchedulesRequest();
        request.nickname(getSubscriptionSchedulesQueryParams.getNickname());
        request.type(getSubscriptionSchedulesQueryParams.getType());
        return request.execute();

    }
    /**
    * Build call for postSubscriptionSubscriptionSchedules
        * @param createSubscriptionScheduleRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call postSubscriptionSubscriptionSchedulesCall(CreateSubscriptionScheduleRequest createSubscriptionScheduleRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = createSubscriptionScheduleRequest;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call postSubscriptionSubscriptionSchedulesValidateBeforeCall(CreateSubscriptionScheduleRequest createSubscriptionScheduleRequest, final ApiCallback _callback) throws ApiException {
        

            okhttp3.Call localVarCall = postSubscriptionSubscriptionSchedulesCall(createSubscriptionScheduleRequest, _callback);
            return localVarCall;

        }

            /**
            * Create a Subscription Schedule
            * Create a &#x60;subscription_schedule&#x60;.
                * @param createSubscriptionScheduleRequest  (optional)
                * @return SubscriptionSchedule
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SubscriptionSchedule create(CreateSubscriptionScheduleRequest createSubscriptionScheduleRequest) throws ApiException {
            ApiResponse<SubscriptionSchedule> localVarResp = postSubscriptionSubscriptionSchedulesWithHttpInfo(createSubscriptionScheduleRequest);
                    return localVarResp.getData();
                }

    /**
        * Create a Subscription Schedule
        * Create a &#x60;subscription_schedule&#x60;.
            * @param createSubscriptionScheduleRequest  (optional)
        * @return ApiResponse&lt;SubscriptionSchedule&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionSchedule> postSubscriptionSubscriptionSchedulesWithHttpInfo(CreateSubscriptionScheduleRequest createSubscriptionScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = postSubscriptionSubscriptionSchedulesValidateBeforeCall(createSubscriptionScheduleRequest, null);
                Type localVarReturnType = new TypeToken<SubscriptionSchedule>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Create a Subscription Schedule (asynchronously)
        * Create a &#x60;subscription_schedule&#x60;.
            * @param createSubscriptionScheduleRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call postSubscriptionSubscriptionSchedulesAsync(CreateSubscriptionScheduleRequest createSubscriptionScheduleRequest, final ApiCallback<SubscriptionSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSubscriptionSubscriptionSchedulesValidateBeforeCall(createSubscriptionScheduleRequest, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionSchedule>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for putSubscriptionSchedules
        * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
        * @param updateSubscriptionScheduleRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call putSubscriptionSchedulesCall(String subscriptionScheduleId, UpdateSubscriptionScheduleRequest updateSubscriptionScheduleRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = updateSubscriptionScheduleRequest;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}"
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call putSubscriptionSchedulesValidateBeforeCall(String subscriptionScheduleId, UpdateSubscriptionScheduleRequest updateSubscriptionScheduleRequest, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling putSubscriptionSchedules(Async)");
                }
        

            okhttp3.Call localVarCall = putSubscriptionSchedulesCall(subscriptionScheduleId, updateSubscriptionScheduleRequest, _callback);
            return localVarCall;

        }

            /**
            * Update a Subscription Schedule
            * Update the details of a &#x60;subscription_schedule&#x60;.
                * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
                * @param updateSubscriptionScheduleRequest  (optional)
                * @return SubscriptionSchedule
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SubscriptionSchedule update(String subscriptionScheduleId, UpdateSubscriptionScheduleRequest updateSubscriptionScheduleRequest) throws ApiException {
            ApiResponse<SubscriptionSchedule> localVarResp = putSubscriptionSchedulesWithHttpInfo(subscriptionScheduleId, updateSubscriptionScheduleRequest);
                    return localVarResp.getData();
                }

    /**
        * Update a Subscription Schedule
        * Update the details of a &#x60;subscription_schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param updateSubscriptionScheduleRequest  (optional)
        * @return ApiResponse&lt;SubscriptionSchedule&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionSchedule> putSubscriptionSchedulesWithHttpInfo(String subscriptionScheduleId, UpdateSubscriptionScheduleRequest updateSubscriptionScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = putSubscriptionSchedulesValidateBeforeCall(subscriptionScheduleId, updateSubscriptionScheduleRequest, null);
                Type localVarReturnType = new TypeToken<SubscriptionSchedule>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Update a Subscription Schedule (asynchronously)
        * Update the details of a &#x60;subscription_schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;. (required)
            * @param updateSubscriptionScheduleRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call putSubscriptionSchedulesAsync(String subscriptionScheduleId, UpdateSubscriptionScheduleRequest updateSubscriptionScheduleRequest, final ApiCallback<SubscriptionSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSubscriptionSchedulesValidateBeforeCall(subscriptionScheduleId, updateSubscriptionScheduleRequest, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionSchedule>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    }
