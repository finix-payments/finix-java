/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateFeeProfileRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.Error422InvalidFieldList;
import model.FeeProfile;
import model.FeeProfilesList;

import java.lang.reflect.Type;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
import javax.ws.rs.core.GenericType;

    public class FeeProfilesApi {
    private FinixClient localVarFinixClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeeProfilesApi() {
    this(Configuration.getDefaultFinixClient());
    }

    public FeeProfilesApi(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public FinixClient getFinixClient() {
    return localVarFinixClient;
    }

    public void setFinixClient(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public int getHostIndex() {
    return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
    return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
    }

        /**
        * Build call for createFeeProfile
            * @param createFeeProfileRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 201 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createFeeProfileCall(CreateFeeProfileRequest createFeeProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createFeeProfileRequest;

        // create path and map variables
            String localVarPath = "/fee_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createFeeProfileValidateBeforeCall(CreateFeeProfileRequest createFeeProfileRequest, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = createFeeProfileCall(createFeeProfileRequest, _callback);
                return localVarCall;

            }

                /**
                * Create a Fee Profile
                * Create fee profiles
                    * @param createFeeProfileRequest  (optional)
                    * @return FeeProfile
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 201 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public FeeProfile create(CreateFeeProfileRequest createFeeProfileRequest) throws ApiException {
                ApiResponse<FeeProfile> localVarResp = createFeeProfileWithHttpInfo(createFeeProfileRequest);
                        return localVarResp.getData();
                    }

        /**
            * Create a Fee Profile
            * Create fee profiles
                * @param createFeeProfileRequest  (optional)
            * @return ApiResponse&lt;FeeProfile&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<FeeProfile> createFeeProfileWithHttpInfo(CreateFeeProfileRequest createFeeProfileRequest) throws ApiException {
            okhttp3.Call localVarCall = createFeeProfileValidateBeforeCall(createFeeProfileRequest, null);
                    Type localVarReturnType = new TypeToken<FeeProfile>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Create a Fee Profile (asynchronously)
            * Create fee profiles
                * @param createFeeProfileRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 201 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 422 </td><td> Invalid field </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createFeeProfileAsync(CreateFeeProfileRequest createFeeProfileRequest, final ApiCallback<FeeProfile> _callback) throws ApiException {

            okhttp3.Call localVarCall = createFeeProfileValidateBeforeCall(createFeeProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<FeeProfile>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for getFeeProfile
            * @param feeProfileId The ID of the fee profile. (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getFeeProfileCall(String feeProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/fee_profiles/{fee_profile_id}"
                .replaceAll("\\{" + "fee_profile_id" + "\\}", localVarFinixClient.escapeString(feeProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call getFeeProfileValidateBeforeCall(String feeProfileId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'feeProfileId' is set
                    if (feeProfileId == null) {
                    throw new ApiException("Missing the required parameter 'feeProfileId' when calling getFeeProfile(Async)");
                    }
            

                okhttp3.Call localVarCall = getFeeProfileCall(feeProfileId, _callback);
                return localVarCall;

            }

                /**
                * Fetch a Fee Profile
                * Get fee profile
                    * @param feeProfileId The ID of the fee profile. (required)
                    * @return FeeProfile
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public FeeProfile get(String feeProfileId) throws ApiException {
                ApiResponse<FeeProfile> localVarResp = getFeeProfileWithHttpInfo(feeProfileId);
                        return localVarResp.getData();
                    }

        /**
            * Fetch a Fee Profile
            * Get fee profile
                * @param feeProfileId The ID of the fee profile. (required)
            * @return ApiResponse&lt;FeeProfile&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<FeeProfile> getFeeProfileWithHttpInfo(String feeProfileId) throws ApiException {
            okhttp3.Call localVarCall = getFeeProfileValidateBeforeCall(feeProfileId, null);
                    Type localVarReturnType = new TypeToken<FeeProfile>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Fetch a Fee Profile (asynchronously)
            * Get fee profile
                * @param feeProfileId The ID of the fee profile. (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Fee profile </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call getFeeProfileAsync(String feeProfileId, final ApiCallback<FeeProfile> _callback) throws ApiException {

            okhttp3.Call localVarCall = getFeeProfileValidateBeforeCall(feeProfileId, _callback);
        Type localVarReturnType = new TypeToken<FeeProfile>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listFeeProfiles
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of fee profiles </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listFeeProfilesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/fee_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listFeeProfilesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = listFeeProfilesCall(_callback);
                return localVarCall;

            }

                /**
                * List Fee Profiles
                * Get all fee profiles
                    * @return FeeProfilesList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of fee profiles </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public FeeProfilesList list() throws ApiException {
                ApiResponse<FeeProfilesList> localVarResp = listFeeProfilesWithHttpInfo();
                        return localVarResp.getData();
                    }

        /**
            * List Fee Profiles
            * Get all fee profiles
            * @return ApiResponse&lt;FeeProfilesList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of fee profiles </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<FeeProfilesList> listFeeProfilesWithHttpInfo() throws ApiException {
            okhttp3.Call localVarCall = listFeeProfilesValidateBeforeCall(null);
                    Type localVarReturnType = new TypeToken<FeeProfilesList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List Fee Profiles (asynchronously)
            * Get all fee profiles
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of fee profiles </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listFeeProfilesAsync(final ApiCallback<FeeProfilesList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listFeeProfilesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<FeeProfilesList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        }
