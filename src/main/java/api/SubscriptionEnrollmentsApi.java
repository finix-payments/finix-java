/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateSubscriptionEnrollmentRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.SubscriptionEnrollment;
import model.SubscriptionEnrollmentList;
import model.UpdateSubscriptionEnrollmentRequest;

import model.ListSubscriptionEnrollmentsQueryParams;
import model.ListSubscriptionEnrollmentsInScheduleQueryParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionEnrollmentsApi {
private FinixClient localVarFinixClient;
private int localHostIndex;
private String localCustomBaseUrl;

public SubscriptionEnrollmentsApi() {
this(Configuration.getDefaultFinixClient());
}

public SubscriptionEnrollmentsApi(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public FinixClient getFinixClient() {
return localVarFinixClient;
}

public void setFinixClient(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public int getHostIndex() {
return localHostIndex;
}

public void setHostIndex(int hostIndex) {
this.localHostIndex = hostIndex;
}

public String getCustomBaseUrl() {
return localCustomBaseUrl;
}

public void setCustomBaseUrl(String customBaseUrl) {
this.localCustomBaseUrl = customBaseUrl;
}

    /**
    * Build call for createSubscriptionEnrollments
        * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;. (required)
        * @param createSubscriptionEnrollmentRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call createSubscriptionEnrollmentsCall(String subscriptionScheduleId, CreateSubscriptionEnrollmentRequest createSubscriptionEnrollmentRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = createSubscriptionEnrollmentRequest;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_enrollments"
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call createSubscriptionEnrollmentsValidateBeforeCall(String subscriptionScheduleId, CreateSubscriptionEnrollmentRequest createSubscriptionEnrollmentRequest, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling createSubscriptionEnrollments(Async)");
                }
        

            okhttp3.Call localVarCall = createSubscriptionEnrollmentsCall(subscriptionScheduleId, createSubscriptionEnrollmentRequest, _callback);
            return localVarCall;

        }

            /**
            * Create a Subscription Enrollment
            * Create a &#x60;subscription_enrollment&#x60;.  A &#x60;subscription_enrollment&#x60; details which &#x60;Merchant&#x60; gets charged, to what schedule, and when the subscription will start. The &#x60;subscription_enrollment&#x60; must be associated with a &#x60;Subscription Schedule&#x60;.
                * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;. (required)
                * @param createSubscriptionEnrollmentRequest  (optional)
                * @return SubscriptionEnrollment
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SubscriptionEnrollment create(String subscriptionScheduleId, CreateSubscriptionEnrollmentRequest createSubscriptionEnrollmentRequest) throws ApiException {
            ApiResponse<SubscriptionEnrollment> localVarResp = createSubscriptionEnrollmentsWithHttpInfo(subscriptionScheduleId, createSubscriptionEnrollmentRequest);
                    return localVarResp.getData();
                }

    /**
        * Create a Subscription Enrollment
        * Create a &#x60;subscription_enrollment&#x60;.  A &#x60;subscription_enrollment&#x60; details which &#x60;Merchant&#x60; gets charged, to what schedule, and when the subscription will start. The &#x60;subscription_enrollment&#x60; must be associated with a &#x60;Subscription Schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;. (required)
            * @param createSubscriptionEnrollmentRequest  (optional)
        * @return ApiResponse&lt;SubscriptionEnrollment&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionEnrollment> createSubscriptionEnrollmentsWithHttpInfo(String subscriptionScheduleId, CreateSubscriptionEnrollmentRequest createSubscriptionEnrollmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionEnrollmentsValidateBeforeCall(subscriptionScheduleId, createSubscriptionEnrollmentRequest, null);
                Type localVarReturnType = new TypeToken<SubscriptionEnrollment>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Create a Subscription Enrollment (asynchronously)
        * Create a &#x60;subscription_enrollment&#x60;.  A &#x60;subscription_enrollment&#x60; details which &#x60;Merchant&#x60; gets charged, to what schedule, and when the subscription will start. The &#x60;subscription_enrollment&#x60; must be associated with a &#x60;Subscription Schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;. (required)
            * @param createSubscriptionEnrollmentRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createSubscriptionEnrollmentsAsync(String subscriptionScheduleId, CreateSubscriptionEnrollmentRequest createSubscriptionEnrollmentRequest, final ApiCallback<SubscriptionEnrollment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionEnrollmentsValidateBeforeCall(subscriptionScheduleId, createSubscriptionEnrollmentRequest, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionEnrollment>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    /**
    * Build call for deleteSubscriptionEnrollment
        * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call deleteSubscriptionEnrollmentCall(String subscriptionEnrollmentId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_enrollments/{subscription_enrollment_id}"
            .replaceAll("\\{" + "subscription_enrollment_id" + "\\}", localVarFinixClient.escapeString(subscriptionEnrollmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call deleteSubscriptionEnrollmentValidateBeforeCall(String subscriptionEnrollmentId, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionEnrollmentId' is set
                if (subscriptionEnrollmentId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionEnrollmentId' when calling deleteSubscriptionEnrollment(Async)");
                }
        

            okhttp3.Call localVarCall = deleteSubscriptionEnrollmentCall(subscriptionEnrollmentId, _callback);
            return localVarCall;

        }

            /**
            * Remove a Subscription Enrollment
            * Remove a &#x60;subscription_enrollment&#x60;.
                * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public void remove(String subscriptionEnrollmentId) throws ApiException {
            deleteSubscriptionEnrollmentWithHttpInfo(subscriptionEnrollmentId);
                }

    /**
        * Remove a Subscription Enrollment
        * Remove a &#x60;subscription_enrollment&#x60;.
            * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
        * @return ApiResponse&lt;Void&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<Void> deleteSubscriptionEnrollmentWithHttpInfo(String subscriptionEnrollmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionEnrollmentValidateBeforeCall(subscriptionEnrollmentId, null);
            return localVarFinixClient.execute(localVarCall);
        }

    /**
        * Remove a Subscription Enrollment (asynchronously)
        * Remove a &#x60;subscription_enrollment&#x60;.
            * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 204 </td><td> No content </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call deleteSubscriptionEnrollmentAsync(String subscriptionEnrollmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionEnrollmentValidateBeforeCall(subscriptionEnrollmentId, _callback);
    localVarFinixClient.executeAsync(localVarCall, _callback);
        return localVarCall;
        }
    /**
    * Build call for getSubscriptionSenrollments
        * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
        * @param merchant Filter by the objects &#x60;merchant&#x60; ID. (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call getSubscriptionSenrollmentsCall(String subscriptionEnrollmentId, String merchant, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_enrollments/{subscription_enrollment_id}"
            .replaceAll("\\{" + "subscription_enrollment_id" + "\\}", localVarFinixClient.escapeString(subscriptionEnrollmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (merchant != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("merchant", merchant));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call getSubscriptionSenrollmentsValidateBeforeCall(String subscriptionEnrollmentId, String merchant, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionEnrollmentId' is set
                if (subscriptionEnrollmentId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionEnrollmentId' when calling getSubscriptionSenrollments(Async)");
                }
        

            okhttp3.Call localVarCall = getSubscriptionSenrollmentsCall(subscriptionEnrollmentId, merchant, _callback);
            return localVarCall;

        }

            /**
            * Get a Subscription Enrollment
            * Retrieve the details of a &#x60;subscription_enrollment&#x60;.
                * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
                * @param merchant Filter by the objects &#x60;merchant&#x60; ID. (optional)
                * @return SubscriptionEnrollment
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SubscriptionEnrollment get(String subscriptionEnrollmentId, String merchant) throws ApiException {
            ApiResponse<SubscriptionEnrollment> localVarResp = getSubscriptionSenrollmentsWithHttpInfo(subscriptionEnrollmentId, merchant);
                    return localVarResp.getData();
                }

    /**
        * Get a Subscription Enrollment
        * Retrieve the details of a &#x60;subscription_enrollment&#x60;.
            * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
            * @param merchant Filter by the objects &#x60;merchant&#x60; ID. (optional)
        * @return ApiResponse&lt;SubscriptionEnrollment&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionEnrollment> getSubscriptionSenrollmentsWithHttpInfo(String subscriptionEnrollmentId, String merchant) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionSenrollmentsValidateBeforeCall(subscriptionEnrollmentId, merchant, null);
                Type localVarReturnType = new TypeToken<SubscriptionEnrollment>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Get a Subscription Enrollment (asynchronously)
        * Retrieve the details of a &#x60;subscription_enrollment&#x60;.
            * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
            * @param merchant Filter by the objects &#x60;merchant&#x60; ID. (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getSubscriptionSenrollmentsAsync(String subscriptionEnrollmentId, String merchant, final ApiCallback<SubscriptionEnrollment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionSenrollmentsValidateBeforeCall(subscriptionEnrollmentId, merchant, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionEnrollment>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    private okhttp3.Call listSubscriptionEnrollmentsCall(Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_enrollments";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (afterCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("after_cursor", afterCursor));
                }

                if (beforeCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("before_cursor", beforeCursor));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listSubscriptionEnrollmentsValidateBeforeCall(Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
        

            okhttp3.Call localVarCall = listSubscriptionEnrollmentsCall(limit, afterCursor, beforeCursor, _callback);
            return localVarCall;

        }


    private ApiResponse<SubscriptionEnrollmentList> listSubscriptionEnrollmentsWithHttpInfo(Long limit, String afterCursor, String beforeCursor) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionEnrollmentsValidateBeforeCall(limit, afterCursor, beforeCursor, null);
                Type localVarReturnType = new TypeToken<SubscriptionEnrollmentList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call listSubscriptionEnrollmentsAsync(Long limit, String afterCursor, String beforeCursor, final ApiCallback<SubscriptionEnrollmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionEnrollmentsValidateBeforeCall(limit, afterCursor, beforeCursor, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionEnrollmentList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIlistSubscriptionEnrollmentsRequest {
            private Long limit;
            private String afterCursor;
            private String beforeCursor;

        private APIlistSubscriptionEnrollmentsRequest() {
        }

            /**
            * Set limit
            * @param limit The numbers of items to return (optional)
            * @return APIlistSubscriptionEnrollmentsRequest
            */
            public APIlistSubscriptionEnrollmentsRequest limit(Long limit) {
            this.limit = limit;
            return this;
            }

            /**
            * Set afterCursor
            * @param afterCursor Return every resource created after the cursor value. (optional)
            * @return APIlistSubscriptionEnrollmentsRequest
            */
            public APIlistSubscriptionEnrollmentsRequest afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
            }

            /**
            * Set beforeCursor
            * @param beforeCursor Return every resource created before the cursor value. (optional)
            * @return APIlistSubscriptionEnrollmentsRequest
            */
            public APIlistSubscriptionEnrollmentsRequest beforeCursor(String beforeCursor) {
            this.beforeCursor = beforeCursor;
            return this;
            }

        /**
        * Build call for listSubscriptionEnrollments
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return listSubscriptionEnrollmentsCall(limit, afterCursor, beforeCursor, _callback);
        }

        /**
        * Execute listSubscriptionEnrollments request
            * @return SubscriptionEnrollmentList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public SubscriptionEnrollmentList execute() throws ApiException {
    ApiResponse<SubscriptionEnrollmentList> localVarResp = listSubscriptionEnrollmentsWithHttpInfo(limit, afterCursor, beforeCursor);
            return localVarResp.getData();
        }

        /**
        * Execute listSubscriptionEnrollments request with HTTP info returned
        * @return ApiResponse&lt;SubscriptionEnrollmentList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionEnrollmentList> executeWithHttpInfo() throws ApiException {
        return listSubscriptionEnrollmentsWithHttpInfo(limit, afterCursor, beforeCursor);
        }

        /**
        * Execute listSubscriptionEnrollments request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionEnrollmentList> _callback) throws ApiException {
        return listSubscriptionEnrollmentsAsync(limit, afterCursor, beforeCursor, _callback);
        }
        }

        /**
        * List Subscription Enrollments
        * Retrieve a list of &#x60;Subscription Enrollments&#x60;.
        * @return APIlistSubscriptionEnrollmentsRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
    public SubscriptionEnrollmentList get( ListSubscriptionEnrollmentsQueryParams listSubscriptionEnrollmentsQueryParams) throws ApiException {

        APIlistSubscriptionEnrollmentsRequest request = new APIlistSubscriptionEnrollmentsRequest();
        request.limit(listSubscriptionEnrollmentsQueryParams.getLimit());
        request.afterCursor(listSubscriptionEnrollmentsQueryParams.getAfterCursor());
        request.beforeCursor(listSubscriptionEnrollmentsQueryParams.getBeforeCursor());
        return request.execute();

    }
    private okhttp3.Call listSubscriptionEnrollmentsInScheduleCall(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
        String localVarPath = "/subscription/subscription_schedules/{subscription_schedule_id}/subscription_enrollments"
            .replaceAll("\\{" + "subscription_schedule_id" + "\\}", localVarFinixClient.escapeString(subscriptionScheduleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                if (limit != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                }

                if (afterCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("after_cursor", afterCursor));
                }

                if (beforeCursor != null) {
            localVarQueryParams.addAll(localVarFinixClient.parameterToPair("before_cursor", beforeCursor));
                }

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call listSubscriptionEnrollmentsInScheduleValidateBeforeCall(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionScheduleId' is set
                if (subscriptionScheduleId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionScheduleId' when calling listSubscriptionEnrollmentsInSchedule(Async)");
                }
        

            okhttp3.Call localVarCall = listSubscriptionEnrollmentsInScheduleCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
            return localVarCall;

        }


    private ApiResponse<SubscriptionEnrollmentList> listSubscriptionEnrollmentsInScheduleWithHttpInfo(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionEnrollmentsInScheduleValidateBeforeCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, null);
                Type localVarReturnType = new TypeToken<SubscriptionEnrollmentList>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    private okhttp3.Call listSubscriptionEnrollmentsInScheduleAsync(String subscriptionScheduleId, Long limit, String afterCursor, String beforeCursor, final ApiCallback<SubscriptionEnrollmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionEnrollmentsInScheduleValidateBeforeCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionEnrollmentList>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }

        public class APIlistSubscriptionEnrollmentsInScheduleRequest {
            private final String subscriptionScheduleId;
            private Long limit;
            private String afterCursor;
            private String beforeCursor;

        private APIlistSubscriptionEnrollmentsInScheduleRequest(String subscriptionScheduleId) {
            this.subscriptionScheduleId = subscriptionScheduleId;
        }

            /**
            * Set limit
            * @param limit The numbers of items to return (optional)
            * @return APIlistSubscriptionEnrollmentsInScheduleRequest
            */
            public APIlistSubscriptionEnrollmentsInScheduleRequest limit(Long limit) {
            this.limit = limit;
            return this;
            }

            /**
            * Set afterCursor
            * @param afterCursor Return every resource created after the cursor value. (optional)
            * @return APIlistSubscriptionEnrollmentsInScheduleRequest
            */
            public APIlistSubscriptionEnrollmentsInScheduleRequest afterCursor(String afterCursor) {
            this.afterCursor = afterCursor;
            return this;
            }

            /**
            * Set beforeCursor
            * @param beforeCursor Return every resource created before the cursor value. (optional)
            * @return APIlistSubscriptionEnrollmentsInScheduleRequest
            */
            public APIlistSubscriptionEnrollmentsInScheduleRequest beforeCursor(String beforeCursor) {
            this.beforeCursor = beforeCursor;
            return this;
            }

        /**
        * Build call for listSubscriptionEnrollmentsInSchedule
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return listSubscriptionEnrollmentsInScheduleCall(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
        }

        /**
        * Execute listSubscriptionEnrollmentsInSchedule request
            * @return SubscriptionEnrollmentList
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public SubscriptionEnrollmentList execute() throws ApiException {
    ApiResponse<SubscriptionEnrollmentList> localVarResp = listSubscriptionEnrollmentsInScheduleWithHttpInfo(subscriptionScheduleId, limit, afterCursor, beforeCursor);
            return localVarResp.getData();
        }

        /**
        * Execute listSubscriptionEnrollmentsInSchedule request with HTTP info returned
        * @return ApiResponse&lt;SubscriptionEnrollmentList&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionEnrollmentList> executeWithHttpInfo() throws ApiException {
        return listSubscriptionEnrollmentsInScheduleWithHttpInfo(subscriptionScheduleId, limit, afterCursor, beforeCursor);
        }

        /**
        * Execute listSubscriptionEnrollmentsInSchedule request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionEnrollmentList> _callback) throws ApiException {
        return listSubscriptionEnrollmentsInScheduleAsync(subscriptionScheduleId, limit, afterCursor, beforeCursor, _callback);
        }
        }

        /**
        * List Subscription Enrollments on a Schedule
        * Retrieve a list of &#x60;Subscription Enrollments&#x60; for a specific &#x60;subscription_schedule&#x60;.
            * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;. (required)
        * @return APIlistSubscriptionEnrollmentsInScheduleRequest
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of subscription_enrollment objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
    public SubscriptionEnrollmentList listBySubscriptionScheduleId(String subscriptionScheduleId,  ListSubscriptionEnrollmentsInScheduleQueryParams listSubscriptionEnrollmentsInScheduleQueryParams) throws ApiException {

        APIlistSubscriptionEnrollmentsInScheduleRequest request = new APIlistSubscriptionEnrollmentsInScheduleRequest(subscriptionScheduleId);
        request.limit(listSubscriptionEnrollmentsInScheduleQueryParams.getLimit());
        request.afterCursor(listSubscriptionEnrollmentsInScheduleQueryParams.getAfterCursor());
        request.beforeCursor(listSubscriptionEnrollmentsInScheduleQueryParams.getBeforeCursor());
        return request.execute();

    }
    /**
    * Build call for updateSubscriptionEnrollment
        * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
        * @param updateSubscriptionEnrollmentRequest  (optional)
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
        </table>
    */
    public okhttp3.Call updateSubscriptionEnrollmentCall(String subscriptionEnrollmentId, UpdateSubscriptionEnrollmentRequest updateSubscriptionEnrollmentRequest, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = updateSubscriptionEnrollmentRequest;

    // create path and map variables
        String localVarPath = "/subscription/subscription_enrollments/{subscription_enrollment_id}"
            .replaceAll("\\{" + "subscription_enrollment_id" + "\\}", localVarFinixClient.escapeString(subscriptionEnrollmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
    "application/hal+json"
        };
        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
    "application/hal+json"
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarFinixClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

        @SuppressWarnings("rawtypes")
        private okhttp3.Call updateSubscriptionEnrollmentValidateBeforeCall(String subscriptionEnrollmentId, UpdateSubscriptionEnrollmentRequest updateSubscriptionEnrollmentRequest, final ApiCallback _callback) throws ApiException {
        
                // verify the required parameter 'subscriptionEnrollmentId' is set
                if (subscriptionEnrollmentId == null) {
                throw new ApiException("Missing the required parameter 'subscriptionEnrollmentId' when calling updateSubscriptionEnrollment(Async)");
                }
        

            okhttp3.Call localVarCall = updateSubscriptionEnrollmentCall(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, _callback);
            return localVarCall;

        }

            /**
            * Update a Subscription Enrollment
            * Update the details of a &#x60;subscription_enrollment&#x60;.
                * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
                * @param updateSubscriptionEnrollmentRequest  (optional)
                * @return SubscriptionEnrollment
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
                public SubscriptionEnrollment update(String subscriptionEnrollmentId, UpdateSubscriptionEnrollmentRequest updateSubscriptionEnrollmentRequest) throws ApiException {
            ApiResponse<SubscriptionEnrollment> localVarResp = updateSubscriptionEnrollmentWithHttpInfo(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest);
                    return localVarResp.getData();
                }

    /**
        * Update a Subscription Enrollment
        * Update the details of a &#x60;subscription_enrollment&#x60;.
            * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
            * @param updateSubscriptionEnrollmentRequest  (optional)
        * @return ApiResponse&lt;SubscriptionEnrollment&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public ApiResponse<SubscriptionEnrollment> updateSubscriptionEnrollmentWithHttpInfo(String subscriptionEnrollmentId, UpdateSubscriptionEnrollmentRequest updateSubscriptionEnrollmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionEnrollmentValidateBeforeCall(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, null);
                Type localVarReturnType = new TypeToken<SubscriptionEnrollment>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        }

    /**
        * Update a Subscription Enrollment (asynchronously)
        * Update the details of a &#x60;subscription_enrollment&#x60;.
            * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;. (required)
            * @param updateSubscriptionEnrollmentRequest  (optional)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single subscription_enrollment resource </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call updateSubscriptionEnrollmentAsync(String subscriptionEnrollmentId, UpdateSubscriptionEnrollmentRequest updateSubscriptionEnrollmentRequest, final ApiCallback<SubscriptionEnrollment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionEnrollmentValidateBeforeCall(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, _callback);
    Type localVarReturnType = new TypeToken<SubscriptionEnrollment>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
        }
    }
