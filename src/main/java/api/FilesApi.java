/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiCallback;
import invoker.FinixClient;
import invoker.ApiException;
import invoker.ApiResponse;
import invoker.Configuration;
import invoker.Pair;
import invoker.ProgressRequestBody;
import invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import model.CreateExternalLinkRequest;
import model.CreateFileRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.ExternalLink;
import model.ExternalLinksList;
import model.FilesList;
import model.ModelFile;
import model.UploadFileRequest;

import java.lang.reflect.Type;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
import javax.ws.rs.core.GenericType;

    public class FilesApi {
    private FinixClient localVarFinixClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
    this(Configuration.getDefaultFinixClient());
    }

    public FilesApi(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public FinixClient getFinixClient() {
    return localVarFinixClient;
    }

    public void setFinixClient(FinixClient finixClient) {
    this.localVarFinixClient = finixClient;
    }

    public int getHostIndex() {
    return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
    return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
    }

        /**
        * Build call for createExternalLink
            * @param fileId Your &#x60;File&#x60; ID. (required)
            * @param createExternalLinkRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createExternalLinkCall(String fileId, CreateExternalLinkRequest createExternalLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createExternalLinkRequest;

        // create path and map variables
            String localVarPath = "/files/{file_id}/external_links"
                .replaceAll("\\{" + "file_id" + "\\}", localVarFinixClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createExternalLinkValidateBeforeCall(String fileId, CreateExternalLinkRequest createExternalLinkRequest, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'fileId' is set
                    if (fileId == null) {
                    throw new ApiException("Missing the required parameter 'fileId' when calling createExternalLink(Async)");
                    }
            

                okhttp3.Call localVarCall = createExternalLinkCall(fileId, createExternalLinkRequest, _callback);
                return localVarCall;

            }

                /**
                * Create an External Link
                * Create an &#x60;external_link&#x60; resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).  Once created, you can upload the user&#39;s file to the &#x60;external_link&#x60; resource: [Upload files to External Link](#operation/uploadExternalLink)
                    * @param fileId Your &#x60;File&#x60; ID. (required)
                    * @param createExternalLinkRequest  (optional)
                    * @return ExternalLink
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public ExternalLink createExternalLink(String fileId, CreateExternalLinkRequest createExternalLinkRequest) throws ApiException {
                ApiResponse<ExternalLink> localVarResp = createExternalLinkWithHttpInfo(fileId, createExternalLinkRequest);
                        return localVarResp.getData();
                    }

        /**
            * Create an External Link
            * Create an &#x60;external_link&#x60; resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).  Once created, you can upload the user&#39;s file to the &#x60;external_link&#x60; resource: [Upload files to External Link](#operation/uploadExternalLink)
                * @param fileId Your &#x60;File&#x60; ID. (required)
                * @param createExternalLinkRequest  (optional)
            * @return ApiResponse&lt;ExternalLink&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<ExternalLink> createExternalLinkWithHttpInfo(String fileId, CreateExternalLinkRequest createExternalLinkRequest) throws ApiException {
            okhttp3.Call localVarCall = createExternalLinkValidateBeforeCall(fileId, createExternalLinkRequest, null);
                    Type localVarReturnType = new TypeToken<ExternalLink>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Create an External Link (asynchronously)
            * Create an &#x60;external_link&#x60; resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).  Once created, you can upload the user&#39;s file to the &#x60;external_link&#x60; resource: [Upload files to External Link](#operation/uploadExternalLink)
                * @param fileId Your &#x60;File&#x60; ID. (required)
                * @param createExternalLinkRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createExternalLinkAsync(String fileId, CreateExternalLinkRequest createExternalLinkRequest, final ApiCallback<ExternalLink> _callback) throws ApiException {

            okhttp3.Call localVarCall = createExternalLinkValidateBeforeCall(fileId, createExternalLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<ExternalLink>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for createFiles
            * @param createFileRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call createFilesCall(CreateFileRequest createFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = createFileRequest;

        // create path and map variables
            String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/vnd.api+json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "application/vnd.api+json"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call createFilesValidateBeforeCall(CreateFileRequest createFileRequest, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = createFilesCall(createFileRequest, _callback);
                return localVarCall;

            }

                /**
                * Create a File
                * Before uploading a file, you need to create a &#x60;File&#x60; resource.   Once created, you can [upload](#operations/uploadFile) your file to the new &#x60;File&#x60; resource.
                    * @param createFileRequest  (optional)
                    * @return ModelFile
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public ModelFile createFiles(CreateFileRequest createFileRequest) throws ApiException {
                ApiResponse<ModelFile> localVarResp = createFilesWithHttpInfo(createFileRequest);
                        return localVarResp.getData();
                    }

        /**
            * Create a File
            * Before uploading a file, you need to create a &#x60;File&#x60; resource.   Once created, you can [upload](#operations/uploadFile) your file to the new &#x60;File&#x60; resource.
                * @param createFileRequest  (optional)
            * @return ApiResponse&lt;ModelFile&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<ModelFile> createFilesWithHttpInfo(CreateFileRequest createFileRequest) throws ApiException {
            okhttp3.Call localVarCall = createFilesValidateBeforeCall(createFileRequest, null);
                    Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Create a File (asynchronously)
            * Before uploading a file, you need to create a &#x60;File&#x60; resource.   Once created, you can [upload](#operations/uploadFile) your file to the new &#x60;File&#x60; resource.
                * @param createFileRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call createFilesAsync(CreateFileRequest createFileRequest, final ApiCallback<ModelFile> _callback) throws ApiException {

            okhttp3.Call localVarCall = createFilesValidateBeforeCall(createFileRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for downloadFile
            * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
            * @param output The name you want to give to the downloaded file (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> The uploaded file will begin to donwload. </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call downloadFileCall(String fileId, String output, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/files/{file_id}/download"
                .replaceAll("\\{" + "file_id" + "\\}", localVarFinixClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (output != null) {
                    localVarHeaderParams.put("output", localVarFinixClient.parameterToString(output));
                    }

            final String[] localVarAccepts = {
        "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call downloadFileValidateBeforeCall(String fileId, String output, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'fileId' is set
                    if (fileId == null) {
                    throw new ApiException("Missing the required parameter 'fileId' when calling downloadFile(Async)");
                    }
            

                okhttp3.Call localVarCall = downloadFileCall(fileId, output, _callback);
                return localVarCall;

            }

                /**
                * Download a file
                * Download a file uploaded to a &#x60;File&#x60; resource. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix).
                    * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
                    * @param output The name you want to give to the downloaded file (optional)
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> The uploaded file will begin to donwload. </td><td>  -  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public void downloadFile(String fileId, String output) throws ApiException {
                downloadFileWithHttpInfo(fileId, output);
                    }

        /**
            * Download a file
            * Download a file uploaded to a &#x60;File&#x60; resource. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix).
                * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
                * @param output The name you want to give to the downloaded file (optional)
            * @return ApiResponse&lt;Void&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> The uploaded file will begin to donwload. </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<Void> downloadFileWithHttpInfo(String fileId, String output) throws ApiException {
            okhttp3.Call localVarCall = downloadFileValidateBeforeCall(fileId, output, null);
                return localVarFinixClient.execute(localVarCall);
            }

        /**
            * Download a file (asynchronously)
            * Download a file uploaded to a &#x60;File&#x60; resource. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix).
                * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
                * @param output The name you want to give to the downloaded file (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> The uploaded file will begin to donwload. </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call downloadFileAsync(String fileId, String output, final ApiCallback<Void> _callback) throws ApiException {

            okhttp3.Call localVarCall = downloadFileValidateBeforeCall(fileId, output, _callback);
        localVarFinixClient.executeAsync(localVarCall, _callback);
            return localVarCall;
            }
        /**
        * Build call for getExternalLink
            * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve. (required)
            * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve. (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getExternalLinkCall(String fileId, String externalLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/files/{file_id}/external_link/{external_link_id}"
                .replaceAll("\\{" + "file_id" + "\\}", localVarFinixClient.escapeString(fileId.toString()))
                .replaceAll("\\{" + "external_link_id" + "\\}", localVarFinixClient.escapeString(externalLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call getExternalLinkValidateBeforeCall(String fileId, String externalLinkId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'fileId' is set
                    if (fileId == null) {
                    throw new ApiException("Missing the required parameter 'fileId' when calling getExternalLink(Async)");
                    }
            
                    // verify the required parameter 'externalLinkId' is set
                    if (externalLinkId == null) {
                    throw new ApiException("Missing the required parameter 'externalLinkId' when calling getExternalLink(Async)");
                    }
            

                okhttp3.Call localVarCall = getExternalLinkCall(fileId, externalLinkId, _callback);
                return localVarCall;

            }

                /**
                * Fetch an External LInk
                * Fetch a previously created &#x60;external_link&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                    * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve. (required)
                    * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve. (required)
                    * @return ExternalLink
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public ExternalLink getExternalLink(String fileId, String externalLinkId) throws ApiException {
                ApiResponse<ExternalLink> localVarResp = getExternalLinkWithHttpInfo(fileId, externalLinkId);
                        return localVarResp.getData();
                    }

        /**
            * Fetch an External LInk
            * Fetch a previously created &#x60;external_link&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve. (required)
                * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve. (required)
            * @return ApiResponse&lt;ExternalLink&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<ExternalLink> getExternalLinkWithHttpInfo(String fileId, String externalLinkId) throws ApiException {
            okhttp3.Call localVarCall = getExternalLinkValidateBeforeCall(fileId, externalLinkId, null);
                    Type localVarReturnType = new TypeToken<ExternalLink>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Fetch an External LInk (asynchronously)
            * Fetch a previously created &#x60;external_link&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve. (required)
                * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve. (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single external_link object </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call getExternalLinkAsync(String fileId, String externalLinkId, final ApiCallback<ExternalLink> _callback) throws ApiException {

            okhttp3.Call localVarCall = getExternalLinkValidateBeforeCall(fileId, externalLinkId, _callback);
        Type localVarReturnType = new TypeToken<ExternalLink>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for getFile
            * @param fileId Your &#x60;File&#x60; ID. (required)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call getFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/files/{file_id}"
                .replaceAll("\\{" + "file_id" + "\\}", localVarFinixClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/vnd.api+json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call getFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'fileId' is set
                    if (fileId == null) {
                    throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
                    }
            

                okhttp3.Call localVarCall = getFileCall(fileId, _callback);
                return localVarCall;

            }

                /**
                * Fetch a File
                * Retrieve the details of a &#x60;File&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                    * @param fileId Your &#x60;File&#x60; ID. (required)
                    * @return ModelFile
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public ModelFile getFile(String fileId) throws ApiException {
                ApiResponse<ModelFile> localVarResp = getFileWithHttpInfo(fileId);
                        return localVarResp.getData();
                    }

        /**
            * Fetch a File
            * Retrieve the details of a &#x60;File&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                * @param fileId Your &#x60;File&#x60; ID. (required)
            * @return ApiResponse&lt;ModelFile&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<ModelFile> getFileWithHttpInfo(String fileId) throws ApiException {
            okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, null);
                    Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Fetch a File (asynchronously)
            * Retrieve the details of a &#x60;File&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                * @param fileId Your &#x60;File&#x60; ID. (required)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call getFileAsync(String fileId, final ApiCallback<ModelFile> _callback) throws ApiException {

            okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listExternalLink
            * @param fileId Your &#x60;File&#x60; ID. (required)
            * @param sort Specify key to be used for sorting the collection (optional)
            * @param offset The number of items to skip before starting to collect the result set (optional)
            * @param limit The numbers of items to return (optional)
            * @param id Filter by id (optional)
            * @param createdAtGte Filter where created_at is after the given date. (optional)
            * @param createdAtLte Filter where created_at is before the given date. (optional)
            * @param updatedAtGte Filter where updated_at is after the given date (optional)
            * @param updatedAtLte Filter where updated_at is before the given date (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of external_link objects </td><td>  -  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
            </table>
        */
        public okhttp3.Call listExternalLinkCall(String fileId, String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/files/{file_id}/external_links"
                .replaceAll("\\{" + "file_id" + "\\}", localVarFinixClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (sort != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("sort", sort));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (id != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("id", id));
                    }

                    if (createdAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.gte", createdAtGte));
                    }

                    if (createdAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.lte", createdAtLte));
                    }

                    if (updatedAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.gte", updatedAtGte));
                    }

                    if (updatedAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.lte", updatedAtLte));
                    }

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listExternalLinkValidateBeforeCall(String fileId, String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'fileId' is set
                    if (fileId == null) {
                    throw new ApiException("Missing the required parameter 'fileId' when calling listExternalLink(Async)");
                    }
            

                okhttp3.Call localVarCall = listExternalLinkCall(fileId, sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, _callback);
                return localVarCall;

            }

                /**
                * List All External Links
                * List the previously &#x60;external_links&#x60; for a &#x60;File&#x60;. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                    * @param fileId Your &#x60;File&#x60; ID. (required)
                    * @param sort Specify key to be used for sorting the collection (optional)
                    * @param offset The number of items to skip before starting to collect the result set (optional)
                    * @param limit The numbers of items to return (optional)
                    * @param id Filter by id (optional)
                    * @param createdAtGte Filter where created_at is after the given date. (optional)
                    * @param createdAtLte Filter where created_at is before the given date. (optional)
                    * @param updatedAtGte Filter where updated_at is after the given date (optional)
                    * @param updatedAtLte Filter where updated_at is before the given date (optional)
                    * @return ExternalLinksList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of external_link objects </td><td>  -  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
                    </table>
                */
                    public ExternalLinksList listExternalLink(String fileId, String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte) throws ApiException {
                ApiResponse<ExternalLinksList> localVarResp = listExternalLinkWithHttpInfo(fileId, sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
                        return localVarResp.getData();
                    }

        /**
            * List All External Links
            * List the previously &#x60;external_links&#x60; for a &#x60;File&#x60;. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                * @param fileId Your &#x60;File&#x60; ID. (required)
                * @param sort Specify key to be used for sorting the collection (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param limit The numbers of items to return (optional)
                * @param id Filter by id (optional)
                * @param createdAtGte Filter where created_at is after the given date. (optional)
                * @param createdAtLte Filter where created_at is before the given date. (optional)
                * @param updatedAtGte Filter where updated_at is after the given date (optional)
                * @param updatedAtLte Filter where updated_at is before the given date (optional)
            * @return ApiResponse&lt;ExternalLinksList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of external_link objects </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
                </table>
            */
            public ApiResponse<ExternalLinksList> listExternalLinkWithHttpInfo(String fileId, String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte) throws ApiException {
            okhttp3.Call localVarCall = listExternalLinkValidateBeforeCall(fileId, sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, null);
                    Type localVarReturnType = new TypeToken<ExternalLinksList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List All External Links (asynchronously)
            * List the previously &#x60;external_links&#x60; for a &#x60;File&#x60;. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
                * @param fileId Your &#x60;File&#x60; ID. (required)
                * @param sort Specify key to be used for sorting the collection (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param limit The numbers of items to return (optional)
                * @param id Filter by id (optional)
                * @param createdAtGte Filter where created_at is after the given date. (optional)
                * @param createdAtLte Filter where created_at is before the given date. (optional)
                * @param updatedAtGte Filter where updated_at is after the given date (optional)
                * @param updatedAtLte Filter where updated_at is before the given date (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of external_link objects </td><td>  -  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
                </table>
            */
            public okhttp3.Call listExternalLinkAsync(String fileId, String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, final ApiCallback<ExternalLinksList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listExternalLinkValidateBeforeCall(fileId, sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, _callback);
        Type localVarReturnType = new TypeToken<ExternalLinksList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for listFiles
            * @param sort Specify key to be used for sorting the collection (optional)
            * @param offset The number of items to skip before starting to collect the result set (optional)
            * @param limit The numbers of items to return (optional)
            * @param id Filter by id (optional)
            * @param createdAtGte Filter where created_at is after the given date. (optional)
            * @param createdAtLte Filter where created_at is before the given date. (optional)
            * @param updatedAtGte Filter where updated_at is after the given date (optional)
            * @param updatedAtLte Filter where updated_at is before the given date (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> List of File objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call listFilesCall(String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
            String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

                    if (sort != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("sort", sort));
                    }

                    if (offset != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("offset", offset));
                    }

                    if (limit != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("limit", limit));
                    }

                    if (id != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("id", id));
                    }

                    if (createdAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.gte", createdAtGte));
                    }

                    if (createdAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("created_at.lte", createdAtLte));
                    }

                    if (updatedAtGte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.gte", updatedAtGte));
                    }

                    if (updatedAtLte != null) {
                localVarQueryParams.addAll(localVarFinixClient.parameterToPair("updated_at.lte", updatedAtLte));
                    }

            final String[] localVarAccepts = {
        "application/json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call listFilesValidateBeforeCall(String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, final ApiCallback _callback) throws ApiException {
            

                okhttp3.Call localVarCall = listFilesCall(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, _callback);
                return localVarCall;

            }

                /**
                * List All Files
                * List all the &#x60;File&#x60; resources you&#39;ve created. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-1-create-a-file).
                    * @param sort Specify key to be used for sorting the collection (optional)
                    * @param offset The number of items to skip before starting to collect the result set (optional)
                    * @param limit The numbers of items to return (optional)
                    * @param id Filter by id (optional)
                    * @param createdAtGte Filter where created_at is after the given date. (optional)
                    * @param createdAtLte Filter where created_at is before the given date. (optional)
                    * @param updatedAtGte Filter where updated_at is after the given date (optional)
                    * @param updatedAtLte Filter where updated_at is before the given date (optional)
                    * @return FilesList
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> List of File objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public FilesList listFiles(String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte) throws ApiException {
                ApiResponse<FilesList> localVarResp = listFilesWithHttpInfo(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
                        return localVarResp.getData();
                    }

        /**
            * List All Files
            * List all the &#x60;File&#x60; resources you&#39;ve created. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-1-create-a-file).
                * @param sort Specify key to be used for sorting the collection (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param limit The numbers of items to return (optional)
                * @param id Filter by id (optional)
                * @param createdAtGte Filter where created_at is after the given date. (optional)
                * @param createdAtLte Filter where created_at is before the given date. (optional)
                * @param updatedAtGte Filter where updated_at is after the given date (optional)
                * @param updatedAtLte Filter where updated_at is before the given date (optional)
            * @return ApiResponse&lt;FilesList&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of File objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<FilesList> listFilesWithHttpInfo(String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte) throws ApiException {
            okhttp3.Call localVarCall = listFilesValidateBeforeCall(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, null);
                    Type localVarReturnType = new TypeToken<FilesList>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * List All Files (asynchronously)
            * List all the &#x60;File&#x60; resources you&#39;ve created. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-1-create-a-file).
                * @param sort Specify key to be used for sorting the collection (optional)
                * @param offset The number of items to skip before starting to collect the result set (optional)
                * @param limit The numbers of items to return (optional)
                * @param id Filter by id (optional)
                * @param createdAtGte Filter where created_at is after the given date. (optional)
                * @param createdAtLte Filter where created_at is before the given date. (optional)
                * @param updatedAtGte Filter where updated_at is after the given date (optional)
                * @param updatedAtLte Filter where updated_at is before the given date (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> List of File objects </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call listFilesAsync(String sort, Integer offset, Integer limit, String id, String createdAtGte, String createdAtLte, String updatedAtGte, String updatedAtLte, final ApiCallback<FilesList> _callback) throws ApiException {

            okhttp3.Call localVarCall = listFilesValidateBeforeCall(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, _callback);
        Type localVarReturnType = new TypeToken<FilesList>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        /**
        * Build call for uploadFile
            * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
            * @param uploadFileRequest  (optional)
        * @param _callback Callback for upload/download progress
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
            </table>
        */
        public okhttp3.Call uploadFileCall(String fileId, UploadFileRequest uploadFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
        basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
        basePath = localBasePaths[localHostIndex];
        } else {
        basePath = null;
        }

        Object localVarPostBody = uploadFileRequest;

        // create path and map variables
            String localVarPath = "/files/{file_id}/upload"
                .replaceAll("\\{" + "file_id" + "\\}", localVarFinixClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

            final String[] localVarAccepts = {
        "application/vnd.api+json", "application/hal+json"
            };
            final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
            if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            }

            final String[] localVarContentTypes = {
        "multipart/form-data"
            };
            final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
            if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            }

            String[] localVarAuthNames = new String[] { "BasicAuth" };
            return localVarFinixClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
            }

            @SuppressWarnings("rawtypes")
            private okhttp3.Call uploadFileValidateBeforeCall(String fileId, UploadFileRequest uploadFileRequest, final ApiCallback _callback) throws ApiException {
            
                    // verify the required parameter 'fileId' is set
                    if (fileId == null) {
                    throw new ApiException("Missing the required parameter 'fileId' when calling uploadFile(Async)");
                    }
            

                okhttp3.Call localVarCall = uploadFileCall(fileId, uploadFileRequest, _callback);
                return localVarCall;

            }

                /**
                * Upload files Directly
                * Upload files directly with a &#x60;multipart/form-data&#x60; request. For more info see, [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-2-upload-the-file).
                    * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
                    * @param uploadFileRequest  (optional)
                    * @return ModelFile
                * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                    * @http.response.details
                    <table summary="Response Details" border="1">
                        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                            <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                            <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                    </table>
                */
                    public ModelFile uploadFile(String fileId, UploadFileRequest uploadFileRequest) throws ApiException {
                ApiResponse<ModelFile> localVarResp = uploadFileWithHttpInfo(fileId, uploadFileRequest);
                        return localVarResp.getData();
                    }

        /**
            * Upload files Directly
            * Upload files directly with a &#x60;multipart/form-data&#x60; request. For more info see, [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-2-upload-the-file).
                * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
                * @param uploadFileRequest  (optional)
            * @return ApiResponse&lt;ModelFile&gt;
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public ApiResponse<ModelFile> uploadFileWithHttpInfo(String fileId, UploadFileRequest uploadFileRequest) throws ApiException {
            okhttp3.Call localVarCall = uploadFileValidateBeforeCall(fileId, uploadFileRequest, null);
                    Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
                    return localVarFinixClient.execute(localVarCall, localVarReturnType);
            }

        /**
            * Upload files Directly (asynchronously)
            * Upload files directly with a &#x60;multipart/form-data&#x60; request. For more info see, [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-2-upload-the-file).
                * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file. (required)
                * @param uploadFileRequest  (optional)
            * @param _callback The callback to be executed when the API call finishes
            * @return The request call
            * @throws ApiException If fail to process the API call, e.g. serializing the request body object
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                        <tr><td> 200 </td><td> Single File object </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 403 </td><td> Forbidden </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 404 </td><td> Object does not exist </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                        <tr><td> 406 </td><td> Not Acceptable </td><td>  * finix-apiuser-role -  <br>  * date -  <br>  * x-request-id -  <br>  </td></tr>
                </table>
            */
            public okhttp3.Call uploadFileAsync(String fileId, UploadFileRequest uploadFileRequest, final ApiCallback<ModelFile> _callback) throws ApiException {

            okhttp3.Call localVarCall = uploadFileValidateBeforeCall(fileId, uploadFileRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
            localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);
            return localVarCall;
            }
        }
