/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.CreateExternalLinkRequest;
import model.CreateFileRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.ExternalLink;
import model.ExternalLinksList;
import model.FilesList;
import model.ModelFile;
import model.UploadFileRequest;
import org.junit.jupiter.api.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for FilesApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running DevicesApiTest")
@Disabled
public class FilesApiTest {
    private FinixClient finixClient;
    private final FilesApi api = new FilesApi();

    @Test
    @BeforeAll
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        assertEquals(true , finixClient!=null);

    }
    /**
     * Create an External Link
     *
     * Create an &#x60;external_link&#x60; resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).  Once created, you can upload the user&#39;s file to the &#x60;external_link&#x60; resource: [Upload files to External Link](#operation/uploadExternalLink)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Create an External Link")
    public void createExternalLinkTest() throws ApiException {
        String fileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        CreateExternalLinkRequest createExternalLinkRequest = CreateExternalLinkRequest.builder()
                .type("UPLOAD")
                .duration(15)
                .build();
        ExternalLink response = finixClient.filesApi.createExternalLink(fileId, createExternalLinkRequest);
        // TODO: test validations
    }

    /**
     * Create a File
     *
     * Before uploading a file, you need to create a &#x60;File&#x60; resource.   Once created, you can [upload](#operations/uploadFile) your file to the new &#x60;File&#x60; resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Create a File")
    public void createFilesTest() throws ApiException {
        CreateFileRequest createFileRequest = CreateFileRequest.builder()
                .displayName("My Drivers License")
                .linkedTo("MU2n7BSovtwYsWYZF6rBnnzk")
                .type("DRIVERS_LICENSE_FRONT")
                .tags(Map.of("key_1", "value_1"))
                .build();
        ModelFile response = finixClient.filesApi.createFiles(createFileRequest);
        // TODO: test validations
    }

    /**
     * Download a file
     *
     * Download a file uploaded to a &#x60;File&#x60; resource. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Download a file")
    public void downloadFileTest() throws ApiException {
        String fileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        String output = null;
        finixClient.filesApi.downloadFile(fileId, output);
        // TODO: test validations
    }

    /**
     * Fetch an External LInk
     *
     * Fetch a previously created &#x60;external_link&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Fetch an External LInk")
    public void getExternalLinkTest() throws ApiException {
        String fileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        String externalLinkId = "EL_n4baDHgeidWcst61qzf1Aq";
        ExternalLink response = finixClient.filesApi.getExternalLink(fileId, externalLinkId);
        // TODO: test validations
    }

    /**
     * Fetch a File
     *
     * Retrieve the details of a &#x60;File&#x60; resource. For more info see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Fetch a File")
    public void getFileTest() throws ApiException {
        String fileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        ModelFile response = finixClient.filesApi.getFile(fileId);
        // TODO: test validations
    }

    /**
     * List All External Links
     *
     * List the previously &#x60;external_links&#x60; for a &#x60;File&#x60;. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#create-an-external-link).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("List All External Links")
    public void listExternalLinkTest() throws ApiException {
        String fileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String id = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        ExternalLinksList response = finixClient.filesApi.listExternalLink(fileId, sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
        // TODO: test validations
    }

    /**
     * List All Files
     *
     * List all the &#x60;File&#x60; resources you&#39;ve created. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-1-create-a-file).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("List All Files")
    public void listFilesTest() throws ApiException {
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String id = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        FilesList response = finixClient.filesApi.listFiles(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
        // TODO: test validations
    }

    /**
     * Upload files Directly
     *
     * Upload files directly with a &#x60;multipart/form-data&#x60; request. For more info see, [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/#step-2-upload-the-file).
     *
     * @throws ApiException if the Api call fails
     */
    /*@Test
    @DisplayName("Upload files Directly")
    public void uploadFileTest() throws ApiException {
        String fileId = "FILE_bJecqoRPasStEPVpvKHtgA";
        String _file = "/Users/Desktop/finix_file.png";
        String contentType = "multipart/form-data";
        Object body = "multipart/form-data";
        ModelFile response = finixClient.filesApi.uploadFile(fileId, _file, contentType, body);
        // TODO: test validations
    }*/

}
