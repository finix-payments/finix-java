/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import model.CreateProcessorRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.Error422InvalidFieldList;
import model.ErrorGeneric;
import model.Processor;
import model.ProcessorsList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessorsApi
 */
@Disabled
public class ProcessorsApiTest {

    private final ProcessorsApi api = new ProcessorsApi();

    /**
     * Create Application Processor
     *
     * Enable a &#x60;Processor&#x60; for an &#x60;Application&#x60;. If created successfully, a 201 status is returned with a location header added to the response which refers to the newly enabled processor. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationProcessorTest() throws ApiException {
        String applicationId = null;
        CreateProcessorRequest createProcessorRequest = null;
        Processor response = api.createApplicationProcessor(applicationId, createProcessorRequest);
        // TODO: test validations
    }

    /**
     * Get Application Processor
     *
     * Get the &#x60;Processor&#x60; by &#x60;Application&#x60; and &#x60;type&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationProcessorTest() throws ApiException {
        String applicationId = null;
        String type = null;
        Processor response = api.getApplicationProcessor(applicationId, type);
        // TODO: test validations
    }

    /**
     * List Application Processors
     *
     * Get all enabled &#x60;Processors&#x60; for an &#x60;Application&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationProcessorsTest() throws ApiException {
        String applicationId = null;
        ProcessorsList response = api.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * Update Application Processor
     *
     * Update the processor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationProcessorTest() throws ApiException {
        String applicationId = null;
        String type = null;
        Object body = null;
        Processor response = api.updateApplicationProcessor(applicationId, type, body);
        // TODO: test validations
    }

}
