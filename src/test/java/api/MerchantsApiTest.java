/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import model.CreateMerchantUnderwritingRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.ErrorGeneric;
import model.Merchant;
import model.MerchantsList;
import model.UpdateMerchantRequest;
import model.Verification;
import model.VerificationForm;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MerchantsApi
 */
@Disabled
public class MerchantsApiTest {

    private final MerchantsApi api = new MerchantsApi();

    /**
     * Create a Merchant
     *
     * Create a &#x60;Merchant&#x60; to start the underwriting process for your merchant. Merchants must be created under an [&#x60;Identity&#x60;](/#tag/Identities).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIdentityMerchantTest() throws ApiException {
        String identityId = null;
        CreateMerchantUnderwritingRequest createMerchantUnderwritingRequest = null;
        Merchant response = api.create(identityId, createMerchantUnderwritingRequest);
        // TODO: test validations
    }

    /**
     * Verify a Merchant
     *
     * Verify a merchant either to reattempt provisioning, or when the merchant&#39;s &#x60;Identity&#x60; was updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantVerificationTest() throws ApiException {
        String merchantId = null;
        VerificationForm verificationForm = null;
        Verification response = api.createMerchantVerification(merchantId, verificationForm);
        // TODO: test validations
    }

    /**
     * Get a Merchant
     *
     * Retrieve the details of a &#x60;Merchant&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantTest() throws ApiException {
        String merchantId = null;
        Merchant response = api.get(merchantId);
        // TODO: test validations
    }

    /**
     * List Application Merchants
     *
     * Return a collection of merchants, if there are no merchants, an empty collection will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationMerchantsTest() throws ApiException {
        String applicationId = null;
        MerchantsList response = api.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * List Identity Merchants
     *
     * Get all merchants associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentityMerchantsTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean sortSorted = null;
        Boolean sortUnsorted = null;
        MerchantsList response = api.listByIdentityId(identityId, limit, offset, pageNumber, pageSize, sortSorted, sortUnsorted);
        // TODO: test validations
    }

    /**
     * List Merchants
     *
     * Retrieve a list of &#x60;Merchants&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantsTest() throws ApiException {
        String id = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        MerchantsList response = api.list(id, createdAtGte, createdAtLte, sort, offset, limit);
        // TODO: test validations
    }

    /**
     * Update a Merchant
     *
     * Update a merchant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMerchantTest() throws ApiException {
        String merchantId = null;
        UpdateMerchantRequest updateMerchantRequest = null;
        Merchant response = api.update(merchantId, updateMerchantRequest);
        // TODO: test validations
    }

}
