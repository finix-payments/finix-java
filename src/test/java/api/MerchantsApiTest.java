/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *//*



package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.CreateMerchantUnderwritingRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.ErrorGeneric;
import model.Merchant;
import model.MerchantsList;
import model.UpdateMerchantRequest;
import model.Verification;
import model.VerificationForm;
import model.VerificationsList;
import org.junit.jupiter.api.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

*/
/**
 * API tests for MerchantsApi
 *//*

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running MerchantsApiTest")
@Disabled
public class MerchantsApiTest {
    private FinixClient finixClient;
    private final MerchantsApi api = new MerchantsApi();
    @Test
    @BeforeAll
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        // System.out.println(finixClient == null);
        assertEquals(true , finixClient!=null);

    }
    */
/**
     * Create a Merchant
     *
     * Create a &#x60;Merchant&#x60; to start the underwriting process for your merchant. Merchants must be created under an [&#x60;Identity&#x60;](#tag/Identities).  &#x60;Merchant&#x60; resources can have three possible &#x60;onboarding_states&#x60;:  1. **PROVISIONING**: The request is pending (the state may change after two minutes)     * &#x60;processing_enabled&#x60;: **False**     * &#x60;settlement_enabled&#x60;: **False**  1. **APPROVED**: The &#x60;Merchant&#x60; has been approved and can begin processing payments     * &#x60;processing_enabled&#x60;: **True**    * &#x60;settlement_enabled&#x60;: **True**  1. **REJECTED**: The &#x60;Merchant&#x60; was rejected by the processor because of invalid information or it failed a regulatory and/or compliance check (e.g. KYC, OFAC, or MATCH)     * &#x60;processing_enabled&#x60;: **False**     * &#x60;settlement_enabled&#x60;: **False**   &gt; Provisioning a Merchant account is an asynchronous request. We recommend creating a Webhook to listen for the state change.
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    @DisplayName("Create a Merchant")
    public void createIdentityMerchantTest() throws ApiException {
        String identityId = "IDpYDM7J9n57q849o9E9yNrG";
        CreateMerchantUnderwritingRequest createMerchantUnderwritingRequest = CreateMerchantUnderwritingRequest.builder()
                .processor("DUMMY_V1")
                .tags(Map.of("key_2", "value_2"))
                .build();
      ///  Merchant response = finixClient.Merchant.create(identityId, createMerchantUnderwritingRequest);
        // TODO: test validations
    }

    */
/**
     * Verify a Merchant
     *
     * Verify a merchant either to reattempt provisioning, or when the merchant&#39;s &#x60;Identity&#x60; was updated.
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    @DisplayName("Verify a Merchant")
    public void createMerchantVerificationTest() throws ApiException {
        String merchantId = "MUucec6fHeaWo3VHYoSkUySM";
        VerificationForm verificationForm = VerificationForm.builder().build();
        Verification response = finixClient.Merchant.createMerchantVerification(merchantId, verificationForm);
        // TODO: test validations
    }

    */
/**
     * Get a Merchant
     *
     * Retrieve the details of a &#x60;Merchant&#x60;.
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    @DisplayName("Get a Merchant")
    public void getMerchantTest() throws ApiException {
        String merchantId = "MUucec6fHeaWo3VHYoSkUySM";
        Merchant response = finixClient.Merchant.get(merchantId);
        // TODO: test validations
    }

    */
/**
     * List Application Merchants
     *
     * Return a collection of merchants, if there are no merchants, an empty collection will be returned. 
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    public void listApplicationMerchantsTest() throws ApiException {
        String applicationId = null;
        MerchantsList response = api.listByApplicationId(applicationId);
        // TODO: test validations
    }

    */
/**
     * List Identity Merchants
     *
     * Get all merchants associated to this identity
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    public void listIdentityMerchantsTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        MerchantsList response = finixClient.Merchant.listByIdentityId(identityId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    */
/**
     * List Merchant Verifications
     *
     * Get list of all the &#x60;Verifications&#x60; in the &#x60;Merchant&#x60; object
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    @DisplayName("List Merchant Verifications")
    public void listMerchantVerificationsTest() throws ApiException {
        String merchantId = "MUucec6fHeaWo3VHYoSkUySM";
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        VerificationsList response = finixClient.Merchant.listByMerchantId(merchantId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    */
/**
     * List Merchants
     *
     * Retrieve a list of &#x60;Merchants&#x60;. 
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    @DisplayName("List Merchants")
    public void listMerchantsTest() throws ApiException {
        String id = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        MerchantsList response = finixClient.Merchant.list(id, createdAtGte, createdAtLte, sort, offset, limit);
        // TODO: test validations
    }

    */
/**
     * Update a Merchant
     *
     * Update a &#x60;Merchant&#x60; to change the information saved or enable Level 2/3 processing.
     *
     * @throws ApiException if the Api call fails
     *//*

    @Test
    public void putMerchantTest() throws ApiException {
        String merchantId = "MUeDVrf2ahuKc9Eg5TeZugvs";
        UpdateMerchantRequest updateMerchantRequest = UpdateMerchantRequest.builder()
                .build();
        Merchant response = finixClient.Merchant.update(merchantId, updateMerchantRequest);
        // TODO: test validations
    }

}
*/
