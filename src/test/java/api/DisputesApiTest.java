/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import model.CreateDisputeEvidenceRequest;
import model.Dispute;
import model.DisputeEvidence;
import model.DisputeEvidenceList;
import model.DisputesList;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DisputesApi
 */
@Disabled
public class DisputesApiTest {

    private final DisputesApi api = new DisputesApi();

    /**
     * Create Dispute Evidence
     *
     * Upload dispute evidence for a dispute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDisputeEvidenceTest() throws ApiException {
        String disputeId = null;
        CreateDisputeEvidenceRequest createDisputeEvidenceRequest = null;
        DisputeEvidence response = api.createDisputeEvidence(disputeId, createDisputeEvidenceRequest);
        // TODO: test validations
    }

    /**
     * Get Dispute
     *
     * Retreive a dispute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDisputeTest() throws ApiException {
        String disputeId = null;
        Dispute response = api.get(disputeId);
        // TODO: test validations
    }

    /**
     * Show Dispute Evidence
     *
     * Get dispute evidence
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDisputeEvidenceTest() throws ApiException {
        String disputeId = null;
        String evidenceId = null;
        DisputeEvidence response = api.getDisputeEvidence(disputeId, evidenceId);
        // TODO: test validations
    }

    /**
     * List Application Disputes
     *
     * Return a collection of disputes, if there are no disputes, an empty collection will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationDisputesTest() throws ApiException {
        String applicationId = null;
        DisputesList response = api.listApplicationDisputes(applicationId);
        // TODO: test validations
    }

    /**
     * List Dispute Evidence
     *
     * Retrieve list of dispute evidence for a dispute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDisputeEvidenceTest() throws ApiException {
        String disputeId = null;
        DisputeEvidenceList response = api.listDisputeEvidenceByDeviceId(disputeId);
        // TODO: test validations
    }

    /**
     * List Disputes
     *
     * Retrieve list of disputes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDisputesTest() throws ApiException {
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String id = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        DisputesList response = api.list(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
        // TODO: test validations
    }

    /**
     * List Identity Disputes
     *
     * All disputes associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentityDisputesTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean sortSorted = null;
        Boolean sortUnsorted = null;
        DisputesList response = api.listByIdentityId(identityId, limit, offset, pageNumber, pageSize, sortSorted, sortUnsorted);
        // TODO: test validations
    }

    /**
     * List Tranfer Disputes
     *
     * Get list of all the disputes in the transfers object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransferDisputesTest() throws ApiException {
        String transferId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean sortSorted = null;
        Boolean sortUnsorted = null;
        DisputesList response = api.listByTransferId(transferId, limit, offset, pageNumber, pageSize, sortSorted, sortUnsorted);
        // TODO: test validations
    }

}
