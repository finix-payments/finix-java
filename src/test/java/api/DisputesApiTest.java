/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.CreateDisputeEvidenceRequest;
import model.Dispute;
import model.DisputeEvidence;
import model.DisputeEvidenceList;
import model.DisputesList;
import org.junit.jupiter.api.*;

import java.io.File;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * API tests for DisputesApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running DisputesApiDisputesApi")
@Disabled
public class DisputesApiTest {

    private final DisputesApi api = new DisputesApi();
    private FinixClient finixClient;
    @Test
    @BeforeAll
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
      //  assertEquals(true , finixClient!=null);
        assertTrue(finixClient!=null);

    }
    /**
     * Create Dispute Evidence
     *
     * Upload dispute evidence for a dispute.
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void createDisputeEvidenceTest() throws ApiException {

      //  finixClient.buildRequestBodyMultipart(Map.of("File:", multipartBody));
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";

        CreateDisputeEvidenceRequest createDisputeEvidenceRequest = CreateDisputeEvidenceRequest.builder()
                ._file( new File("@/Users/Desktop/finix_file.png"))
                .build();
        //finixClient.buildRequestBodyMultipart(Map.of("File:", new File("")));

       // this.finixClient.buildRequestBodyMultipart(Map.of("File:",createDisputeEvidenceRequest));
        //CreateDisputeEvidenceRequest createDisputeEvidenceRequest = new CreateDisputeEvidenceRequest();
     //   DisputeEvidence response = finixClient.Disputes.createDisputeEvidence(disputeId, createDisputeEvidenceRequest);
        // TODO: test validations
    }

    /**
     * Get Dispute
     *
     * Retreive a dispute.
     *
     * @throws ApiException if the Api call fails
     */
  //  @Test
   // @DisplayName("Get Dispute")
    public void getDisputeTest() throws ApiException {
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
        Dispute response = finixClient.Disputes.get(disputeId);

        // TODO: test validations
    }

    /**
     * Show Dispute Evidence
     *
     * Get dispute evidence
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void getDisputeEvidenceTest() throws ApiException {
        String disputeId = null;
        String evidenceId = null;
        DisputeEvidence response = api.getDisputeEvidence(disputeId, evidenceId);
        // TODO: test validations
    }

    /**
     * List Application Disputes
     *
     * Return a collection of disputes, if there are no disputes, an empty collection will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void listApplicationDisputesTest() throws ApiException {
        String applicationId = null;
        DisputesList response = api.listApplicationDisputes(applicationId);
        // TODO: test validations
    }

    /**
     * List Dispute Evidence
     *
     * Retrieve list of dispute evidence for a dispute
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void listDisputeEvidenceTest() throws ApiException {
        String disputeId = null;
        DisputeEvidenceList response = api.listDisputeEvidenceByDeviceId(disputeId);
        // TODO: test validations
    }

    /**
     * List Disputes
     *
     * Retrieve list of disputes.
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void listDisputesTest() throws ApiException {
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String id = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        DisputesList response = api.list(sort, offset, limit, id, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte);
        // TODO: test validations
    }

    /**
     * List Identity Disputes
     *
     * All disputes associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void listIdentityDisputesTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        DisputesList response = api.listByIdentityId(identityId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Tranfer Disputes
     *
     * Get list of all the disputes in the transfers object
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void listTransferDisputesTest() throws ApiException {
        String transferId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        DisputesList response = api.listByTransferId(transferId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

}
