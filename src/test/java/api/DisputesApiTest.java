/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.*;
import org.junit.jupiter.api.*;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * API tests for DisputesApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running DevicesApiTest")
public class DisputesApiTest {
    private FinixClient finixClient;
    private TestInfo testInfo;
    private TestReporter testReporter;
    @BeforeEach
    void init(TestInfo testInfo, TestReporter testReporter){
        this.testInfo =testInfo;
        this.testReporter =testReporter;
        testReporter.publishEntry("Running "+testInfo.getDisplayName()+ " with tag " + testInfo.getTags());
    }

    /**
     * Create a Context Loads
     */
    @Test
    @BeforeAll
    @DisplayName("Finix Client")
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        assertEquals(true , finixClient!=null);
    }  /**
     * Create Dispute Evidence
     *
     * Upload dispute evidence for a &#x60;Dispute&#x60;.  There are four available values that indicate the state of the evidence upload:  * **PENDING**: The evidence file has not yet been submitted to the &#x60;Processor&#x60;. No user action is required. * **SUCCEEDED**: The evidence file has been successfully sent to the &#x60;Processor&#x60;. No further user action is required. * **CANCELED**: The evidence file upload was not completed due to user action. * **FAILED**: An issue occurred. User action is required. Any of the following issues could have occurred:     * There was an error in the system and the user should retry uploading their evidence file.     * There is an issue with the file and the user should retry uploading a different file.     * There is an issue and the user should contact Support. 
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Upload Dispute Evidence")
    public void createDisputeEvidenceTest() throws ApiException {
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
       CreateDisputeEvidenceRequest createDisputeEvidenceRequest = CreateDisputeEvidenceRequest.builder()
                ._file(new File("finix_file.png"))
                .build();
        DisputeEvidence response = finixClient.Disputes.createDisputeEvidence(disputeId, createDisputeEvidenceRequest);
        assertEquals("DIs7yQRkHDdMYhurzYz72SFk",response.getDispute(),()->" Should return " + "DIs7yQRkHDdMYhurzYz72SFk" + " but returns " + response.getDispute());
    }

    /**
     * Get Dispute
     *
     * Retrieve the details of a previously created &#x60;Dispute&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Fetch a Dispute")
    public void getDisputeTest() throws ApiException {
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
        Dispute response = finixClient.Disputes.get(disputeId);
        assertEquals("DIs7yQRkHDdMYhurzYz72SFk",response.getId(),()->" Should return " + "DIs7yQRkHDdMYhurzYz72SFk" + " but returns " + response.getId());
    }

    /**
     * Fetch Dispute Evidence File
     *
     * Retrieve the details of a &#x60;Dispute&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Fetch Dispute Evidence File")
    public void getDisputeEvidenceTest() throws ApiException {
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
        String evidenceId = "DFnA9eVoYxRnxxLKzgcGGxYL";
        DisputeEvidence response = finixClient.Disputes.getDisputeEvidence(disputeId, evidenceId);
        assertEquals("DFnA9eVoYxRnxxLKzgcGGxYL",response.getId(),()->" Should return " + "DFnA9eVoYxRnxxLKzgcGGxYL" + " but returns " + response.getId());
    }


    /**
     * List Dispute Evidence
     *
     * Retrieve a list of dispute evidence for a &#x60;Dispute&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("List Dispute Evidence")
    public void listDisputeEvidenceTest() throws ApiException {
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
        Long limit = 20L;
        DisputeEvidenceList response = finixClient.Disputes.listDisputeEvidenceByDisputeId(disputeId, ListDisputeEvidenceQueryParams.builder()
                .limit(limit)
                .build());
        assertTrue(response.getPage() != null);
        assertTrue(response.getPage().getNextCursor() != null && !response.getPage().getNextCursor().isEmpty());
        assertEquals(20,response.getPage().getLimit().intValue(),()->" Should return " + "20" + " but returns " + response.getPage().getLimit().intValue());
    }

    /**
     * List Disputes
     *
     * Retrieve a list of &#x60;Disputes&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("List All Disputes")
    public void listDisputesTest() throws ApiException {
        String sort = null;
        Long offset = null;
        Long limit = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;

        DisputesList response = finixClient.Disputes.list(ListDisputesQueryParams.builder()
                .sort(sort)
                .offset(offset)
                .limit(limit)
                .createdAtGte(createdAtGte)
                .createdAtLte(createdAtLte)
                .updatedAtGte(updatedAtGte)
                .updatedAtLte(updatedAtLte)
                .build());
        assertEquals(20,response.getPage().getLimit().intValue(),()->" Should return " + "20" + " but returns " + response.getPage().getLimit().intValue());
    }

    /**
     * Fetch Dispute Adjustment Transfers
     *
     * List the adjustment &#x60;Transfers&#x60; for a &#x60;Dispute&#x60;. Depending on the stage of the &#x60;Dispute&#x60;, different adjustment &#x60;Transfer&#x60; subtypes can be applied.  There are four available subtypes for adjustment &#x60;Transfers&#x60; in &#x60;Disputes&#x60;: &lt;ul&gt;&lt;li&gt;&lt;strong&gt;PLATFORM\\_CREDIT&lt;/strong&gt;&lt;li&gt;&lt;strong&gt;MERCHANT\\_DEBIT&lt;/strong&gt;&lt;li&gt;&lt;strong&gt;MERCHANT\\_CREDIT&lt;/strong&gt;&lt;li&gt;&lt;strong&gt;PLATFORM\\_DEBIT&lt;/strong&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("List Dispute Adjustment Transfers")
    public void listDisputesAdjustmentsTest() throws ApiException {
        String disputeId = "DIs7yQRkHDdMYhurzYz72SFk";
        Long limit = null;
        String nextCursor = null;

        AdjustmentTransfersList response = finixClient.Disputes.listDisputesAdjustments(disputeId,ListDisputesAdjustmentsQueryParams.builder()
                .limit(limit)
                .afterCursor(nextCursor)
                .build());
        assertTrue(response.getPage() != null);
        assertTrue(response.getPage().getNextCursor() != null && !response.getPage().getNextCursor().isEmpty());
   }
}
