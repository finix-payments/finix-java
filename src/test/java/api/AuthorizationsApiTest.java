/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.*;
import org.junit.jupiter.api.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for AuthorizationsApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running AuthorizationsApi")
@Disabled
public class AuthorizationsApiTest {
    private FinixClient finixClient;
    private final AuthorizationsApi api = new AuthorizationsApi();
    @Test
    @BeforeAll
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        assertEquals(true , finixClient!=null);

    }

    /**
     * Create an Authorization
     *
     * Create an authorization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Create an authorization")
    public void createAuthorizationTest() throws ApiException {
        /* '
	{
	    "source": "PIe2YvpcjvoVJ6PzoRPBK137",
	    "merchant": "MUeDVrf2ahuKc9Eg5TeZugvs",
	    "tags": {
	        "order_number": "21DFASJSAKAS"
	    },
	    "currency": "USD",
	    "amount": 100,
	    "processor": "DUMMY_V1"
	}'*/
        CreateAuthorizationRequest createAuthorizationRequest = CreateAuthorizationRequest.builder()
                .source("PIe2YvpcjvoVJ6PzoRPBK137")
                .merchant("MUeDVrf2ahuKc9Eg5TeZugvs")
                .tags(Map.of("order_number", "21DFASJSAKAS"))
                .currency(Currency.USD)
                .amount(BigDecimal.valueOf(100))
                .processor(CreateAuthorizationRequest.ProcessorEnum.DUMMY_V1)
                .build();
       Authorization response = finixClient.Authorization.create(createAuthorizationRequest);
        // TODO: test validations
    }

    /**
     * Get an Authorization
     *
     * Retrieve an authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Get an Authorization")
    public void getAuthorizationTest() throws ApiException {
        String authorizationId = "AUvAZfiEH7irXZf49P7o8P1r";
        Authorization response = finixClient.Authorization.get(authorizationId);
    }

    /**
     * List Application Authorizations
     *
     * Return a collection of authorizations, if there are no authorizations, an empty collection will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationAuthorizationsTest() throws ApiException {
        String applicationId = "APgPDQrLD52TYvqazjHJJchM";

        AuthorizationsList response = finixClient.Authorization.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * List authorizations
     *
     * Retrieve a list of authorizations. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAuthorizationsTest() throws ApiException {
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String idempotencyId = null;
        String state = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        String isVoid = null;
        Integer amount = null;
        Integer amountLt = null;
        Integer amountGt = null;
        Integer amountLte = null;
        Integer amountGte = null;
        String traceId = null;
        String instrumentBin = null;
        String instrumentAccountLast4 = null;
        String instrumentBrandType = null;
        String merchantIdentityId = null;
        String merchantIdentityName = null;
        String instrumentName = null;
        String instrumentType = null;
        String merchantId = null;
        String merchantMid = null;
        String instrumentCardLast4 = null;
        String merchantProcessorId = null;
        String type = null;
        AuthorizationsList response = finixClient.Authorization.list(sort, offset, limit, idempotencyId, state, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, isVoid, amount, amountLt, amountGt, amountLte, amountGte, traceId, instrumentBin, instrumentAccountLast4, instrumentBrandType, merchantIdentityId, merchantIdentityName, instrumentName, instrumentType, merchantId, merchantMid, instrumentCardLast4, merchantProcessorId, type);
        // TODO: test validations
    }

    /**
     * List Identity Authorizations
     *
     * All authorizations associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void listIdentityAuthorizationsTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        AuthorizationsList response = api.listByIdentityId(identityId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Payment Instrument Authorizations
     *
     * Get list of all the transfers in the payment instrument object
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void listPaymentInstrumentAuthorizationsTest() throws ApiException {
        String paymentInstrumentId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        AuthorizationsList response = api.listByPaymentInstrumentId(paymentInstrumentId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Update an Authorization
     *
     * Update an authorization
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void putAuthorizationTest() throws ApiException {
        String authorizationId = null;
        UpdateAuthorizationRequest updateAuthorizationRequest = null;
        Authorization response = api.update(authorizationId, updateAuthorizationRequest);
        // TODO: test validations
    }

}
