/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.*;
import org.junit.jupiter.api.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for TransfersApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running TransferApi")

public class TransfersApiTest {
    private FinixClient finixClient;
    private final TransfersApi api = new TransfersApi();
    private TestInfo testInfo;
    private TestReporter testReporter;
    @BeforeEach
    void init(TestInfo testInfo, TestReporter testReporter){
        this.testInfo =testInfo;
        this.testReporter =testReporter;
        testReporter.publishEntry("Running "+testInfo.getDisplayName()+ " with tag " + testInfo.getTags());
    }
    @Test
    @BeforeAll
    @DisplayName("Finix Client")
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        //  System.out.println(finixClient == null);
        assertEquals(true , finixClient!=null);

    }
    /**
     * Create a Transfer
     *
     * Create a &#x60;Transfer&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Create a Transfer")
    public void createTransferTest() throws ApiException {
        CreateTransferRequest createTransferRequest = CreateTransferRequest.builder()
                .source("PIe2YvpcjvoVJ6PzoRPBK137")
                .merchant("MUeDVrf2ahuKc9Eg5TeZugvs")
                .tags(Map.of("order_number", "21DFASJSAKAS"))
                .currency(Currency.USD)
                .amount(100L)
                .processor("DUMMY_V1")
                .build();
        Transfer transfer = finixClient.Transfers.create(createTransferRequest);
        assertEquals("PIe2YvpcjvoVJ6PzoRPBK137",transfer.getSource(),()->"Should return " + "PIe2YvpcjvoVJ6PzoRPBK137" + " but returns " + transfer.getSource());
        //System.out.println(transfer.toJson());
    }
    @Test
    @DisplayName("Create a Sale")
    public void createSaleTest() throws ApiException{
        CreateTransferRequest createTransferRequest = CreateTransferRequest.builder()
                .merchant("MUeDVrf2ahuKc9Eg5TeZugvs")
                .currency(Currency.USD)
                .amount(Long.valueOf(662154))
                .source("PIe2YvpcjvoVJ6PzoRPBK137")
                .tags(Map.of( "test", "sale"))
                .build();
        Transfer transfer = finixClient.Transfers.create(createTransferRequest);
        assertEquals("PIe2YvpcjvoVJ6PzoRPBK137",transfer.getSource(),()->"Should return " + "PIe2YvpcjvoVJ6PzoRPBK137" + " but returns " + transfer.getSource());
    }

    @Test
    @DisplayName("Create a 3D Secure Sale")
    public void create3DSecureSaleTest() throws ApiException{
        CreateAuthorizationRequest createAuthorizationRequest = CreateAuthorizationRequest.builder()
                .merchant("MUeDVrf2ahuKc9Eg5TeZugvs")
                ._3dSecureAuthentication(CreateAuthorizationRequest3dSecureAuthentication.builder()
                        .electronicCommerceIndicator("AUTHENTICATED")
                        .cardholderAuthentication("BwABBJQ1AgAAAAAgJDUCAAAAAAA")
                        .transactionId("EaOMucALHQqLAEGAgk")
                        .build())
                .source("PIe2YvpcjvoVJ6PzoRPBK137")
                .tags(Map.of("test", "sale"))
                .currency(Currency.USD)
                .amount(92169L)
                .build();
        /*CreateTransferRequest createTransferRequest = CreateTransferRequest.builder()
                .merchant("MUeDVrf2ahuKc9Eg5TeZugvs")
                .currency(Currency.USD)
                .amount(Long.valueOf(662154))
                .source("PIe2YvpcjvoVJ6PzoRPBK137")
                .tags(Map.of( "test", "sale"))
                .build();
        Transfer transfer = finixClient.Transfers.create(createAuthorizationRequest);*/
        // assertEquals("PIe2YvpcjvoVJ6PzoRPBK137",transfer.getSource(),()->"Should return " + "PIe2YvpcjvoVJ6PzoRPBK137" + " but returns " + transfer.getSource());
        //System.out.println(transfer.getMerchantIdentity());
    }
    /**
     * Refund or Reverse a Transfer
     *
     * Reverse a transfer with a &#x60;type&#x60; of **DEBIT**. This reversal creates a new &#x60;Transfer&#x60; resource with a &#x60;type&#x60; of **REVERSAL**.   The refund can get delivered in most cases without the physical card. The card only needs to be swiped (to receive the refund) when:  - The payment type is **DEBIT**, and the transaction is no longer in the batch. - The payment type is **CREDIT**, and the transaction is no longer in the batch and is older than 45 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Refund or Reverse a Transfer")
    public void createTransferReversalTest() throws ApiException {
        String transferId = "TRacB6Q6GcW6yvFUKawSnMEP";
        CreateReversalRequest createReversalRequest = CreateReversalRequest.builder()
                .refundAmount(Integer.valueOf(100))
                .tags(Map.of("test" , "refund"))
                .build();
        Transfer transfer = finixClient.Transfers.createTransferReversal(transferId, createReversalRequest);
        assertEquals(Long.valueOf(100),transfer.getAmount(),()->"Should return " + "100" + " but returns " + transfer.getAmount());
        // System.out.println(transfer.getState());
        // TODO: test validations
    }

    /**
     * Get a Transfer
     *
     * Retrieve a &#x60;transfer&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Get a Transfer")
    public void getTest() throws ApiException {
        Transfer transfer = finixClient.Transfers.get("TRvtThmhZtk56z6dtCt8hUDR");
        assertEquals("TRvtThmhZtk56z6dtCt8hUDR", transfer.getId(),()-> "Should return "+"TRvtThmhZtk56z6dtCt8hUDR" + " but returns " +transfer.getId());
    }

    /**
     * List Transfers for an Application
     *
     * Get all transfers objects within application
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void listApplicationTransfersTest() throws ApiException {
        String applicationId = null;
        TransfersList response = finixClient.Transfers.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * List Identity Transfers
     *
     * All transfers associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void listIdentityTransfersTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        TransfersList response = finixClient.Transfers.listByIdentityId(identityId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Merchant Transfers
     *
     * Get list of all the tranfers in the merchant object
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void listMerchantTransfersTest() throws ApiException {
        String merchantId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean readyToSettle = null;
        TransfersList response = finixClient.Transfers.listByMerchantId(merchantId, limit, offset, pageNumber, pageSize, readyToSettle);
        // TODO: test validations
    }

    /**
     * List Payment Instrument Transfers
     *
     * Get list of all the transfers in the payment instrument object
     *
     * @throws ApiException if the Api call fails
     */
   // @Test
    public void listPaymentInstrumentTransfersTest() throws ApiException {
        String paymentInstrumentId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        TransfersList response = finixClient.Transfers.listByPaymentInstrumentId(paymentInstrumentId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Reversals on a Transfer
     *
     * Retrieve a list of reversals for a &#x60;Transfer&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    //@Test
    public void listTransferReversalsTest() throws ApiException {
        String transferId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        TransfersList response = finixClient.Transfers.listTransfersReversals(transferId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Transfers
     *
     * Retrieve a list of &#x60;transfers&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("List Transfers")
    public void listTransfersTest() throws ApiException {
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        Integer amount = null;
        Integer amountGte = null;
        Integer amountGt = null;
        Integer amountLte = null;
        Integer amountLt = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String idempotencyId = null;
        String id = null;
        String state = null;
        String readyToSettleAtGte = null;
        String readyToSettleAtLte = null;
        Integer statementDescriptor = null;
        String traceId = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        String instrumentBin = null;
        String instrumentAccountLast4 = null;
        String instrumentBrandType = null;
        String merchantIdentityId = null;
        String merchantIdentityName = null;
        String instrumentName = null;
        String instrumentType = null;
        String merchantId = null;
        String merchantMid = null;
        String instrumentCardLast4 = null;
        String merchantProcessorId = null;
        String type = null;
        TransfersList transfersList = finixClient.Transfers.list(sort, offset, limit, amount, amountGte, amountGt, amountLte, amountLt, createdAtGte, createdAtLte, idempotencyId, id, state, readyToSettleAtGte, readyToSettleAtLte, statementDescriptor, traceId, updatedAtGte, updatedAtLte, instrumentBin, instrumentAccountLast4, instrumentBrandType, merchantIdentityId, merchantIdentityName, instrumentName, instrumentType, merchantId, merchantMid, instrumentCardLast4, merchantProcessorId, type);
        assertEquals(20,transfersList.getPage().getLimit(),()->"Should return " + "20" + " but returns " + transfersList.getPage().getLimit());
}

    /**
     * Update a Transfer
     *
     * Update a &#x60;Transfer&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Update a Transfer")
    public void updateTest() throws ApiException {
        String transferId = "TRvtThmhZtk56z6dtCt8hUDR";
        UpdateTransferRequest updateTransferRequest = UpdateTransferRequest.builder()
                .tags(Map.of("order_number", "12121212"))
                .build();
        Transfer transfer = finixClient.Transfers.update(transferId, updateTransferRequest);
        assertEquals("TRvtThmhZtk56z6dtCt8hUDR",transfer.getId(),()->"Should return " + "TRvtThmhZtk56z6dtCt8hUDR" + " but returns " + transfer.getId());

    }

}
