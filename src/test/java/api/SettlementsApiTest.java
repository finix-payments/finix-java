/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import model.CreateSettlementRequest;
import model.Error401Unauthorized;
import model.Error403ForbiddenList;
import model.Error404NotFoundList;
import model.Error406NotAcceptable;
import model.Error422InvalidFieldList;
import model.ErrorGeneric;
import model.Settlement;
import model.SettlementsList;
import model.TransfersList;
import model.UpdateSettlementRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettlementsApi
 */
@Disabled
public class SettlementsApiTest {

    private final SettlementsApi api = new SettlementsApi();

    /**
     * Create Settlement on Identity
     *
     * Create a settlement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIdentitySettlementTest() throws ApiException {
        String identityId = null;
        Object body = null;
        Settlement response = api.create(identityId, body);
        // TODO: test validations
    }

    /**
     * Create a Batch Settlement
     *
     * Create a batch &#x60;Settlement&#x60;. A settlement is a collection of **SUCCEEDED** &#x60;Transfers&#x60; that are ready to be paid out to a merchant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSettlementTest() throws ApiException {
        CreateSettlementRequest createSettlementRequest = null;
        Settlement response = api.create(createSettlementRequest);
        // TODO: test validations
    }

    /**
     * Get a Settlement
     *
     * Retreive the details of a settlement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementTest() throws ApiException {
        String settlementId = null;
        Settlement response = api.get(settlementId);
        // TODO: test validations
    }

    /**
     * List Settlement Funding Transfers
     *
     * List the funding transfers for a settlement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementFundingTransfersTest() throws ApiException {
        String settlementId = null;
        TransfersList response = api.listFundingTransfers(settlementId);
        // TODO: test validations
    }

    /**
     * List Settlements for an Application
     *
     * Return a collection of settlements, if there are no settlements, an empty collection will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationSettlementsTest() throws ApiException {
        String applicationId = null;
        SettlementsList response = api.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * List Identity Settlements
     *
     * Get all settlements associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentitySettlementsTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean sortSorted = null;
        Boolean sortUnsorted = null;
        SettlementsList response = api.listByIdentityId(identityId, limit, offset, pageNumber, pageSize, sortSorted, sortUnsorted);
        // TODO: test validations
    }

    /**
     * List Settlements
     *
     * Retrieve a list of settlements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementsTest() throws ApiException {
        Integer amount = null;
        Integer amountLt = null;
        Integer amountGt = null;
        Integer amountLte = null;
        Integer amountGte = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        String id = null;
        SettlementsList response = api.list(amount, amountLt, amountGt, amountLte, amountGte, createdAtGte, createdAtLte, updatedAtGte, updatedAtLte, id);
        // TODO: test validations
    }

    /**
     * Update a Settlement
     *
     * Update a settlement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSettlementTest() throws ApiException {
        String settlementId = null;
        UpdateSettlementRequest updateSettlementRequest = null;
        Settlement response = api.update(settlementId, updateSettlementRequest);
        // TODO: test validations
    }

    /**
     * Remolve Settlement Transfers
     *
     * Remove a transfer from a settlement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSettlementTransfersTest() throws ApiException {
        String settlementId = null;
        api.removeTransfersFromSettlement(settlementId);
        // TODO: test validations
    }

}
