/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.*;
import org.junit.jupiter.api.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for PaymentInstrumentsApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running PaymentInstrumentsApiTest")
public class PaymentInstrumentsApiTest {
    private FinixClient finixClient;
    private TestInfo testInfo;
    private TestReporter testReporter;
    @BeforeEach
    void init(TestInfo testInfo, TestReporter testReporter){
        this.testInfo =testInfo;
        this.testReporter =testReporter;
        testReporter.publishEntry("Running "+testInfo.getDisplayName()+ " with tag " + testInfo.getTags());
    }
    /**
     * Create a Context Loads
     */
    @Test
    @BeforeAll
    @DisplayName("Finix Client")
    void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        assertEquals(true , finixClient!=null);

    }
    /**
     * Create an Apple Pay Session
     *
     * Create an &#x60;apple_pay_session&#x60; to process Apple Pay transactions on the web.  To create an Apple Pay Session, pass a &#x60;validation_url&#x60; while creating an &#x60;apple_pay_sessions&#x60; resource. Finix returns a &#x60;merchantSession&#x60; object which you can use to create a payment. For more information, see [Apple Pay](guides/payments/alternative-payment-methods/apple-pay/). 
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    //@Test
    public void createApplePaySessionTest() throws ApiException {
        ApplePaySessionRequest applePaySessionRequest = ApplePaySessionRequest.builder()
                .displayName("Finix Test Merchant")
                .domain("www.finixtestmerchant.com")
                .merchantIdentity("IDmULj61C8ke6Y7qQiKENJ7")
                .validationUrl("https://apple-pay-gateway-cert.apple.com/paymentservices/paymentSession")
                .build();

        ApplePaySession response = finixClient.PaymentInstrument.createApplePaySession(applePaySessionRequest);
        // TODO: test validations
    }

    /**
     * Create a Payment Instrument
     *
     * Create a &#x60;Payment Instrument&#x60; resource using a card or bank account.  To accept payment detail, review our guide on how to [tokenize cards using hosted fields](/guides/payments/tokenization-with-hosted-fields).
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Create a Payment Instrument")
    public void createPaymentInstrumentTest() throws ApiException, IOException {
        Map<String,String> localMap = new HashMap<>();
        localMap.put("card_name", "Business Card");
        CreatePaymentInstrumentRequest createPaymentInstrumentRequest =  CreatePaymentInstrumentRequest.builder()
                .name("Amy White")
                .expirationYear(2029l)
                .tags(localMap)
                .number("4895142232120006")
                .expirationMonth(12l)
                .address(CreatePaymentInstrumentRequestAddress.builder()
                        .city("San Francisco")
                        .region("CA")
                        .postalCode("94404")
                        .line1("900 Metro Center Blv")
                        .country("USA")
                        .build())
                .securityCode("022")
                .type(CreatePaymentInstrumentRequest.TypeEnum.PAYMENT_CARD)
                .identity("IDgWxBhfGYLLdkhxx2ddYf9K")
                .build();
        PaymentInstrument response = finixClient.PaymentInstrument.create(createPaymentInstrumentRequest);
        assertEquals("APgPDQrLD52TYvqazjHJJchM",response.getApplication(),()->" Should return " + "APgPDQrLD52TYvqazjHJJchM" + " but returns " + response.getApplication());

    }
    /**
     * Create a Bank Account
     */
    @Test
    @DisplayName("Create a Bank Account")
    public void createBankAccount() throws ApiException{
        Map<String,String> localMap = new HashMap<>();
        localMap.put("Bank Account", "Company Account");
        CreatePaymentInstrumentRequest createPaymentInstrumentRequest =  CreatePaymentInstrumentRequest.builder()
                .accountType(CreatePaymentInstrumentRequest.AccountTypeEnum.CHECKING)
                .name("Alice")
                .tags(localMap)
                .country("USA")
                .bankCode("123123123")
                .accountNumber("123123123")
                .type(CreatePaymentInstrumentRequest.TypeEnum.BANK_ACCOUNT)
                .identity("IDpYDM7J9n57q849o9E9yNrG")
                .build();
        PaymentInstrument response =  finixClient.PaymentInstrument.create(createPaymentInstrumentRequest);
        assertEquals("APgPDQrLD52TYvqazjHJJchM",response.getApplication(),()->" Should return " + "APgPDQrLD52TYvqazjHJJchM" + " but returns " + response.getApplication());
    }

    /**
     * Create Instrument Updates
     *
     * To update the card details of your customers, create an &#x60;instrument_updates&#x60; resource. Include the &#x60;Payment Instrument&#x60; IDs you want to update in a CSV. For more info, see the guide on using our [Account Updater](//payments/account-updater/).
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    //@Test
    public void createPaymentInstrumentUpdateTest() throws ApiException {
        CreateInstrumentUpdatesRequest createInstrumentUpdatesRequest = null;

        InstrumentUpdates response = finixClient.PaymentInstrument.createPaymentInstrumentUpdate(createInstrumentUpdatesRequest);
        // TODO: test validations
    }

    /**
     * Verify a Payment Instrument
     *
     * Verify a &#x60;Payment Instrument&#x60; to determine if it&#39;s elligable for Push To Card transactions.   &gt; Only verify &#x60;Payment Instruments&#x60; for [Push To Card](/guides/push-to-card) customers.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Payment instrument verification")
    public void createPaymentInstrumentVerificationTest() throws ApiException {
        String paymentInstrumentId = "PIe2YvpcjvoVJ6PzoRPBK137";
        VerificationForm verificationForm = VerificationForm.builder()
                .processor("DUMMY_V1")
                .build();
        Verification response = finixClient.PaymentInstrument.createPaymentInstrumentVerification(paymentInstrumentId, verificationForm);

    }

    /**
     * Fetch an Instrument Update
     *
     * Fetch a specific &#x60;instrument_update&#x60; from an &#x60;instrument_updates&#x60; resource. For more information, see the guide on using our [Account Updater](/guides/payments/account-updater).
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    //@Test
    public void getInstrumentUpdateTest() throws ApiException {
        String instrumentUpdatesId = null;

        InstrumentUpdates response = finixClient.PaymentInstrument.getInstrumentUpdate(instrumentUpdatesId);
        // TODO: test validations
    }

    /**
     * Download Instrument Updates
     *
     * Fetch a previously created &#x60;instrument_updates&#x60; resource as a CSV.   To fetch the &#x60;instrument_updates&#x60; resource in JSON, add &#x60;?format&#x3D;json&#x60; to the request endpoint.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Fetch an Instrument Update")
    public void getInstrumentUpdatesTest() throws ApiException {
        String instrumentUpdatesId = "IUp9oSWhWUF31DPrJ8CojQeQ";
        finixClient.PaymentInstrument.getInstrumentUpdates(instrumentUpdatesId);

    }

    /**
     * Get a Payment Instrument
     *
     * Retrieve the details of a &#x60;Payment Instrument&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Fetch a Bank Account")
    public void getPaymentInstrumentTest() throws ApiException {
        String paymentInstrumentId = "PI8sdzepdapDehPWKFTcre1m";
        PaymentInstrument response = finixClient.PaymentInstrument.get(paymentInstrumentId);
        assertEquals("APgPDQrLD52TYvqazjHJJchM",response.getApplication(),()->" Should return " + "APgPDQrLD52TYvqazjHJJchM" + " but returns " + response.getApplication());

    }

    /**
     * Fetch a Payment Card
     *
     * Retrieve the details of a &#x60;Payment Instrument&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Fetch a Payment Card")
    public void getPaymentInstrumentCardTest() throws ApiException {
        String paymentInstrumentId = "PIe2YvpcjvoVJ6PzoRPBK137";
        PaymentInstrument response = finixClient.PaymentInstrument.get(paymentInstrumentId);
        assertEquals("APgPDQrLD52TYvqazjHJJchM",response.getApplication(),()->" Should return " + "APgPDQrLD52TYvqazjHJJchM" + " but returns " + response.getApplication());
    }

    /**
     * Payment Instruments
     *
     * Get all paymentInstruments of an application.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
   // @Test
    public void listApplicationPaymentInstrumentsTest() throws ApiException {
        String applicationId = null;

        PaymentInstrumentsList response = finixClient.PaymentInstrument.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * List Identity Payment Instruments
     *
     * Get all payment instruments associated to this identity
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
   // @Test
    public void listIdentityPaymentInstrumentsTest() throws ApiException {
        String identityId = null;
        Long limit = null;
        Long offset = null;
        Long pageNumber = null;
        Long pageSize = null;

        PaymentInstrumentsList response = finixClient.PaymentInstrument.listByIdentityId(identityId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Payment Instrument Updates
     *
     * List the updates on a &#x60;Payment Instrument&#x60;.  When using the [account updater](/guides/payments/account-updater), &#x60;Payment Instrument&#x60; details that are updated are represented by an &#x60;Update&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
   // @Test
    public void listPaymentInstrumentUpdatesTest() throws ApiException {
        String paymentInstrumentId = null;
        Long limit = null;
        Long offset = null;
        Long pageNumber = null;
        Long pageSize = null;

        PaymentInstrumentUpdatesList response = finixClient.PaymentInstrument.listUpdatesByPaymentInstrumentId(paymentInstrumentId, ListPaymentInstrumentUpdatesQueryParams.builder()
                .limit(limit)
                .offset(offset)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .build());
        // TODO: test validations
    }

    /**
     * List Payment Instruments
     *
     * Retrieve a list of &#x60;Payment Instruments&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("List All Payment Instruments")
    public void listPaymentInstrumentsTest() throws ApiException {
        Long limit = null;
        String afterCursor = null;
        String accountLast4 = null;
        String accountRoutingNumber = null;
        String application = null;
        String bin = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String expirationMonth = null;
        String expirationYear = null;
        String lastFour = null;
        String name = null;
        String ownerIdentityId = null;
        String type = null;
        String beforeCursor = null;

        PaymentInstrumentsList response = finixClient.PaymentInstrument.list(ListPaymentInstrumentsQueryParams.builder()
                .limit(limit)
                .afterCursor(afterCursor)
                .accountLast4(accountLast4)
                .accountRoutingNumber(accountRoutingNumber)
                .application(application)
                .bin(bin)
                .createdAtGte(createdAtGte)
                .createdAtLte(createdAtLte)
                .expirationMonth(expirationMonth)
                .expirationYear(expirationYear)
                .lastFour(lastFour)
                .name(name)
                .ownerIdentityId(ownerIdentityId)
                .type(type)
                .beforeCursor(beforeCursor)
                .build());
        assertEquals("20",response.getPage().getLimit().toString(),()->" Should return " + "20" + " but returns " + response.getPage().getLimit());
    }

    /**
     * List Transfer Payment Instruments
     *
     * Get list of all the payment instruments in the transfers object
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    //@Test
    public void listTransferPaymentInstrumentsTest() throws ApiException {
        String transferId = null;
        Long limit = null;
        Long offset = null;
        Long pageNumber = null;
        Long pageSize = null;

        PaymentInstrumentsList response = finixClient.PaymentInstrument.listByTransferId(transferId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Update a Payment Instrument
     *
     * Update a &#x60;Payment Instrument&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Update a Payment Instrument")
    public void putPaymentInstrumentTest() throws ApiException, IOException {
        String paymentInstrumentId = "IUp9oSWhWUF31DPrJ8CojQeQ";
        File file = new File("Finix-Logo.jpg");
        //String request = "{ merchant_id: MUucec6fHeaWo3VHYoSkUySM,  idempotency_id:123xyz testing }";
        CreateInstrumentUpdatesRequest createInstrumentUpdates = CreateInstrumentUpdatesRequest.builder()
                ._file(file)
                .request("{\"merchant\":\"MUucec6fHeaWo3VHYoSkUySM\"}")
                .build();
        InstrumentUpdates response = finixClient.PaymentInstrument.createPaymentInstrumentUpdate(createInstrumentUpdates);
        assertEquals("MUucec6fHeaWo3VHYoSkUySM",response.getMerchant(),()->" Should return " + "MUucec6fHeaWo3VHYoSkUySM" + " but returns " + response.getMerchant());

    }

}
