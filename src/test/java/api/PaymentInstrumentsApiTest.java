/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.*;
import okhttp3.Request;
import org.junit.jupiter.api.*;
import model.PaymentInstrument;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for PaymentInstrumentsApi
 */
@Disabled
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class PaymentInstrumentsApiTest {
    private FinixClient finixClient;
    private final PaymentInstrumentsApi api = new PaymentInstrumentsApi();

    @Test
    @BeforeAll
     void contextLoads() {
        finixClient= new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
        //  System.out.println(finixClient == null);
        assertEquals(true , finixClient!=null);

    }
    /**
     * Create a Payment Instrument
     *
     * Create a payment instrument
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @DisplayName("Create a Bank Account")
    public void createPaymentInstrumentTest() throws ApiException {
        /* "account_type": "SAVINGS",
	    "name": "Alice",
	    "tags": {
	        "Bank Account": "Company Account"
	    },
	    "country": "USA",
	    "bank_code": "123123123",
	    "account_number": "123123123",
	    "type": "BANK_ACCOUNT",
	    "identity": "IDpYDM7J9n57q849o9E9yNrG"*/
        FinixClient finixClient = new FinixClient("USsRhsHYZGBPnQw8CByJyEQW","8a14c2f9-d94b-4c72-8f5c-a62908e5b30e", Environment.SANDBOX);
      /*  CreatePaymentInstrumentRequest createPaymentInstrumentRequest = CreatePaymentInstrumentRequest
                .builder()
                .accountType(PaymentInstrument.AccountTypeEnum.SAVINGS)
                .name("Alice")
                .tags(Map.of("Bank Account", "Company Account"))
                .country(Country.USA)
                .bankCode("123123123")
                .maskedAccountNumber("123123123")
                .type(PaymentInstrument.TypeEnum.BANK_ACCOUNT)
                .identity("IDpYDM7J9n57q849o9E9yNrG")
                .build();
    */
        CreatePaymentInstrumentRequest createPaymentInstrumentRequest = CreatePaymentInstrumentRequest
                .builder()
                .type(CreatePaymentInstrumentRequest.TypeEnum.PAYMENT_CARD)
                .build();
      //  PaymentInstrument response = api.create(createPaymentInstrumentRequest);
        // TODO: test validations
    }

    /**
     * Get a Payment Instrument
     *
     * Retrieve the details of a payment instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInstrumentTest() throws ApiException {
        String paymentInstrumentId = null;
        PaymentInstrument response = api.get(paymentInstrumentId);
        // TODO: test validations
    }

    /**
     * Payment Instruments
     *
     * Get all paymentInstruments of an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationPaymentInstrumentsTest() throws ApiException {
        String applicationId = null;
        PaymentInstrumentsList response = api.listByApplicationId(applicationId);
        // TODO: test validations
    }

    /**
     * List Identity Payment Instruments
     *
     * Get all payment instruments associated to this identity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentityPaymentInstrumentsTest() throws ApiException {
        String identityId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        PaymentInstrumentsList response = api.listByIdentityId(identityId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Payment Instrument Updates
     *
     * List the updates on a &#x60;Payment Instrument&#x60;.  When using [account updater](/guides/account_updater), payment instrument details that are updated are represented by an &#x60;update&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentInstrumentUpdatesTest() throws ApiException {
        String paymentInstrumentId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        PaymentInstrumentUpdatesList response = api.listUpdatesByPaymentInstrumentId(paymentInstrumentId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List Payment Instruments
     *
     * Retrieve a list of payment instruments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentInstrumentsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        String accountLast4 = null;
        String accountRoutingNumber = null;
        String application = null;
        String bin = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String expirationMonth = null;
        String expirationYear = null;
        String lastFour = null;
        String name = null;
        String ownerIdentityId = null;
        String type = null;
        PaymentInstrumentsList response = api.list(limit, offset, pageNumber, pageSize, accountLast4, accountRoutingNumber, application, bin, createdAtGte, createdAtLte, expirationMonth, expirationYear, lastFour, name, ownerIdentityId, type);
        // TODO: test validations
    }

    /**
     * List Transfer Payment Instruments
     *
     * Get list of all the payment instruments in the transfers object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransferPaymentInstrumentsTest() throws ApiException {
        String transferId = null;
        Integer limit = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        PaymentInstrumentsList response = api.listByTransferId(transferId, limit, offset, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Update a Payment Instrument
     *
     * Update a payment instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPaymentInstrumentTest() throws ApiException {

        String paymentInstrumentId = "IUp9oSWhWUF31DPrJ8CojQeQ";
        Authorization authorization = Authorization.builder().merchantIdentity("MUucec6fHeaWo3VHYoSkUySM")
                .idempotencyId("123xyz")

                .build();
        Object body = authorization;
        PaymentInstrument response = finixClient.PaymentInstrument.update(paymentInstrumentId, body);
        response.toString();
        // TODO: test validations
    }

}
