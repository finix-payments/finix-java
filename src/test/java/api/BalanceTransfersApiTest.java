/*
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invoker.ApiException;
import invoker.Environment;
import invoker.FinixClient;
import model.*;
import org.junit.jupiter.api.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for BalanceTransfersApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("When Running BalanceTransfersApiTest")
public class BalanceTransfersApiTest {
    private FinixClient finixClient;

    private final BalanceTransfersApi api = new BalanceTransfersApi();
    /**
     * Create a Context Loads
     */
    @Test
    @BeforeAll
    @DisplayName("Finix Client")
    void contextLoads() {
        finixClient= new FinixClient("USbkjk46XqUTQHN3i2jaVnc1","ac915962-2757-49ea-aeee-10960a408b99", Environment.SANDBOX);
        assertEquals(true , finixClient!=null);

    }
    /**
     * Create a Balance Transfer
     *
     * Create a &#x60;balance_transfer&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Create a Balance Transfer")
    public void createBalanceTransferTest() throws ApiException {
        Map<String, String> localMap = new HashMap<>();
        localMap.put("example", "documentation tag");
        CreateBalanceTransferRequest createBalanceTransferRequest = CreateBalanceTransferRequest.builder()
                .description("Need to increase buffer given the high number of NSFs on merchant fee debits")
                .tags(localMap)
                .destination(CreateBalanceTransferRequest.DestinationEnum.FOR_BENEFIT_OF_ACCOUNT)
                .currency(Currency.USD)
                .amount(4000L)
                .source(CreateBalanceTransferRequest.SourceEnum.OPERATING_ACCOUNT)
                .processorType("LITLE_V1")
                .build();
        BalanceTransfer response = finixClient.BalanceTransfers.createBalanceTransfer(createBalanceTransferRequest);
        assertEquals(CreateBalanceTransferRequest.SourceEnum.OPERATING_ACCOUNT.toString(),response.getSource(),()->"Should return " + "OPERATING_ACCOUNT" + " but returns " + response.getSource());
    }

    /**
     * Get a Balance Transfer
     *
     * Retrieve the details of a &#x60;balance_transfer&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("Get a Balance Transfer")
    public void getBalanceTransfersTest() throws ApiException {
        String balanceTransfersId = "BT_v3KQqgpDPqskH8VH6isFyz";
        BalanceTransfer response = finixClient.BalanceTransfers.getBalanceTransfers(balanceTransfersId);
        assertEquals(CreateBalanceTransferRequest.SourceEnum.OPERATING_ACCOUNT.toString(),response.getSource(),()->"Should return " + "OPERATING_ACCOUNT" + " but returns " + response.getSource());

    }

    /**
     * List Balance Transfers
     *
     * Retrieve a list of &#x60;balance_transfers&#x60;.
     *
     * @throws ApiException if the Api call fails
     *
     **
     * EDITED
     * Test Function Name Generations from OPENAPI Spec with x-java-method-name
     *
     */
    @Test
    @DisplayName("List Balance Transfers")
    public void listBalanceTransfersTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        Long pageNumber = null;
        Long pageSize = null;
        String createdAtGte = null;
        String createdAtLte = null;
        String updatedAtGte = null;
        String updatedAtLte = null;
        String idempotencyId = null;
        Long amount = null;
        String description = null;
        String destination = null;
        String externalReferenceId = null;
        String referenceId = null;
        String source = null;

        BalanceTransferList response = finixClient.BalanceTransfers.listBalanceTransfers(ListBalanceTransfersQueryParams.builder()
                .limit(limit)
                .offset(offset)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .createdAtGte(createdAtGte)
                .createdAtLte(createdAtLte)
                .updatedAtGte(updatedAtGte)
                .updatedAtLte(updatedAtLte)
                .idempotencyId(idempotencyId)
                .amount(amount)
                .description(description)
                .destination(destination)
                .externalReferenceId(externalReferenceId)
                .referenceId(referenceId)
                .source(source)
                .build());
        assertEquals(20,response.getPage().getLimit().intValue(),()->"Should return " + "20" + " but returns " + response.getPage().getLimit());
    }

}
