version: 2.1
orbs:
  sign-packages: opennms/sign-packages@2.3.0
jobs:
  sonarqube:
    docker:
      - image: cimg/openjdk:11.0
    resource_class: medium

    environment:
      JAVA_TOOL_OPTIONS: -Xmx800m
      GRADLE_OPTS: -Xmx800m
      GRADLE_ACTION: sonarqube
      MAIN_GIT_BRANCH: develop

    steps:
      - checkout
      - run:
          name: Sonarqube analysis
          command: |
            sudo mkdir -p /var/log/finix
            sudo chmod ugo+rwx /var/log/finix
            echo "Gradle action: "$GRADLE_ACTION
            echo "Branch: "$CIRCLE_BRANCH
            echo "circleci tag: "${CIRCLE_TAG}
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed -E "s|.*/pull/||")
            echo "PR: "$PR_NUMBER
            if [ -z "${CIRCLE_TAG}" ]
            then
              if [ -z "${PR_NUMBER}" ]
              then
                echo "Pushing SonarQube results to branch: "$CIRCLE_BRANCH
                ./gradlew -Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=1g' \
                  -Dsonar.branch.name=$CIRCLE_BRANCH \
                  -Dsonar.dependencyCheck.summarize=true \
                  -Dsonar.login=$SONARQUBE_SERVER_LOGIN \
                  -Dsonar.host.url=$SONARQUBE_SERVER_URL \
                  dependencyCheckAnalyze $GRADLE_ACTION  \
                  --info --stacktrace  2>&1 | tee ~/project/.circleci/outfile.txt
              else
                echo "Pushing SonarQube results to PR: "$PR_NUMBER
                ./gradlew -Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=1g' \
                  -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=$PR_NUMBER \
                  -Dsonar.pullrequest.base=$MAIN_GIT_BRANCH \
                  -Dsonar.qualitygate.wait=true \
                  -Dsonar.dependencyCheck.summarize=true \
                  -Dsonar.login=$SONARQUBE_SERVER_LOGIN \
                  -Dsonar.host.url=$SONARQUBE_SERVER_URL \
                  dependencyCheckAnalyze $GRADLE_ACTION  \
                  --info --stacktrace  2>&1 | tee ~/project/.circleci/outfile.txt
              fi
            else
              echo "Gradle is skipped, no reason to run analysis on code that will be deployed"
            fi
          working_directory: ~/project/project-composite

  assemble:
    docker:
      - image: cimg/openjdk:11.0
    resource_class: medium

    steps:
      - checkout
      - run:
          name: build
          command: |
            mvn compile
            mvn package
          working_directory: ~/project
      - run:
          name: Show jar files
          command: find . -name "finix*.jar"
          working_directory: ~/project

  deploy:
    docker:
      - image: cimg/openjdk:11.0
    resource_class: medium

    steps:
      - checkout
      - run:
          name: build
          command: |
            cp .m2/settings.xml ~/.m2
            mvn compile
            mvn package
            mvn -Drepo.id=${ID} -Drepo.username=${NEXUS_USER} -Drepo.password=${NEXUS_PASSWORD} deploy
          working_directory: ~/project

  sign-rpms:
    description: Sign one or more RPM packages.
    parameters:
      gnupg_home:
        default: ~/.gnupg
        description: the location for GnuPG files
        type: string
      gnupg_key:
        description: the name/email or key ID to use when signing
        type: string
      packages:
        description: the RPM packages to sign
        type: string
      skip_if_forked_pr:
        default: false
        description: whether to skip running if this command is run on a forked PR
        type: boolean
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - run:
          command: |
            <<# parameters.skip_if_forked_pr >>
              if [ -n "$CIRCLE_PR_NUMBER" ]; then
                echo "Skipping RPM package signing for pull request #${CIRCLE_PR_NUMBER}."
                exit 0
              fi
            <</ parameters.skip_if_forked_pr >>
            export GNUPGHOME="$(realpath << parameters.gnupg_home >> || (cd << parameters.gnupg_home >>; pwd -P))"
            rpmsign \
              --define "passphrase_file ${GNUPGHOME}/gpg-passphrase" \
              --key-id='<< parameters.gnupg_key >>' \
              --resign << parameters.packages >>
          name: Sign RPM Packages

workflows:
  version: 2

  assemble:
    jobs:
      - assemble

  sonarqube:
    jobs:
      - sonarqube:
          context:
            - sonarqube

  build-deploy:
    jobs:
      - sign-rpms:
          filters:
            branches:
              only:
                - develop
            tags:
              only: /^(DEP).*/
      - deploy:
          filters:
            branches:
              only:
                - develop
            tags:
              only: /^(DEP).*/
          requires:
            - sign-rmps
