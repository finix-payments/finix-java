{{>licenseInfo}}

package {{package}};

import {{invokerPackage}}.ApiCallback;
import {{invokerPackage}}.FinixClient;
import {{invokerPackage}}.ApiException;
{{#dynamicOperations}}
import {{invokerPackage}}.ApiOperation;
{{/dynamicOperations}}
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{invokerPackage}}.Pair;
import {{invokerPackage}}.ProgressRequestBody;
import {{invokerPackage}}.ProgressResponseBody;
{{#performBeanValidation}}
import {{invokerPackage}}.BeanValidationException;
{{/performBeanValidation}}

import com.google.gson.reflect.TypeToken;
{{#dynamicOperations}}
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.parameters.Parameter;
{{/dynamicOperations}}

import java.io.IOException;

{{#useBeanValidation}}
import javax.validation.constraints.*;
{{/useBeanValidation}}
{{#performBeanValidation}}
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;
import java.util.Set;
import java.lang.reflect.Type;
{{/performBeanValidation}}
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.stream.Collectors;
import java.util.*;
import model.*;

{{#imports}}import {{import}};
{{/imports}}

{{#operations}}
{{#operation}}
{{#vendorExtensions.x-group-parameters}}
import model.{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams;
{{/vendorExtensions.x-group-parameters}}
{{/operation}}
{{/operations}}

import java.lang.reflect.Type;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{#supportStreaming}}
import java.io.InputStream;
{{/supportStreaming}}
{{/fullJavaUtil}}
import javax.ws.rs.core.GenericType;

{{#operations}}
public class {{classname}} {
private FinixClient localVarFinixClient;
private int localHostIndex;
private String localCustomBaseUrl;

public {{classname}}() {
this(Configuration.getDefaultFinixClient());
}

public {{classname}}(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public FinixClient getFinixClient() {
return localVarFinixClient;
}

public void setFinixClient(FinixClient finixClient) {
this.localVarFinixClient = finixClient;
}

public int getHostIndex() {
return localHostIndex;
}

public void setHostIndex(int hostIndex) {
this.localHostIndex = hostIndex;
}

public String getCustomBaseUrl() {
return localCustomBaseUrl;
}

public void setCustomBaseUrl(String customBaseUrl) {
this.localCustomBaseUrl = customBaseUrl;
}

{{#operation}}
    {{^vendorExtensions.x-group-parameters}}/**
    * Build call for {{operationId}}{{#allParams}}
        * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
    * @param _callback Callback for upload/download progress
    * @return Call to execute
    * @throws ApiException If fail to serialize the request body object
    {{#responses.0}}
        * @http.response.details
        <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            {{#responses}}
                <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
            {{/responses}}
        </table>
    {{/responses.0}}
    {{#isDeprecated}}
        * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
        * {{description}}
        * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
    */
    {{#isDeprecated}}
        @Deprecated
    {{/isDeprecated}}
    public{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}private{{/vendorExtensions.x-group-parameters}} okhttp3.Call {{operationId}}Call({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] { {{#servers}}"{{{url}}}"{{^-last}}, {{/-last}}{{/servers}} };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
    basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
    basePath = localBasePaths[localHostIndex];
    } else {
    basePath = null;
    }

    Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

    // create path and map variables
    {{^dynamicOperations}}
        String localVarPath = "{{{path}}}"{{#pathParams}}
            .replaceAll("\\{" + "{{baseName}}" + "\\}", localVarFinixClient.escapeString({{#collectionFormat}}localVarFinixClient.collectionPathParameterToString("{{{collectionFormat}}}", {{{paramName}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}.toString(){{/collectionFormat}})){{/pathParams}};
    {{/dynamicOperations}}
    {{#dynamicOperations}}
        ApiOperation apiOperation = localVarFinixClient.getOperationLookupMap().get("{{{operationId}}}");
        if (apiOperation == null) {
        throw new ApiException("Operation not found in OAS");
        }
        Operation operation = apiOperation.getOperation();
        String localVarPath = apiOperation.getPath();
        Map<String, Object> paramMap = new HashMap<>();
        {{#allParams}}
            {{^isFormParam}}
                {{^isBodyParam}}
                    paramMap.put("{{baseName}}", {{paramName}});
                {{/isBodyParam}}
            {{/isFormParam}}
        {{/allParams}}
    {{/dynamicOperations}}

    {{javaUtilPrefix}}List<Pair> localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
    {{javaUtilPrefix}}List<Pair> localVarCollectionQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
    {{javaUtilPrefix}}Map<String, String> localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
    {{javaUtilPrefix}}Map<String, String> localVarCookieParams = new {{javaUtilPrefix}}HashMap<String, String>();
    {{javaUtilPrefix}}Map<String, Object> localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();

    {{#formParams}}
            if ({{paramName}} != null) {
            localVarFormParams.put("{{baseName}}", {{paramName}});
            }

    {{/formParams}}
    {{#bodyParam}}
    {{#vars}}
    {{#isFile}}
    {{#bodyParam}}
    {{#vars}}
        localVarFormParams.put("{{baseName}}", {{paramName}}.{{getter}}());
    {{/vars}}
    {{/bodyParam}}
    {{/isFile}}
    {{/vars}}
    {{/bodyParam}}
    {{^dynamicOperations}}
        {{#queryParams}}
                if ({{paramName}} != null) {
            {{#collectionFormat}}localVarCollectionQueryParams.addAll(localVarFinixClient.parameterToPairs("{{{.}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll(localVarFinixClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
                }

        {{/queryParams}}
        {{#headerParams}}
                if ({{paramName}} != null) {
                localVarHeaderParams.put("{{baseName}}", localVarFinixClient.parameterToString({{paramName}}));
                }

        {{/headerParams}}
        {{#cookieParams}}
                if ({{paramName}} != null) {
                localVarCookieParams.put("{{baseName}}", localVarFinixClient.parameterToString({{paramName}}));
                }

        {{/cookieParams}}
    {{/dynamicOperations}}
    {{#dynamicOperations}}
            localVarPath = localVarFinixClient.fillParametersFromOperation(operation, paramMap, localVarPath, localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarCookieParams);

    {{/dynamicOperations}}
        final String[] localVarAccepts = {
            "{{#produces.0}}{{{mediaType}}}{{/produces.0}}"
        };

        final String localVarAccept = localVarFinixClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
        localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
        };
        final String localVarContentType = localVarFinixClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
        localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };
        return localVarFinixClient.buildCall(basePath, localVarPath, {{^dynamicOperations}}"{{httpMethod}}"{{/dynamicOperations}}{{#dynamicOperations}}apiOperation.getMethod(){{/dynamicOperations}}, localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
        }

    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        @SuppressWarnings("rawtypes")
        private okhttp3.Call {{operationId}}ValidateBeforeCall({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback _callback) throws ApiException {
    {{^performBeanValidation}}
        {{#allParams}}{{#required}}
                // verify the required parameter '{{paramName}}' is set
                if ({{paramName}} == null) {
                throw new ApiException("Missing the required parameter '{{paramName}}' when calling {{operationId}}(Async)");
                }
        {{/required}}{{/allParams}}

            okhttp3.Call localVarCall = {{operationId}}Call({{#allParams}}{{paramName}}, {{/allParams}}_callback);
            return localVarCall;

    {{/performBeanValidation}}
    {{#performBeanValidation}}
            try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { {{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}} };
            Method method = this.getClass().getMethod("{{operationId}}WithHttpInfo"{{#allParams}}, {{#isArray}}java.util.List{{/isArray}}{{#isMap}}java.util.Map{{/isMap}}{{^isArray}}{{^isMap}}{{{dataType}}}{{/isMap}}{{/isArray}}.class{{/allParams}});
            Set<ConstraintViolation<{{classname}}>> violations = executableValidator.validateParameters(this, method,
            parameterValues);

            if (violations.size() == 0) {
            okhttp3.Call localVarCall = {{operationId}}Call({{#allParams}}{{paramName}}, {{/allParams}}_callback);
            return localVarCall;

            } else {
            throw new BeanValidationException((Set) violations);
            }
            } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
            } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
            }

    {{/performBeanValidation}}
        }

    {{^vendorExtensions.x-group-parameters}}
            /**
            * {{summary}}
            * {{notes}}{{#allParams}}
                * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#returnType}}
                * @return {{.}}{{/returnType}}
            * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        {{#responses.0}}
                * @http.response.details
                <table summary="Response Details" border="1">
                    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                    {{#responses}}
                        <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                    {{/responses}}
                </table>
        {{/responses.0}}
        {{#isDeprecated}}
                * @deprecated
        {{/isDeprecated}}
        {{#externalDocs}}
                * {{description}}
                * @see <a href="{{url}}">{{summary}} Documentation</a>
        {{/externalDocs}}
            */
        {{#isDeprecated}}
                @Deprecated
        {{/isDeprecated}}

        {{#vendorExtensions.x-streaming}}
                public {{#returnType}}InputStream {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
            {{#returnType}}InputStream localVarResp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});{{#returnType}}
                    return localVarResp;{{/returnType}}
                }
        {{/vendorExtensions.x-streaming}}

        {{^vendorExtensions.x-streaming}}
        {{^vendorExtensions.x-returns-list}}
                public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
            {{#returnType}}ApiResponse<{{{.}}}> localVarResp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});{{#returnType}}
                    return localVarResp.getData();{{/returnType}}
                }
        {{/vendorExtensions.x-returns-list}}
        {{#vendorExtensions.x-returns-list}}
                public {{#returnType}}FinixList {{/returnType}}{{^returnType}}void {{/returnType}}{{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
                {{#returnType}}ApiResponse<{{{.}}}> localVarResp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
            {{#returnType}}
                    {{{returnType}}} response = localVarResp.getData();
                    Boolean hasNextCursor = (response.getPage().getClass().getName() == "model.PageCursor");
<!--                {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams queryParams = ({{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams) getQueryParam(response.getPage(),-->
<!--                {{operationId}}QueryParams,-->
<!--                    hasNextCursor);-->
<!--                    Boolean reachedEnd = reachedEnd(response.getPage(), hasNextCursor);-->
<!--                    NextFetchFunction nextFetch = (a) -> {-->
<!--                    queryParams.setLimit(a);-->
<!--                    if (reachedEnd) {-->
<!--                    throw new ArrayIndexOutOfBoundsException();-->
<!--                    }-->
<!--                    return this.{{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#requiredParams}}{{paramName}}, {{/requiredParams}} queryParams);-->
<!--                    };-->
                    FinixList currList = new FinixList(null, false);
                    if (response.getEmbedded() != null) {
                        String fieldName = getFieldName(response.getEmbedded());
                        String fieldGet = "get" + fieldName;
                        Method getList = response.getEmbedded().getClass().getMethod(fieldGet);
                        Collection<Object> embeddedList = (Collection<Object>) getList.invoke(response.getEmbedded());
                        if (embeddedList.size() < response.getPage().getLimit()){
                            currList = new FinixList<>(nextFetch, false);
                        }
                        for(Object item : embeddedList)
                        {
                            currList.add(item);
                        }
                    }
                    currList.setPage(response.getPage());
                    currList.setLinks(response.getLinks());
                    return currList;
            {{/returnType}}
                    }
        {{/vendorExtensions.x-returns-list}}
        {{/vendorExtensions.x-streaming}}

    {{/vendorExtensions.x-group-parameters}}

    {{^vendorExtensions.x-group-parameters}}/**
        * {{summary}}
        * {{notes}}{{#allParams}}
            * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
        * @return ApiResponse&lt;{{returnType}}{{^returnType}}Void{{/returnType}}&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
            * {{description}}
            * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}private{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-streaming}} InputStream {{operationId}}WithHttpInfo({{#allParams}}{{#useBeanValidation}}{{>beanValidationQueryParams}}{{/useBeanValidation}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
        okhttp3.Call localVarCall = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}null);
    {{#returnType}}
        {{#errorObjectType}}
                try {
                Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
                return localVarFinixClient.executeStream(localVarCall, localVarReturnType);
                } catch (ApiException e) {
                e.setErrorObject(localVarFinixClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<{{{errorObjectType}}}>(){}.getType()));
                e.setErrorObjectType(new GenericType<{{{errorObjectType}}}>(){});
                throw e;
                }
        {{/errorObjectType}}
        {{^errorObjectType}}
                Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
                return localVarFinixClient.executeStream(localVarCall, localVarReturnType);
        {{/errorObjectType}}
    {{/returnType}}
        }
    {{/vendorExtensions.x-streaming}}{{^vendorExtensions.x-streaming}} ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{#useBeanValidation}}{{>beanValidationQueryParams}}{{/useBeanValidation}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
        okhttp3.Call localVarCall = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}null);
    {{^returnType}}
            return localVarFinixClient.execute(localVarCall);
    {{/returnType}}
    {{#returnType}}
        {{#errorObjectType}}
                try {
                Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
                } catch (ApiException e) {
                e.setErrorObject(localVarFinixClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<{{{errorObjectType}}}>(){}.getType()));
                e.setErrorObjectType(new GenericType<{{{errorObjectType}}}>(){});
                throw e;
                }
        {{/errorObjectType}}
        {{^errorObjectType}}
                Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
                return localVarFinixClient.execute(localVarCall, localVarReturnType);
        {{/errorObjectType}}
    {{/returnType}}
        }
    {{/vendorExtensions.x-streaming}}

    {{^vendorExtensions.x-group-parameters}}/**
        * {{summary}} (asynchronously)
        * {{notes}}{{#allParams}}
            * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
            * {{description}}
            * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}private{{/vendorExtensions.x-group-parameters}} okhttp3.Call {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback<{{{returnType}}}{{^returnType}}Void{{/returnType}}> _callback) throws ApiException {

        okhttp3.Call localVarCall = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}_callback);
    {{#returnType}}Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
        localVarFinixClient.executeAsync(localVarCall, localVarReturnType, _callback);{{/returnType}}{{^returnType}}localVarFinixClient.executeAsync(localVarCall, _callback);{{/returnType}}
        return localVarCall;
        }
    {{#vendorExtensions.x-group-parameters}}

        public class API{{operationId}}Request {
    {{#requiredParams}}
            private final {{{dataType}}} {{paramName}};
    {{/requiredParams}}
    {{#optionalParams}}
            private {{{dataType}}} {{paramName}};
    {{/optionalParams}}

        private API{{operationId}}Request({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) {
    {{#requiredParams}}
            this.{{paramName}} = {{paramName}};
    {{/requiredParams}}
        }

    {{#optionalParams}}
            /**
            * Set {{paramName}}
            * @param {{paramName}} {{description}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}})
            * @return API{{operationId}}Request
            */
            public API{{operationId}}Request {{paramName}}({{{dataType}}} {{paramName}}) {
            this.{{paramName}} = {{paramName}};
            return this;
            }

    {{/optionalParams}}
        /**
        * Build call for {{operationId}}
        * @param _callback ApiCallback API callback
        * @return Call to execute
        * @throws ApiException If fail to serialize the request body object
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
        return {{operationId}}Call({{#allParams}}{{paramName}}, {{/allParams}}_callback);
        }

        /**
        * Execute {{operationId}} request{{#returnType}}
            * @return {{.}}{{/returnType}}
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public {{{returnType}}}{{^returnType}}void{{/returnType}} execute() throws ApiException {
    {{#returnType}}ApiResponse<{{{.}}}> localVarResp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});{{#returnType}}
            return localVarResp.getData();{{/returnType}}
        }

        /**
        * Execute {{operationId}} request with HTTP info returned
        * @return ApiResponse&lt;{{returnType}}{{^returnType}}Void{{/returnType}}&gt;
        * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}> executeWithHttpInfo() throws ApiException {
        return {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        }

        /**
        * Execute {{operationId}} request (asynchronously)
        * @param _callback The callback to be executed when the API call finishes
        * @return The request call
        * @throws ApiException If fail to process the API call, e.g. serializing the request body object
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public okhttp3.Call executeAsync(final ApiCallback<{{{returnType}}}{{^returnType}}Void{{/returnType}}> _callback) throws ApiException {
        return {{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}_callback);
        }
        }

        {{^vendorExtensions.x-returns-list}}
        /**
        * {{summary}}
        * {{notes}}{{#requiredParams}}
            * @param {{paramName}} {{description}} (required){{/requiredParams}}
        * @return API{{operationId}}Request
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
            * {{description}}
            * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
    public {{{returnType}}} {{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}} {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams {{operationId}}QueryParams) throws ApiException {

        API{{operationId}}Request request = new API{{operationId}}Request({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}});
        {{#optionalParams}}
        request.{{paramName}}({{operationId}}QueryParams.get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}());
        {{/optionalParams}}
        return request.execute();
    }
    {{/vendorExtensions.x-returns-list}}
    {{#vendorExtensions.x-returns-list}}
        /**
        * {{summary}}
        * {{notes}}{{#requiredParams}}
            * @param {{paramName}} {{description}} (required){{/requiredParams}}
        * @return API{{operationId}}Request
    {{#responses.0}}
            * @http.response.details
            <table summary="Response Details" border="1">
                <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
                {{#responses}}
                    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
                {{/responses}}
            </table>
    {{/responses.0}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
            * {{description}}
            * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
        */
    {{#isDeprecated}}
            @Deprecated
    {{/isDeprecated}}
        public FinixList {{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}} {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams {{operationId}}QueryParams)
            throws ApiException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, IllegalAccessException {

            API{{operationId}}Request request = new API{{operationId}}Request({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}});
        {{#optionalParams}}
                request.{{paramName}}({{operationId}}QueryParams.get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}());
        {{/optionalParams}}
            {{{returnType}}} response = request.execute();
            Boolean hasNextCursor = (response.getPage().getClass().getName() == "model.PageCursor");
            {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams queryParams = ({{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}QueryParams) getQueryParam(response.getPage(),
                {{operationId}}QueryParams,
                hasNextCursor);
            Boolean reachedEnd = reachedEnd(response.getPage(), hasNextCursor);
            NextFetchFunction nextFetch = (a) -> {
                queryParams.setLimit(a);
                if (reachedEnd) {
                throw new ArrayIndexOutOfBoundsException();
                }
                return this.{{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#requiredParams}}{{paramName}}, {{/requiredParams}} queryParams);
            };
            FinixList currList = new FinixList(nextFetch, !reachedEnd);
            if (response.getEmbedded() != null){
                String fieldName = getFieldName(response.getEmbedded());
                String fieldGet = "get" + fieldName;
                Method getList = response.getEmbedded().getClass().getMethod(fieldGet);
                Collection<Object> embeddedList = (Collection<Object>) getList.invoke(response.getEmbedded());
                if (embeddedList.size() < response.getPage().getLimit()){
                    currList = new FinixList<>(nextFetch, false);
                }
                for(Object item : embeddedList)
                {
                    currList.add(item);
                }
            }
            currList.setPage(response.getPage());
            currList.setLinks(response.getLinks());
            return currList;
        }
    {{/vendorExtensions.x-returns-list}}
    {{/vendorExtensions.x-group-parameters}}
{{/operation}}
        private String getFieldName(Object response){
            Field[] methods = response.getClass().getFields();
            Field[] testMethods = response.getClass().getDeclaredFields();
            List<Field> a = Arrays.asList(methods);
            List<Field> b = Arrays.asList(testMethods);
            List<Field> diff = b.stream().filter(element -> !a.contains(element)).collect(Collectors.toList());
            String fieldName = diff.get(0).getName();
            return  fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
        }

        private Object getQueryParam(Object pageObject, Object queryParam, Boolean hasCursor) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
                if (hasCursor){
                    Method setCursor = queryParam.getClass().getMethod("setAfterCursor", String.class);
                    Method getOffset = pageObject.getClass().getMethod("getNextCursor");
                    String nextCursor = (String) getOffset.invoke(pageObject);
                    setCursor.invoke(queryParam, nextCursor);
                }
                else{
                    Method setOffset = queryParam.getClass().getMethod("setOffset", Long.class);
                    Method getOffset = pageObject.getClass().getMethod("getOffset");
                    Long offset = (Long) getOffset.invoke(pageObject);
                    setOffset.invoke(queryParam, offset);
                }
                return queryParam;
        }

        private Boolean reachedEnd(Object pageObject, Boolean hasCursor) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
            if (hasCursor){
                Method getOffset = pageObject.getClass().getMethod("getNextCursor");
                String nextCursor = (String) getOffset.invoke(pageObject);
                if (nextCursor == null){
                    return true;
                }
            }
            else{
                Method getOffset = pageObject.getClass().getMethod("getOffset");
                Method getLimit = pageObject.getClass().getMethod("getLimit");
                Method getCount = pageObject.getClass().getMethod("getCount");
                Long offset = (Long) getOffset.invoke(pageObject);
                Long limit = (Long) getLimit.invoke(pageObject);
                Long count = (Long) getCount.invoke(pageObject);
                if (offset + limit > count){
                    return true;
                }
            }
            return false;
        }
    }
{{/operations}}